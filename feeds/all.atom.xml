<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>poliastro</title><link href="https://www.poliastro.space/" rel="alternate"></link><link href="https://www.poliastro.space/feeds/all.atom.xml" rel="self"></link><id>https://www.poliastro.space/</id><updated>2023-08-22T21:00:00+02:00</updated><subtitle>poliastro website</subtitle><entry><title>Jorge Martinez steps down as maintainer of the project</title><link href="https://www.poliastro.space/blog/2023/08/22/jorge-martinez-steps-down/" rel="alternate"></link><published>2023-08-22T21:00:00+02:00</published><updated>2023-08-22T21:00:00+02:00</updated><author><name>Jorge Martinez Garrido</name></author><id>tag:www.poliastro.space,2023-08-22:/blog/2023/08/22/jorge-martinez-steps-down/</id><summary type="html">&lt;p&gt;Dear community,&lt;/p&gt;
&lt;p&gt;I want to share with you that, due to professional commitments, I have made the
decision to step down from my role as a maintainer of the poliastro project.&lt;/p&gt;
&lt;p&gt;Rather than delving into the specific circumstances that led to this choice, I'd
like to take this opportunity to offer inspiration to new developers who are
considering joining the vibrant world of free and open-source software.&lt;/p&gt;
&lt;p&gt;Looking back to December 2018, shortly after the holiday season, I can vividly
recall the excitement of having &lt;a href="https://github.com/poliastro/poliastro/pull/491"&gt;my first pull request for
poliastro&lt;/a&gt; merged. It was an
exhilarating moment, as it marked the first time in months that I truly felt my
contributions were making a meaningful impact, being valued and utilized by
others.&lt;/p&gt;
&lt;p&gt;Throughout my journey, &lt;a href="https://github.com/astrojuanlu"&gt;Juan Luis Cano Rodríguez&lt;/a&gt;,
an exceptional mentor, has provided invaluable guidance. His meticulous code
reviews …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dear community,&lt;/p&gt;
&lt;p&gt;I want to share with you that, due to professional commitments, I have made the
decision to step down from my role as a maintainer of the poliastro project.&lt;/p&gt;
&lt;p&gt;Rather than delving into the specific circumstances that led to this choice, I'd
like to take this opportunity to offer inspiration to new developers who are
considering joining the vibrant world of free and open-source software.&lt;/p&gt;
&lt;p&gt;Looking back to December 2018, shortly after the holiday season, I can vividly
recall the excitement of having &lt;a href="https://github.com/poliastro/poliastro/pull/491"&gt;my first pull request for
poliastro&lt;/a&gt; merged. It was an
exhilarating moment, as it marked the first time in months that I truly felt my
contributions were making a meaningful impact, being valued and utilized by
others.&lt;/p&gt;
&lt;p&gt;Throughout my journey, &lt;a href="https://github.com/astrojuanlu"&gt;Juan Luis Cano Rodríguez&lt;/a&gt;,
an exceptional mentor, has provided invaluable guidance. His meticulous code
reviews have been a wellspring of insights that greatly enriched my learning
experience. I extend my heartfelt gratitude for the generous time and effort he
invested in teaching and mentoring me.&lt;/p&gt;
&lt;p&gt;My tenure with poliastro not only allowed me to develop astro-related skills but
also opened doors to larger opportunities. As a recipient of the 
&lt;a href="https://summerofcode.withgoogle.com/archive/2019/projects/4887352839766016"&gt;Google Summer of Code&lt;/a&gt;,
I had the privilege of receiving compensation for my software development
contributions, marking a significant milestone in my journey, especially as a
student at that time.&lt;/p&gt;
&lt;p&gt;I devoted countless nights to coding and learning, expanding my horizons beyond
the realm of astrophysics. One such passion is my fascination with Linux, a
topic that I find equally captivating.&lt;/p&gt;
&lt;p&gt;As I take this step back, I encourage you all to consider embracing open-source
projects like poliastro. The journey is rewarding, providing not only technical
growth but also a strong sense of community and purpose. New contributors, your
efforts can truly make a difference, just as mine did when I started on this
remarkable journey.&lt;/p&gt;
&lt;p&gt;With gratitude and optimism,&lt;/p&gt;
&lt;p&gt;Jorge Martinez&lt;/p&gt;</content><category term="articles"></category><category term="poliastro"></category></entry><entry><title>Juan Luis steps down as maintainer of the project</title><link href="https://www.poliastro.space/blog/2022/12/21/juan-luis-steps-down/" rel="alternate"></link><published>2022-12-21T19:00:00+01:00</published><updated>2022-12-21T19:00:00+01:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2022-12-21:/blog/2022/12/21/juan-luis-steps-down/</id><summary type="html">&lt;p&gt;Today is &lt;a href="https://www.volunteeramnestyday.net/"&gt;Volunteer Responsibility Amnesty Day&lt;/a&gt;,
and with a heavy heart I, &lt;a href="https://github.com/astrojuanlu/"&gt;Juan Luis&lt;/a&gt;, would like to announce
that I am stepping down as maintainer of poliastro, almost a decade after creating the project.&lt;/p&gt;
&lt;p&gt;Some of you might find this surprising, some others may have seen this coming for some time.
This is a continuation of my decision to
&lt;a href="https://github.com/astropy/astropy.github.com/pull/452#issuecomment-961131035"&gt;step down as co-maintainer of &lt;code&gt;astropy.coordinates&lt;/code&gt;&lt;/a&gt;
a year ago, and a realization of the fact that
I have been spending less and less time in poliastro in the past months.&lt;/p&gt;
&lt;p&gt;Before getting into details about why stepping down now,
I would like to comfort existing users by saying that I spoke to
&lt;a href="https://github.com/jorgepiloto/"&gt;Jorge Martínez&lt;/a&gt;,
co-maintainer since he started as a Google Summer of Code Student in 2018-2019,
and he accepted taking over the maintenance of the project.
The pace will …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today is &lt;a href="https://www.volunteeramnestyday.net/"&gt;Volunteer Responsibility Amnesty Day&lt;/a&gt;,
and with a heavy heart I, &lt;a href="https://github.com/astrojuanlu/"&gt;Juan Luis&lt;/a&gt;, would like to announce
that I am stepping down as maintainer of poliastro, almost a decade after creating the project.&lt;/p&gt;
&lt;p&gt;Some of you might find this surprising, some others may have seen this coming for some time.
This is a continuation of my decision to
&lt;a href="https://github.com/astropy/astropy.github.com/pull/452#issuecomment-961131035"&gt;step down as co-maintainer of &lt;code&gt;astropy.coordinates&lt;/code&gt;&lt;/a&gt;
a year ago, and a realization of the fact that
I have been spending less and less time in poliastro in the past months.&lt;/p&gt;
&lt;p&gt;Before getting into details about why stepping down now,
I would like to comfort existing users by saying that I spoke to
&lt;a href="https://github.com/jorgepiloto/"&gt;Jorge Martínez&lt;/a&gt;,
co-maintainer since he started as a Google Summer of Code Student in 2018-2019,
and he accepted taking over the maintenance of the project.
The pace will still be slow for a while until Jorge finds a good work-life balance
and sorts out his own personal circumstances.
On a personal note, Jorge is one of the kindest and most brilliant people I have ever met,
and I am sure the project is in good hands.&lt;/p&gt;
&lt;p&gt;When I evolved poliastro beyond a disorganized collection of MATLAB and FORTRAN scripts
glued together with Python, I wanted to prove several things:
that a pure-Python package could be "fast enough" for most use cases;
that it was possible to define a friendly, yet rigorous API
that would lower the barrier of entry for Astrodynamics;
that making the effort of maintaining the code over an extended period of time
and resisting the urge of abandoning it would attract users;
and that we could collectively rescue decades of scientific progress
from the oblivion of paywalled journals and obscure PDFs
and turn it into well tested, carefully validated, reasonably documented, open source code.
From this point of view, I think poliastro has been a great success:
it's been used by &lt;a href="https://github.com/AnalyticalGraphicsInc/STKCodeExamples/blob/466c139/StkAutomation/Python/Scenario_Analysis/Lifetime%20Analysis/RunLifetimeAnalysis.ipynb#L30"&gt;the creators of STK&lt;/a&gt;,
&lt;a href="https://github.com/IBM/spacetech-ssa"&gt;IBM Space Tech&lt;/a&gt;,
&lt;a href="https://github.com/satellogic/orbit-predictor/blob/686af07/orbit_predictor/keplerian.py#L24"&gt;Satellogic&lt;/a&gt;,
&lt;a href="https://gitlab.com/librespacefoundation/polaris/vinvelivaanilai"&gt;the Libre Space Foundation&lt;/a&gt;,
and many other relevant companies in the space sector.
In fact, I would say that my biggest achievement with poliastro is that 
many people's first contact with GitHub was to open an issue in our repository.
All of this wouldn't have been possible without a supportive community,
funding from various entities (the European Space Agency, Google Summer of Code, and NumFOCUS),
and our dear students over the years.
I'm incredibly proud and thankful of all the things we have achieved together over the past decade.&lt;/p&gt;
&lt;p&gt;And yet, I feel it is the moment to step down as the maintainer of the project and focus on other things.
There are numerous reasons for my decision, and it is something I have meditated for a very long time.&lt;/p&gt;
&lt;p&gt;To start, it has been very difficult to find a consistent audience for poliastro.
When I presented the project at PyCon, PyData, and SciPy events,
everybody told me that poliastro was really cool (we put a lot of effort into those plots!)
but we never met people with the skills, time, and motivation to contribute
(some of them had the skills but no time, and viceversa).
The one time I presented it at an industry conference
I felt tiny compared to bigger projects like Orekit, let alone commercial ones,
and didn't get much feedback.
And finally, when I reached out to the few alive scientists that had worked on astrodynamics
projects that were within our reach, I got very little help
(the one exception being David A. Vallado, who always replied promptly to my emails
and showed genuine excitement and encouragement and to whom I am deeply thankful).
It has always been too much astrodynamics for software engineers,
and too much software engineering for astrodynamicists.
This is not new of open source computational science projects,
with the difference that I was not working in academia,
and most of the time I didn't even have direct connection with people using it for real projects.
The icing in the cake, sadly, were space companies that told me they were using poliastro,
but when I asked them for a brief testimonial, they never replied.&lt;/p&gt;
&lt;p&gt;For people as privileged as myself, that can afford to spend afternoons and weekends writing code for free,
the currency for volunteering work is sometimes very intangible: a bit of recognition can go a long way.
At the same time, I know I could have been much more persistent, reached out to industry actors directly,
established more clear ways to contribute to the project,
secured a business model that didn't rely on grants. I don't want to somehow convey that
I tried everything I could think of: in fact, there are so many ideas that could make
poliastro more sustainable. This is very good news: it means that someone else can try them out!&lt;/p&gt;
&lt;p&gt;At the technical level, poliastro is now more mature and it has started to hit several bottlenecks:
the performance of &lt;code&gt;astropy.units&lt;/code&gt;, the complexity of &lt;code&gt;astropy.coordinates&lt;/code&gt;,
the limitations of &lt;code&gt;numba&lt;/code&gt;, the overhead of &lt;code&gt;numpy&lt;/code&gt; for small arrays,
and the lack of maintainers for &lt;code&gt;scipy.integrate&lt;/code&gt;, to name a few.
There are various unfinished prototypes that try to move past these bottlenecks:
&lt;a href="https://github.com/astrojuanlu/fastunits/"&gt;a (hopefully) faster units package&lt;/a&gt;,
&lt;a href="https://github.com/astrojuanlu/astropy/commit/f7873c5a"&gt;a proof of concept of a simpler coordinate frames implementation&lt;/a&gt;,
&lt;a href="https://github.com/pleiszenburg/bulk_propagate/blob/master/test_notation.ipynb"&gt;an attempt of replacing small arrays by tuples&lt;/a&gt;,
&lt;a href="https://github.com/hgrecco/numbakit-ode/"&gt;conversations with a numba-accelerated ODE integration library&lt;/a&gt;.
But at this point, experiments and proofs of concept are no longer enough:
for poliastro to keep moving forward it is essential to keep pushing these ideas
and contribute to the upstream dependencies, which requires patience, dedication, time, and focus.&lt;/p&gt;
&lt;p&gt;Finally, I found it extremely hard to reconcile my ardent passion for space
with the reality of the space industry. When I was younger, inspired by the wonderful works of Carl Sagan
and ideas behind the Moon Treaty, I thought that space exploration would help humanity achieve world peace,
and that we would venture the Solar System in a peaceful, cooperative way.
In addition, I truly believed that space observation would help us tackle the climate emergency,
humanity's most important and pressing problem.
What we got instead was the militarization of space with the creation of the US Space Force,
the rolling of the Artemis Accords aligned with the US interests,
a new space race of bored tech billionaires,
fervent adoration towards Elon Musk despite being the most toxic CEO of our times,
&lt;a href="https://joemorrison.substack.com/p/the-commercial-satellite-imagery"&gt;the US military being the main customer of space observation companies&lt;/a&gt;,
and in general a reek of long-termism and tech solutionism I can't stand anymore.
I got exhausted of the space industry and I don't plan to go back,
which made my involvement in poliastro even more meaningless.&lt;/p&gt;
&lt;p&gt;Despite these bittersweet lines, I am incredibly thankful of having spent the past decade
developing poliastro, learning from the broader open source community,
and working with kind and passionate human beings
(I especially miss my Argentinian colleagues from Satellogic so very much).
I am looking forward to spending the next decade applying these learnings to
accelerate the &lt;a href="https://solidarityeconomyprinciples.org/"&gt;Solidarity Economy&lt;/a&gt;
and working towards a sustainable, regenerative future.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Per Python ad astra!&lt;/em&gt;&lt;/p&gt;</content><category term="articles"></category><category term="poliastro"></category></entry><entry><title>April updates</title><link href="https://www.poliastro.space/blog/2022/05/12/april-updates/" rel="alternate"></link><published>2022-05-12T12:00:00+02:00</published><updated>2022-05-12T12:00:00+02:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2022-05-12:/blog/2022/05/12/april-updates/</id><content type="html">&lt;p&gt;We call them April updates but we've mostly started working in May,
allow us this small inconsistency 😉&lt;/p&gt;
&lt;p&gt;Juan Luis will give a talk about poliastro at SciPy US 2022 in Austin, Texas, USA!
We are thrilled to have this opportunity to present almost a decade of work in such an important event,
and we have already started
&lt;a href="https://github.com/poliastro/scipy_proceedings/tree/poliastro/papers/juanluis_cano_poliastro"&gt;working on a full conference paper&lt;/a&gt;
as well,
with a draft hopefully ready by the end of the month.&lt;/p&gt;
&lt;p&gt;Since our last update we have published two bugfix releases of poliastro,
the last one being &lt;a href="https://docs.poliastro.space/en/v0.16.3/changelog.html#poliastro-0-16-3-2022-05-09"&gt;poliastro 0.16.3&lt;/a&gt;,
with documentation improvements and several compatibility fixes with the latest versions of Astropy and Python.&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>April updates</title><link href="https://www.poliastro.space/blog/2022/05/12/april-updates/" rel="alternate"></link><published>2022-05-12T12:00:00+02:00</published><updated>2022-05-12T12:00:00+02:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2022-05-12:/blog/2022/05/12/april-updates/</id><content type="html">&lt;p&gt;We call them April updates but we've mostly started working in May,
allow us this small inconsistency 😉&lt;/p&gt;
&lt;p&gt;Juan Luis will give a talk about poliastro at SciPy US 2022 in Austin, Texas, USA!
We are thrilled to have this opportunity to present almost a decade of work in such an important event,
and we have already started
&lt;a href="https://github.com/poliastro/scipy_proceedings/tree/poliastro/papers/juanluis_cano_poliastro"&gt;working on a full conference paper&lt;/a&gt;
as well,
with a draft hopefully ready by the end of the month.&lt;/p&gt;
&lt;p&gt;Since our last update we have published two bugfix releases of poliastro,
the last one being &lt;a href="https://docs.poliastro.space/en/v0.16.3/changelog.html#poliastro-0-16-3-2022-05-09"&gt;poliastro 0.16.3&lt;/a&gt;,
with documentation improvements and several compatibility fixes with the latest versions of Astropy and Python.&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>January updates</title><link href="https://www.poliastro.space/blog/2022/02/01/january-updates/" rel="alternate"></link><published>2022-02-01T16:00:00+01:00</published><updated>2022-02-01T16:00:00+01:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2022-02-01:/blog/2022/02/01/january-updates/</id><summary type="html">&lt;p&gt;This January, we spent a lot of time discussing Sebastian's proposal
to &lt;a href="https://github.com/poliastro/poliastro/pull/1445"&gt;add a new &lt;code&gt;OrbitArray&lt;/code&gt; object&lt;/a&gt;
in line with our Small Development Grant.
We are now all on the same page and the implementation is progressing nicely!&lt;/p&gt;
&lt;p&gt;Apart from that, our contributors have been working on a number of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After the release of numba 0.55, Juan Luis
  &lt;a href="https://github.com/poliastro/poliastro/pull/1441"&gt;added support for Python 3.10&lt;/a&gt;
  and dropped 3.7.&lt;/li&gt;
&lt;li&gt;Jorge has &lt;a href="https://github.com/poliastro/poliastro/pull/1450"&gt;fixed some long-standing problems with the Lambert
  API&lt;/a&gt;
  by unifying the two algorithms included in the libary, removing an unnecessary iteration,
  and documenting everything in depth.&lt;/li&gt;
&lt;li&gt;Yash &lt;a href="https://github.com/poliastro/poliastro/pull/1443"&gt;addressed a pickling error with bodies&lt;/a&gt;
  that was discovered after using poliastro in multiprocessing workloads,
  &lt;a href="https://github.com/poliastro/poliastro/pull/1442"&gt;unified the computation of vector norms&lt;/a&gt;,
  and &lt;a href="https://github.com/poliastro/poliastro/pull/1444"&gt;fixed a propagation error&lt;/a&gt;
  that was affecting highly eccentric orbits.&lt;/li&gt;
&lt;li&gt;Kevin, a new contributor, added
  &lt;a href="https://github.com/poliastro/poliastro/pull/1439"&gt;the propagation algorithm he …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This January, we spent a lot of time discussing Sebastian's proposal
to &lt;a href="https://github.com/poliastro/poliastro/pull/1445"&gt;add a new &lt;code&gt;OrbitArray&lt;/code&gt; object&lt;/a&gt;
in line with our Small Development Grant.
We are now all on the same page and the implementation is progressing nicely!&lt;/p&gt;
&lt;p&gt;Apart from that, our contributors have been working on a number of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After the release of numba 0.55, Juan Luis
  &lt;a href="https://github.com/poliastro/poliastro/pull/1441"&gt;added support for Python 3.10&lt;/a&gt;
  and dropped 3.7.&lt;/li&gt;
&lt;li&gt;Jorge has &lt;a href="https://github.com/poliastro/poliastro/pull/1450"&gt;fixed some long-standing problems with the Lambert
  API&lt;/a&gt;
  by unifying the two algorithms included in the libary, removing an unnecessary iteration,
  and documenting everything in depth.&lt;/li&gt;
&lt;li&gt;Yash &lt;a href="https://github.com/poliastro/poliastro/pull/1443"&gt;addressed a pickling error with bodies&lt;/a&gt;
  that was discovered after using poliastro in multiprocessing workloads,
  &lt;a href="https://github.com/poliastro/poliastro/pull/1442"&gt;unified the computation of vector norms&lt;/a&gt;,
  and &lt;a href="https://github.com/poliastro/poliastro/pull/1444"&gt;fixed a propagation error&lt;/a&gt;
  that was affecting highly eccentric orbits.&lt;/li&gt;
&lt;li&gt;Kevin, a new contributor, added
  &lt;a href="https://github.com/poliastro/poliastro/pull/1439"&gt;the propagation algorithm he developed&lt;/a&gt;
  as part of his Masters thesis, and
  contributed several functions related to the
  &lt;a href="https://github.com/poliastro/poliastro/pull/1451"&gt;Circular Restricted Three Body Problem&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the coming weeks, Juan Luis will work with the Libre Space Foundation to prepare
Google Summer of Code 2022 and keep working with Sebastian on &lt;code&gt;OrbitArray&lt;/code&gt; objects.&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>December updates</title><link href="https://www.poliastro.space/blog/2021/12/14/december-updates/" rel="alternate"></link><published>2021-12-14T00:00:00+01:00</published><updated>2021-12-14T00:00:00+01:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2021-12-14:/blog/2021/12/14/december-updates/</id><content type="html">&lt;p&gt;poliastro wishes everyone a merry new revolution around the Sun! 💫&lt;/p&gt;
&lt;p&gt;During the December break, Juan Luis wrote &lt;a href="https://docs.poliastro.space/en/latest/examples/Loading%20OMM%20and%20TLE%20satellite%20data.html"&gt;a new example on how to read OMM and TLE
data&lt;/a&gt;
that will help with a number of typical satellite observation use cases and
merged &lt;a href="https://github.com/poliastro/poliastro/pull/1434"&gt;a few refactors&lt;/a&gt;
&lt;a href="https://github.com/poliastro/poliastro/pull/1430"&gt;and cleanups&lt;/a&gt; of the source code.
We expect to make a 0.16.1 release soon to ship the documentation improvements,
and will keep cleaning up the code over the coming weeks and addressing some
long-standing issues.&lt;/p&gt;
&lt;p&gt;In addition, Sebastian will kick off &lt;a href="https://github.com/poliastro/documents/blob/master/numfocus-sdg-2021-r3.md"&gt;the project to add array types to
poliastro&lt;/a&gt;
very soon. This work will be possible thanks to the generous funding of
NumFOCUS, and will improve the performance of the library for some use cases.&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>poliastro 0.16.0 released 🚀</title><link href="https://www.poliastro.space/blog/2021/12/08/release-0.16.0/" rel="alternate"></link><published>2021-12-08T12:00:00+01:00</published><updated>2021-12-08T12:00:00+01:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2021-12-08:/blog/2021/12/08/release-0.16.0/</id><content type="html">&lt;p&gt;It fills us with astronomical joy to announce the release of poliastro 0.16.0! 🚀&lt;/p&gt;
&lt;p&gt;This release shipped numerous new APIs and performance improvements. Yash, our
Google Summer of Code 2021 student,  added a number of event detectors for
numerical propagation, and several contributors helped accelerate more parts of
the code, which should result in significant speedups for most workflows. In
addition, we have new community-contributed scripts for relative orbits and mean
elements computations.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.poliastro.space/en/v0.16.0/changelog.html#poliastro-0-16-0-2021-12-08"&gt;You can read 0.16.0 full release notes online&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We will present these changes at the
&lt;a href="https://events.libre.space/event/5/"&gt;Open Source Cubesat Workshop 2021&lt;/a&gt;, to be
held online on December 9-10.&lt;/p&gt;
&lt;p&gt;Per Python ad astra!&lt;/p&gt;</content><category term="articles"></category><category term="releases"></category><category term="oscw"></category><category term="oscw21"></category><category term="conferences"></category><category term="events"></category></entry><entry><title>November updates</title><link href="https://www.poliastro.space/blog/2021/12/01/november-updates/" rel="alternate"></link><published>2021-12-01T00:00:00+01:00</published><updated>2021-12-01T00:00:00+01:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2021-12-01:/blog/2021/12/01/november-updates/</id><summary type="html">&lt;p&gt;We have released the first beta of poliastro 0.16!
&lt;a href="https://docs.poliastro.space/en/latest/changelog.html"&gt;Highlights include&lt;/a&gt;
new events detectors written by Yash as part of GSOC 2021,
a new &lt;code&gt;.plot_maneuver&lt;/code&gt; method, and many performance improvements.
We expect to release 0.16.0 in the first days of December,
and users are encouraged to test their code with the beta.&lt;/p&gt;
&lt;p&gt;During this month we have made some small improvements to the library
and the development workflow. In particular, we have added
a continuous integration check that ensures that &lt;code&gt;poliastro.core&lt;/code&gt;
depends only on NumPy and numba. For the next release we want to
keep working on the consistency and quality of the code and do some cleanups.&lt;/p&gt;
&lt;p&gt;We discussed the possibility of adding new APIs to interface with TLE data,
which will enable a whole new range of use cases
related to commercial terrestrial satellites …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have released the first beta of poliastro 0.16!
&lt;a href="https://docs.poliastro.space/en/latest/changelog.html"&gt;Highlights include&lt;/a&gt;
new events detectors written by Yash as part of GSOC 2021,
a new &lt;code&gt;.plot_maneuver&lt;/code&gt; method, and many performance improvements.
We expect to release 0.16.0 in the first days of December,
and users are encouraged to test their code with the beta.&lt;/p&gt;
&lt;p&gt;During this month we have made some small improvements to the library
and the development workflow. In particular, we have added
a continuous integration check that ensures that &lt;code&gt;poliastro.core&lt;/code&gt;
depends only on NumPy and numba. For the next release we want to
keep working on the consistency and quality of the code and do some cleanups.&lt;/p&gt;
&lt;p&gt;We discussed the possibility of adding new APIs to interface with TLE data,
which will enable a whole new range of use cases
related to commercial terrestrial satellites.
Hopefully we will be able to present a prototype in the upcoming
&lt;a href="https://events.libre.space/event/5/"&gt;Open Source Cubesat Workshop 2021&lt;/a&gt;.&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>October updates</title><link href="https://www.poliastro.space/blog/2021/11/01/october-updates/" rel="alternate"></link><published>2021-11-01T20:00:00+01:00</published><updated>2021-11-01T20:00:00+01:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2021-11-01:/blog/2021/11/01/october-updates/</id><summary type="html">&lt;p&gt;October was a particularly intense month, with lots of exciting news!&lt;/p&gt;
&lt;p&gt;We are thrilled to announce that NumFOCUS accepted to fund
&lt;a href="https://github.com/poliastro/documents/blob/master/numfocus-sdg-2021-r3.md"&gt;our proposal to introduce array orbit types
to accelerate parallel computing workflows in poliastro&lt;/a&gt;
as part of their Small Development Grants program.
The proposal was written by Sebastian M. Ernst
and we have already started coordinating what will be the next steps.&lt;/p&gt;
&lt;p&gt;In other news, a team of researchers participating in the
&lt;a href="https://sophia.estec.esa.int/gtoc_portal/"&gt;Global Trajectory Optimization Competition&lt;/a&gt;
is using poliastro,
and they discovered a few bugs and made numerous code contributions.
Special thanks to &lt;a href="http://lopez-ibanez.eu"&gt;Manuel López Ibáñez&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Among other things, we fixed long standing bugs of
&lt;a href="https://github.com/poliastro/poliastro/issues/1362"&gt;our Izzo algorithm for the Lambert problem&lt;/a&gt;
and &lt;a href="https://github.com/poliastro/poliastro/issues/1360"&gt;our accelerated &lt;code&gt;rotation_matrix&lt;/code&gt; function&lt;/a&gt;.
We plan to release the next version of poliastro
with these and other fixes
&lt;a href="https://github.com/poliastro/poliastro/pull/1348"&gt;in the coming weeks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lately we have been …&lt;/p&gt;</summary><content type="html">&lt;p&gt;October was a particularly intense month, with lots of exciting news!&lt;/p&gt;
&lt;p&gt;We are thrilled to announce that NumFOCUS accepted to fund
&lt;a href="https://github.com/poliastro/documents/blob/master/numfocus-sdg-2021-r3.md"&gt;our proposal to introduce array orbit types
to accelerate parallel computing workflows in poliastro&lt;/a&gt;
as part of their Small Development Grants program.
The proposal was written by Sebastian M. Ernst
and we have already started coordinating what will be the next steps.&lt;/p&gt;
&lt;p&gt;In other news, a team of researchers participating in the
&lt;a href="https://sophia.estec.esa.int/gtoc_portal/"&gt;Global Trajectory Optimization Competition&lt;/a&gt;
is using poliastro,
and they discovered a few bugs and made numerous code contributions.
Special thanks to &lt;a href="http://lopez-ibanez.eu"&gt;Manuel López Ibáñez&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Among other things, we fixed long standing bugs of
&lt;a href="https://github.com/poliastro/poliastro/issues/1362"&gt;our Izzo algorithm for the Lambert problem&lt;/a&gt;
and &lt;a href="https://github.com/poliastro/poliastro/issues/1360"&gt;our accelerated &lt;code&gt;rotation_matrix&lt;/code&gt; function&lt;/a&gt;.
We plan to release the next version of poliastro
with these and other fixes
&lt;a href="https://github.com/poliastro/poliastro/pull/1348"&gt;in the coming weeks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lately we have been struggling with our numerical propagators,
because we want to squeeze more data from the integration process.
We rescued some past work
and &lt;a href="https://github.com/scipy/scipy/pull/14956"&gt;contributed a new higher-order method to SciPy&lt;/a&gt;
that we hope to finish soon.&lt;/p&gt;
&lt;p&gt;And finally, both the &lt;a href="https://events.libre.space/event/5/abstracts/"&gt;Open Source CubeSat Workshop&lt;/a&gt;
and &lt;a href="https://www.scipy.lat/conf/2021/"&gt;SciPy Latin America&lt;/a&gt;,
two very special events for us,
have been announced!
We intend to be present in both, let us know if you will be joining as well!&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>October updates</title><link href="https://www.poliastro.space/blog/2021/11/01/october-updates/" rel="alternate"></link><published>2021-11-01T20:00:00+01:00</published><updated>2021-11-01T20:00:00+01:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2021-11-01:/blog/2021/11/01/october-updates/</id><summary type="html">&lt;p&gt;October was a particularly intense month, with lots of exciting news!&lt;/p&gt;
&lt;p&gt;We are thrilled to announce that NumFOCUS accepted to fund
&lt;a href="https://github.com/poliastro/documents/blob/master/numfocus-sdg-2021-r3.md"&gt;our proposal to introduce array orbit types
to accelerate parallel computing workflows in poliastro&lt;/a&gt;
as part of their Small Development Grants program.
The proposal was written by Sebastian M. Ernst
and we have already started coordinating what will be the next steps.&lt;/p&gt;
&lt;p&gt;In other news, a team of researchers participating in the
&lt;a href="https://sophia.estec.esa.int/gtoc_portal/"&gt;Global Trajectory Optimization Competition&lt;/a&gt;
is using poliastro,
and they discovered a few bugs and made numerous code contributions.
Special thanks to &lt;a href="http://lopez-ibanez.eu"&gt;Manuel López Ibáñez&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Among other things, we fixed long standing bugs of
&lt;a href="https://github.com/poliastro/poliastro/issues/1362"&gt;our Izzo algorithm for the Lambert problem&lt;/a&gt;
and &lt;a href="https://github.com/poliastro/poliastro/issues/1360"&gt;our accelerated &lt;code&gt;rotation_matrix&lt;/code&gt; function&lt;/a&gt;.
We plan to release the next version of poliastro
with these and other fixes
&lt;a href="https://github.com/poliastro/poliastro/pull/1348"&gt;in the coming weeks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lately we have been …&lt;/p&gt;</summary><content type="html">&lt;p&gt;October was a particularly intense month, with lots of exciting news!&lt;/p&gt;
&lt;p&gt;We are thrilled to announce that NumFOCUS accepted to fund
&lt;a href="https://github.com/poliastro/documents/blob/master/numfocus-sdg-2021-r3.md"&gt;our proposal to introduce array orbit types
to accelerate parallel computing workflows in poliastro&lt;/a&gt;
as part of their Small Development Grants program.
The proposal was written by Sebastian M. Ernst
and we have already started coordinating what will be the next steps.&lt;/p&gt;
&lt;p&gt;In other news, a team of researchers participating in the
&lt;a href="https://sophia.estec.esa.int/gtoc_portal/"&gt;Global Trajectory Optimization Competition&lt;/a&gt;
is using poliastro,
and they discovered a few bugs and made numerous code contributions.
Special thanks to &lt;a href="http://lopez-ibanez.eu"&gt;Manuel López Ibáñez&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Among other things, we fixed long standing bugs of
&lt;a href="https://github.com/poliastro/poliastro/issues/1362"&gt;our Izzo algorithm for the Lambert problem&lt;/a&gt;
and &lt;a href="https://github.com/poliastro/poliastro/issues/1360"&gt;our accelerated &lt;code&gt;rotation_matrix&lt;/code&gt; function&lt;/a&gt;.
We plan to release the next version of poliastro
with these and other fixes
&lt;a href="https://github.com/poliastro/poliastro/pull/1348"&gt;in the coming weeks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lately we have been struggling with our numerical propagators,
because we want to squeeze more data from the integration process.
We rescued some past work
and &lt;a href="https://github.com/scipy/scipy/pull/14956"&gt;contributed a new higher-order method to SciPy&lt;/a&gt;
that we hope to finish soon.&lt;/p&gt;
&lt;p&gt;And finally, both the &lt;a href="https://events.libre.space/event/5/abstracts/"&gt;Open Source CubeSat Workshop&lt;/a&gt;
and &lt;a href="https://www.scipy.lat/conf/2021/"&gt;SciPy Latin America&lt;/a&gt;,
two very special events for us,
have been announced!
We intend to be present in both, let us know if you will be joining as well!&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>October updates (moved)</title><link href="https://www.poliastro.space/blog/2021/10/01/october-updates/" rel="alternate"></link><published>2021-10-01T20:00:00+02:00</published><updated>2021-10-01T20:00:00+02:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2021-10-01:/blog/2021/10/01/october-updates/</id><content type="html">&lt;p&gt;(Post moved &lt;a href="/blog/2021/11/01/october-updates/"&gt;here&lt;/a&gt;)&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>October updates (moved)</title><link href="https://www.poliastro.space/blog/2021/10/01/october-updates/" rel="alternate"></link><published>2021-10-01T20:00:00+02:00</published><updated>2021-10-01T20:00:00+02:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2021-10-01:/blog/2021/10/01/october-updates/</id><content type="html">&lt;p&gt;(Post moved &lt;a href="/blog/2021/11/01/october-updates/"&gt;here&lt;/a&gt;)&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>September updates</title><link href="https://www.poliastro.space/blog/2021/09/13/september-updates/" rel="alternate"></link><published>2021-09-13T20:00:00+02:00</published><updated>2021-09-13T20:00:00+02:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2021-09-13:/blog/2021/09/13/september-updates/</id><content type="html">&lt;p&gt;Hacktoberfest is coming! We are preparing ourselves for this celebration of open source
by appropriately tagging some open issues and reviewing our contributing documentation.
We have also discussed possible improvements for the development experience,
like &lt;a href="https://github.com/poliastro/poliastro/issues/1312"&gt;checking for dead code&lt;/a&gt;,
&lt;a href="https://github.com/poliastro/poliastro/issues/1319"&gt;dropping some unused CI checks&lt;/a&gt;
or &lt;a href="https://github.com/poliastro/poliastro/issues/1319"&gt;adding a bot that reformats the code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yash has been struggling with some corner cases
of his &lt;a href="https://github.com/poliastro/poliastro/pull/1298"&gt;attractor surface visibility&lt;/a&gt;
and &lt;a href="https://github.com/poliastro/poliastro/pull/1299"&gt;satellite visibility&lt;/a&gt;
pull requests, we hope to get them to a working state soon.&lt;/p&gt;
&lt;p&gt;Finally, we submitted &lt;a href="https://github.com/poliastro/documents/blob/master/numfocus-sdg-2021-r3.md"&gt;a proposal&lt;/a&gt;
for the NumFOCUS Small Development Grants, and we hope to see it accepted!&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>Summarizing GSoC 2021</title><link href="https://www.poliastro.space/blog/2021/08/22/conclusion-gsoc21/" rel="alternate"></link><published>2021-08-22T12:00:00+02:00</published><updated>2021-08-22T12:00:00+02:00</updated><author><name>Yash</name></author><id>tag:www.poliastro.space,2021-08-22:/blog/2021/08/22/conclusion-gsoc21/</id><summary type="html">&lt;p&gt;This page describes the work done during Google Summer of Code 2021 with &lt;a href="https://github.com/poliastro/poliastro"&gt;poliastro&lt;/a&gt;. I added some space event detectors under the &lt;code&gt;twobody&lt;/code&gt; problem by implementing raw orbital mechanics algorithms (inside &lt;code&gt;poliastro.core&lt;/code&gt;) accelerated by the &lt;code&gt;numba.jit()&lt;/code&gt; decorator (in the &lt;code&gt;nopython&lt;/code&gt; compilation mode, as was customary in &lt;code&gt;poliastro&lt;/code&gt;). It uses the &lt;code&gt;events&lt;/code&gt; parameter from &lt;code&gt;scipy.integrate.solve_ivp&lt;/code&gt; for tracking events and numerical integration. The required condition is checked at each time instance for an event occurence.&lt;/p&gt;
&lt;p&gt;The validation cases for the events were developed against the &lt;a href="https://www.orekit.org/"&gt;&lt;code&gt;orekit&lt;/code&gt;&lt;/a&gt; software, using the &lt;a href="https://gitlab.orekit.org/orekit-labs/python-wrapper"&gt;Orekit Python Wrapper&lt;/a&gt;, and some additional tests were added for investigating edge-cases. The user guide for the added events and some plotting results using &lt;code&gt;poliastro&lt;/code&gt;’s plotting capabilities, can be found &lt;a href="https://docs.poliastro.space/en/latest/examples/Detecting%20Events.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Added events (so far…)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Altitude Crossing &lt;a href="https://github.com/poliastro/poliastro/pull/1254"&gt;#1254&lt;/a&gt;.&lt;ul&gt;
&lt;li&gt;The already existing &lt;code&gt;LithobrakeEvent&lt;/code&gt; was made to inherit this event …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This page describes the work done during Google Summer of Code 2021 with &lt;a href="https://github.com/poliastro/poliastro"&gt;poliastro&lt;/a&gt;. I added some space event detectors under the &lt;code&gt;twobody&lt;/code&gt; problem by implementing raw orbital mechanics algorithms (inside &lt;code&gt;poliastro.core&lt;/code&gt;) accelerated by the &lt;code&gt;numba.jit()&lt;/code&gt; decorator (in the &lt;code&gt;nopython&lt;/code&gt; compilation mode, as was customary in &lt;code&gt;poliastro&lt;/code&gt;). It uses the &lt;code&gt;events&lt;/code&gt; parameter from &lt;code&gt;scipy.integrate.solve_ivp&lt;/code&gt; for tracking events and numerical integration. The required condition is checked at each time instance for an event occurence.&lt;/p&gt;
&lt;p&gt;The validation cases for the events were developed against the &lt;a href="https://www.orekit.org/"&gt;&lt;code&gt;orekit&lt;/code&gt;&lt;/a&gt; software, using the &lt;a href="https://gitlab.orekit.org/orekit-labs/python-wrapper"&gt;Orekit Python Wrapper&lt;/a&gt;, and some additional tests were added for investigating edge-cases. The user guide for the added events and some plotting results using &lt;code&gt;poliastro&lt;/code&gt;’s plotting capabilities, can be found &lt;a href="https://docs.poliastro.space/en/latest/examples/Detecting%20Events.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Added events (so far…)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Altitude Crossing &lt;a href="https://github.com/poliastro/poliastro/pull/1254"&gt;#1254&lt;/a&gt;.&lt;ul&gt;
&lt;li&gt;The already existing &lt;code&gt;LithobrakeEvent&lt;/code&gt; was made to inherit this event.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Latitude Crossing &lt;a href="https://github.com/poliastro/poliastro/pull/1268"&gt;#1268&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Eclipse (penumbra and umbra) Event &lt;a href="https://github.com/poliastro/poliastro/pull/1246"&gt;#1246&lt;/a&gt;.&lt;ul&gt;
&lt;li&gt;Thanks to &lt;code&gt;numba&lt;/code&gt;'s function optimization capabilities for accelerating some calculations in the developed analytical "shadow" function!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nodal Crossing &lt;a href="https://github.com/poliastro/poliastro/pull/1293"&gt;#1293&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These events could be used for orbits around any solar system body, and are not restricted to the Earth, since they do not leverage any earth-specific properties.&lt;/p&gt;
&lt;p&gt;The template structure to use the events is given below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;event_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;terminal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;event_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event_n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cowell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;attractor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;tofs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;func_twobody&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the argument &lt;code&gt;f&lt;/code&gt;, which defaults to keplerian-only forces, can be modified to include, for example, atmospheric perturbations for more rigorous orbit analyses.&lt;/p&gt;
&lt;h2&gt;Other work (bug fixes, additional patches)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We observed some general and events-related bugs, one of which was related to orbit propagation termination during event tracking:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Issue: &lt;a href="https://github.com/poliastro/poliastro/issues/1285"&gt;#1285&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PR: &lt;a href="https://github.com/poliastro/poliastro/pull/1288"&gt;#1288&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some examples of additional and/or supporting patches include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Marginal newton iteration speed enhancement for eccentric and hyperbolic anomaly calculation (https://github.com/poliastro/poliastro/pull/1247).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adding tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/1255"&gt;#1255&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/1272"&gt;#1272&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Completing work on removing some test warnings &lt;a href="https://github.com/poliastro/poliastro/pull/1235"&gt;#1235&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have also included the progress journey in the following blog posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.poliastro.space/blog/2021/06/06/poliastro-gsoc-yash/"&gt;Introduction blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.poliastro.space/blog/2021/07/19/adding-ale-event-detectors/"&gt;Second blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is left to do?&lt;/h2&gt;
&lt;p&gt;Apart from the above, implementing some events is currently work-in-progress, on which I would continue to work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line-of-sight (LOS) event &lt;a href="https://github.com/poliastro/poliastro/pull/1258"&gt;#1258&lt;/a&gt;.&lt;ul&gt;
&lt;li&gt;An edge-case, when the satellite hits the attractor (&lt;code&gt;LithobrakeEvent&lt;/code&gt;) while tracking for a LOS, is under inspection.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Satellite visibility with respect to a ground station &lt;a href="https://github.com/poliastro/poliastro/pull/1299"&gt;#1299&lt;/a&gt;.&lt;ul&gt;
&lt;li&gt;Slight event time mismatches with the corresponding &lt;code&gt;orekit&lt;/code&gt;'s &lt;code&gt;ElevationDetector&lt;/code&gt; are being investigated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Satellite view event &lt;a href="https://github.com/poliastro/poliastro/pull/1298"&gt;#1298&lt;/a&gt;.&lt;ul&gt;
&lt;li&gt;The addition of a reliable test example to check the added implementation is pending.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Satellite-satellite collision detection.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;I am very grateful to and sincerely thank my mentors, Juan Luis Cano Rodríguez and Jorge Martínez, for critically reviewing pull requests, assisting in making event API decisions, and for help in implementing the event validation cases.&lt;/p&gt;</content><category term="GSOC"></category><category term="GSOC"></category><category term="GSOC21"></category><category term="poliastro"></category></entry><entry><title>August updates</title><link href="https://www.poliastro.space/blog/2021/08/17/august-updates/" rel="alternate"></link><published>2021-08-17T12:00:00+02:00</published><updated>2021-08-17T12:00:00+02:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2021-08-17:/blog/2021/08/17/august-updates/</id><content type="html">&lt;p&gt;This month Yash has been wrapping up his Google of Summer of Code work
by adding &lt;a href="https://github.com/poliastro/poliastro/pull/1246"&gt;eclipse event detection&lt;/a&gt;,
&lt;a href="https://github.com/poliastro/poliastro/pull/1293"&gt;node crossing event detection&lt;/a&gt;,
and &lt;a href="https://github.com/poliastro/poliastro/pull/1288"&gt;fixing the propagation logic for non-terminal events&lt;/a&gt;.
Besides, Yash is also writing &lt;a href="https://github.com/poliastro/poliastro/pull/1304"&gt;a new how-to guide for the event detection&lt;/a&gt;
that we hope to get merged soon.
Jorge has been thoroughly reviewing all that work
and &lt;a href="https://github.com/poliastro/poliastro/pull/1288"&gt;adding validation cases&lt;/a&gt; when appropriate.&lt;/p&gt;
&lt;p&gt;Libre Space Foundation &lt;a href="https://libre.space/2021/08/12/gsoc-project-expanding-events-detection-poliastro/"&gt;published a summary of Yash work&lt;/a&gt;,
you can read it on their blog.&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>Adding the Altitude, Latitude, and Eclipse event detectors</title><link href="https://www.poliastro.space/blog/2021/07/19/adding-ale-event-detectors/" rel="alternate"></link><published>2021-07-19T12:00:00+02:00</published><updated>2021-07-19T12:00:00+02:00</updated><author><name>Yash</name></author><id>tag:www.poliastro.space,2021-07-19:/blog/2021/07/19/adding-ale-event-detectors/</id><summary type="html">&lt;p&gt;It was an engaging first half of GSoC, and it was during this duration, I understood some critical details of executing the event detectors. We started to look into the eclipse detector since we thought it might be challenging to get it right.&lt;/p&gt;
&lt;p&gt;In the weekly community calls, we brainstormed over an appropriate method that would fit in poliastro. Thanks to SciPy’s events support through &lt;code&gt;solve_ivp&lt;/code&gt;, we just had to come up with a time-varying and continuous “shadow” function without having to solve analytical equations manually. However, the critical challenge for us was to come up with such an equation! After a few trials of geometric manipulations and Jorge and Juanlu’s assistance, we came across an equation involving classical orbital elements that could serve our purpose. We were still questioning the performance and complexity of the method since …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It was an engaging first half of GSoC, and it was during this duration, I understood some critical details of executing the event detectors. We started to look into the eclipse detector since we thought it might be challenging to get it right.&lt;/p&gt;
&lt;p&gt;In the weekly community calls, we brainstormed over an appropriate method that would fit in poliastro. Thanks to SciPy’s events support through &lt;code&gt;solve_ivp&lt;/code&gt;, we just had to come up with a time-varying and continuous “shadow” function without having to solve analytical equations manually. However, the critical challenge for us was to come up with such an equation! After a few trials of geometric manipulations and Jorge and Juanlu’s assistance, we came across an equation involving classical orbital elements that could serve our purpose. We were still questioning the performance and complexity of the method since by enacting it, we could lose the accuracy of entry and exit times of the event. In any case, the other approaches didn’t seem to work just yet, so we decided to go with this approach since it looked feasible. However, we figured out that the whole implementation could be jitted, thus considerably mitigating the issue.&lt;/p&gt;
&lt;p&gt;While working on the eclipse event, we worked on the altitude and latitude crossing detectors. Realizing the base structure of all the events would be the same, and the already existing &lt;code&gt;Lithobrake&lt;/code&gt; event would be a particular case of the &lt;code&gt;AltitudeCrossEvent&lt;/code&gt;, we refactored the &lt;code&gt;events&lt;/code&gt; module by removing boilerplate code to prevent redundancy. The logic of &lt;code&gt;LatitudeCrossEvent&lt;/code&gt; could get substantially shorter due to the &lt;code&gt;cartesian_to_ellipsoidal&lt;/code&gt; method, which allowed us to convert the cartesian coordinates of an orbit to its corresponding latitude on the attractor. Since we felt more intricacies in the longitude detector, we are taking some time to think about an appropriate method to solve it. All the events are supposed to work for any attractor, thus aligning with one of the poliastro’s aims of having capabilities not restricted to the Earth.&lt;/p&gt;
&lt;p&gt;Leveraging some in-built functionalities of &lt;code&gt;solve_ivp&lt;/code&gt;, users could stop integration if an event is detected or control the direction of triggering the event. Fortunately, Jorge simultaneously developed validation cases to check against the Orekit software, by which we became confident of the implementation.&lt;/p&gt;
&lt;p&gt;Additionally, adding some tests, fixing some minor bugs, and making a few improvements in computation was insightful. There are more event detectors yet to come, so looking forward to it!&lt;/p&gt;</content><category term="GSOC"></category><category term="GSOC"></category><category term="GSOC21"></category><category term="poliastro"></category></entry><entry><title>July updates</title><link href="https://www.poliastro.space/blog/2021/07/18/july-updates/" rel="alternate"></link><published>2021-07-18T17:00:00+02:00</published><updated>2021-07-18T17:00:00+02:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2021-07-18:/blog/2021/07/18/july-updates/</id><summary type="html">&lt;p&gt;This month &lt;a href="https://github.com/poliastro/poliastro/"&gt;the poliastro repository&lt;/a&gt;
has crossed ⭐️ 500 GitHub stars ⭐️, thanks everyone for believing in the
project!&lt;/p&gt;
&lt;p&gt;Juan Luis &lt;a href="https://docs.poliastro.space/en/v0.15.2/changelog.html"&gt;released version
0.15.2&lt;/a&gt; with &lt;a href="https://github.com/poliastro/poliastro/pull/1228"&gt;a fix for
newer astroquery versions&lt;/a&gt;,
as well as compatibility with Plotly 5.0, which allows users to install all the
required JupyterLab extensions without Node.js. This will make the installation
process much easier!&lt;/p&gt;
&lt;p&gt;Yash and Jorge had a very productive month: after a lot of discussion in our
weekly community calls and several rounds of code reviews, &lt;a href="https://github.com/poliastro/poliastro/pull/1246"&gt;we finally have
eclipse event detection
merged!&lt;/a&gt;
Yash has passed the first Google Summer of Code evaluation with
flying colors and will publish an entry in our blog soon. The work Jorge did
&lt;a href="https://github.com/poliastro/validation/pull/33"&gt;on our validation
infrastructure&lt;/a&gt; as part of the
NumFOCUS Small Development Grant has proven to be extremely useful.
In addition, Yash has also …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This month &lt;a href="https://github.com/poliastro/poliastro/"&gt;the poliastro repository&lt;/a&gt;
has crossed ⭐️ 500 GitHub stars ⭐️, thanks everyone for believing in the
project!&lt;/p&gt;
&lt;p&gt;Juan Luis &lt;a href="https://docs.poliastro.space/en/v0.15.2/changelog.html"&gt;released version
0.15.2&lt;/a&gt; with &lt;a href="https://github.com/poliastro/poliastro/pull/1228"&gt;a fix for
newer astroquery versions&lt;/a&gt;,
as well as compatibility with Plotly 5.0, which allows users to install all the
required JupyterLab extensions without Node.js. This will make the installation
process much easier!&lt;/p&gt;
&lt;p&gt;Yash and Jorge had a very productive month: after a lot of discussion in our
weekly community calls and several rounds of code reviews, &lt;a href="https://github.com/poliastro/poliastro/pull/1246"&gt;we finally have
eclipse event detection
merged!&lt;/a&gt;
Yash has passed the first Google Summer of Code evaluation with
flying colors and will publish an entry in our blog soon. The work Jorge did
&lt;a href="https://github.com/poliastro/validation/pull/33"&gt;on our validation
infrastructure&lt;/a&gt; as part of the
NumFOCUS Small Development Grant has proven to be extremely useful.
In addition, Yash has also added &lt;a href="https://github.com/poliastro/poliastro/pull/1268"&gt;latitude crossing
detection&lt;/a&gt;,
&lt;a href="https://github.com/poliastro/poliastro/pull/1280"&gt;accelerated some Earth atmosphere
calculations&lt;/a&gt;, and done some
other minor improvements, while Jorge has added &lt;a href="https://github.com/poliastro/validation/pull/31"&gt;some developer documentation
on how we handle Orekit&lt;/a&gt; in our
validation infrastructure, done a lot of reviews for Yash, and &lt;a href="https://github.com/poliastro/validation/pull/32"&gt;validated our
latitude crossing detection&lt;/a&gt;
against Orekit.&lt;/p&gt;
&lt;p&gt;Finally, Javier Tegedor &lt;a href="https://github.com/poliastro/poliastro/pull/1250"&gt;accelerated some thrust
functions&lt;/a&gt;, making the slowest
tests 40 % faster!&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>GSoC 2021, the journey begins!</title><link href="https://www.poliastro.space/blog/2021/06/06/poliastro-gsoc-yash/" rel="alternate"></link><published>2021-06-06T11:00:00+02:00</published><updated>2021-06-06T11:00:00+02:00</updated><author><name>Yash</name></author><id>tag:www.poliastro.space,2021-06-06:/blog/2021/06/06/poliastro-gsoc-yash/</id><summary type="html">&lt;h1&gt;The initial days…&lt;/h1&gt;
&lt;p&gt;Hi there! I am Yash, and I will be spending this summer with poliastro as part of GSoC 2021 to add some event detection capabilities. It was around December when I first learned about poliastro, and it gradually got me fascinated by orbital mechanics.&lt;/p&gt;
&lt;p&gt;While preparing to make my first pull request, poliastro's comprehensive documentation and tutorials came to the rescue! It was much needed for a beginner like me who had just stepped into the field of Astrodynamics. This was a period when I thoroughly enjoyed interacting with the community and learning orbital mechanics while simultaneously learning the best practices in software development.&lt;/p&gt;
&lt;h1&gt;Building up ideas and our aspirations for this summer!&lt;/h1&gt;
&lt;p&gt;After deciding to submit a proposal for the event detection project, I started brainstorming and looking for several references keeping in mind their relevance …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The initial days…&lt;/h1&gt;
&lt;p&gt;Hi there! I am Yash, and I will be spending this summer with poliastro as part of GSoC 2021 to add some event detection capabilities. It was around December when I first learned about poliastro, and it gradually got me fascinated by orbital mechanics.&lt;/p&gt;
&lt;p&gt;While preparing to make my first pull request, poliastro's comprehensive documentation and tutorials came to the rescue! It was much needed for a beginner like me who had just stepped into the field of Astrodynamics. This was a period when I thoroughly enjoyed interacting with the community and learning orbital mechanics while simultaneously learning the best practices in software development.&lt;/p&gt;
&lt;h1&gt;Building up ideas and our aspirations for this summer!&lt;/h1&gt;
&lt;p&gt;After deciding to submit a proposal for the event detection project, I started brainstorming and looking for several references keeping in mind their relevance in poliastro. During this period, JuanLu and Jorge's suggestions proved invaluable. As a result, I came up with nine event detectors that I thought would be a good addition.&lt;/p&gt;
&lt;p&gt;There were so many things for me to explore in this field! One such topic that intrigued me and kept me tinkering with the code for several weeks was the streamlined execution of algorithms. The project that we'd be working on would require implementing several algorithms from literature, and I am super excited to be working on it! We believe these event detectors would provide users with beneficial information of scientific interest and pave the way for formulating effective space strategies and orbital design and maintenance policies.&lt;/p&gt;
&lt;p&gt;Apart from this, several discussions are going on in the community meetings regarding solving some critical issues, working on enhancements in the library, and implementing some exciting ideas to incorporate in poliastro. I also hope to contribute to it along the way…&lt;/p&gt;
&lt;p&gt;Needless to say, this is a place where I would get to interact with an engaging community and learn several things. I'm looking forward to a thrilling summer ahead, and I can't wait to start coding!&lt;/p&gt;</content><category term="GSOC"></category><category term="GSOC"></category><category term="GSOC21"></category><category term="poliastro"></category></entry><entry><title>April updates</title><link href="https://www.poliastro.space/blog/2021/05/08/april-updates/" rel="alternate"></link><published>2021-05-08T21:00:00+02:00</published><updated>2021-05-08T21:00:00+02:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2021-05-08:/blog/2021/05/08/april-updates/</id><summary type="html">&lt;p&gt;The first (and hopefully) only &lt;strong&gt;beta of poliastro 0.15&lt;/strong&gt; is out! 🎉
It took us a bit longer to get this release out,
but we are happy that poliastro 0.15 is now around the corner.
We will soon write detailed release notes and a proper announcement for it,
and in the meanwhile you can read &lt;a href="https://docs.poliastro.space/en/latest/changelog.html"&gt;the preliminary poliastro 0.15 changelog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Juan Luis revamped our website a bit,
by &lt;a href="https://github.com/poliastro/poliastro.github.io/issues/2"&gt;adjusting our domain names&lt;/a&gt;
and &lt;a href="https://github.com/poliastro/poliastro.github.io/pull/74"&gt;improving the navigation bar&lt;/a&gt;
(&lt;a href="https://github.com/poliastro/poliastro.github.io/pull/77"&gt;twice&lt;/a&gt;).
Besides, he has finished the reorganization of our docs
following &lt;a href="https://diataxis.fr/"&gt;the Diátaxis Framework by Daniele Procida&lt;/a&gt;,
&lt;a href="https://github.com/poliastro/poliastro/pull/1188"&gt;prepared for the upcoming Sphinx 4.0 release&lt;/a&gt;,
and &lt;a href="https://github.com/poliastro/poliastro/pull/1206/"&gt;updated our installation and contribution instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Jorge has finished &lt;a href="https://github.com/poliastro/validation/pull/24"&gt;validating our planetary transformations against GMAT and Orekit&lt;/a&gt;,
which required reaching out to the Orekit developers
and &lt;a href="https://github.com/poliastro/poliastro/pull/1193"&gt;adjusting one outdated constant in poliastro&lt;/a&gt;.
This wraps up …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The first (and hopefully) only &lt;strong&gt;beta of poliastro 0.15&lt;/strong&gt; is out! 🎉
It took us a bit longer to get this release out,
but we are happy that poliastro 0.15 is now around the corner.
We will soon write detailed release notes and a proper announcement for it,
and in the meanwhile you can read &lt;a href="https://docs.poliastro.space/en/latest/changelog.html"&gt;the preliminary poliastro 0.15 changelog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Juan Luis revamped our website a bit,
by &lt;a href="https://github.com/poliastro/poliastro.github.io/issues/2"&gt;adjusting our domain names&lt;/a&gt;
and &lt;a href="https://github.com/poliastro/poliastro.github.io/pull/74"&gt;improving the navigation bar&lt;/a&gt;
(&lt;a href="https://github.com/poliastro/poliastro.github.io/pull/77"&gt;twice&lt;/a&gt;).
Besides, he has finished the reorganization of our docs
following &lt;a href="https://diataxis.fr/"&gt;the Diátaxis Framework by Daniele Procida&lt;/a&gt;,
&lt;a href="https://github.com/poliastro/poliastro/pull/1188"&gt;prepared for the upcoming Sphinx 4.0 release&lt;/a&gt;,
and &lt;a href="https://github.com/poliastro/poliastro/pull/1206/"&gt;updated our installation and contribution instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Jorge has finished &lt;a href="https://github.com/poliastro/validation/pull/24"&gt;validating our planetary transformations against GMAT and Orekit&lt;/a&gt;,
which required reaching out to the Orekit developers
and &lt;a href="https://github.com/poliastro/poliastro/pull/1193"&gt;adjusting one outdated constant in poliastro&lt;/a&gt;.
This wraps up the work we started with our first &lt;a href="https://numfocus.org/programs/small-development-grants"&gt;NumFOCUS Small Development Grant&lt;/a&gt;,
and we will be also sending a report and an announcement very soon!&lt;/p&gt;
&lt;p&gt;Finally, Dhruv and Abdul have made some small fixes and cleanups,
and Yash has started moving many parts of poliastro computation to our core API
to make them faster,
like our &lt;a href="https://github.com/poliastro/poliastro/pull/1136"&gt;maneuver computations&lt;/a&gt;
and our &lt;a href="https://github.com/poliastro/poliastro/pull/1136"&gt;spheroid arithmetic&lt;/a&gt;.
We have more pull requests like this in the pipeline,
which we will start reviewing soon
now that the &lt;code&gt;0.15.x&lt;/code&gt; branch has been created.&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>April updates</title><link href="https://www.poliastro.space/blog/2021/05/08/april-updates/" rel="alternate"></link><published>2021-05-08T21:00:00+02:00</published><updated>2021-05-08T21:00:00+02:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2021-05-08:/blog/2021/05/08/april-updates/</id><summary type="html">&lt;p&gt;The first (and hopefully) only &lt;strong&gt;beta of poliastro 0.15&lt;/strong&gt; is out! 🎉
It took us a bit longer to get this release out,
but we are happy that poliastro 0.15 is now around the corner.
We will soon write detailed release notes and a proper announcement for it,
and in the meanwhile you can read &lt;a href="https://docs.poliastro.space/en/latest/changelog.html"&gt;the preliminary poliastro 0.15 changelog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Juan Luis revamped our website a bit,
by &lt;a href="https://github.com/poliastro/poliastro.github.io/issues/2"&gt;adjusting our domain names&lt;/a&gt;
and &lt;a href="https://github.com/poliastro/poliastro.github.io/pull/74"&gt;improving the navigation bar&lt;/a&gt;
(&lt;a href="https://github.com/poliastro/poliastro.github.io/pull/77"&gt;twice&lt;/a&gt;).
Besides, he has finished the reorganization of our docs
following &lt;a href="https://diataxis.fr/"&gt;the Diátaxis Framework by Daniele Procida&lt;/a&gt;,
&lt;a href="https://github.com/poliastro/poliastro/pull/1188"&gt;prepared for the upcoming Sphinx 4.0 release&lt;/a&gt;,
and &lt;a href="https://github.com/poliastro/poliastro/pull/1206/"&gt;updated our installation and contribution instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Jorge has finished &lt;a href="https://github.com/poliastro/validation/pull/24"&gt;validating our planetary transformations against GMAT and Orekit&lt;/a&gt;,
which required reaching out to the Orekit developers
and &lt;a href="https://github.com/poliastro/poliastro/pull/1193"&gt;adjusting one outdated constant in poliastro&lt;/a&gt;.
This wraps up …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The first (and hopefully) only &lt;strong&gt;beta of poliastro 0.15&lt;/strong&gt; is out! 🎉
It took us a bit longer to get this release out,
but we are happy that poliastro 0.15 is now around the corner.
We will soon write detailed release notes and a proper announcement for it,
and in the meanwhile you can read &lt;a href="https://docs.poliastro.space/en/latest/changelog.html"&gt;the preliminary poliastro 0.15 changelog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Juan Luis revamped our website a bit,
by &lt;a href="https://github.com/poliastro/poliastro.github.io/issues/2"&gt;adjusting our domain names&lt;/a&gt;
and &lt;a href="https://github.com/poliastro/poliastro.github.io/pull/74"&gt;improving the navigation bar&lt;/a&gt;
(&lt;a href="https://github.com/poliastro/poliastro.github.io/pull/77"&gt;twice&lt;/a&gt;).
Besides, he has finished the reorganization of our docs
following &lt;a href="https://diataxis.fr/"&gt;the Diátaxis Framework by Daniele Procida&lt;/a&gt;,
&lt;a href="https://github.com/poliastro/poliastro/pull/1188"&gt;prepared for the upcoming Sphinx 4.0 release&lt;/a&gt;,
and &lt;a href="https://github.com/poliastro/poliastro/pull/1206/"&gt;updated our installation and contribution instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Jorge has finished &lt;a href="https://github.com/poliastro/validation/pull/24"&gt;validating our planetary transformations against GMAT and Orekit&lt;/a&gt;,
which required reaching out to the Orekit developers
and &lt;a href="https://github.com/poliastro/poliastro/pull/1193"&gt;adjusting one outdated constant in poliastro&lt;/a&gt;.
This wraps up the work we started with our first &lt;a href="https://numfocus.org/programs/small-development-grants"&gt;NumFOCUS Small Development Grant&lt;/a&gt;,
and we will be also sending a report and an announcement very soon!&lt;/p&gt;
&lt;p&gt;Finally, Dhruv and Abdul have made some small fixes and cleanups,
and Yash has started moving many parts of poliastro computation to our core API
to make them faster,
like our &lt;a href="https://github.com/poliastro/poliastro/pull/1136"&gt;maneuver computations&lt;/a&gt;
and our &lt;a href="https://github.com/poliastro/poliastro/pull/1136"&gt;spheroid arithmetic&lt;/a&gt;.
We have more pull requests like this in the pipeline,
which we will start reviewing soon
now that the &lt;code&gt;0.15.x&lt;/code&gt; branch has been created.&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>February updates</title><link href="https://www.poliastro.space/blog/2021/02/24/2021-02-24-February-updates/" rel="alternate"></link><published>2021-02-24T21:00:00+01:00</published><updated>2021-02-24T21:00:00+01:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2021-02-24:/blog/2021/02/24/2021-02-24-February-updates/</id><content type="html">&lt;p&gt;poliastro &lt;a href="https://github.com/poliastro/poliastro/pull/1027"&gt;finally landed support for Python 3.9&lt;/a&gt;,
thanks to the fine folks of numba! &lt;a href="https://numba.discourse.group/t/numba-0-53-0-and-llvmlite-0-36-0-release-candidates/504?u=astrojuanlu"&gt;Their release candidate already works with the newest Python
release&lt;/a&gt;,
and we've been told that &lt;a href="https://twitter.com/numba_jit/status/1363868866984751107"&gt;the stable release is around the
corner&lt;/a&gt;. This means that the next stable
release of poliastro will also support it 🚀&lt;/p&gt;
&lt;p&gt;On the validation side, Jorge has been working on more enhancements, and we have finally confirmed
that our 3D impulsive maneuvers give the same result as GMAT and Orekit! You can read the full
details &lt;a href="https://blog.poliastro.space/blog/2021/02/17/2021-02-17-validation-of-3dmaneuvers/"&gt;in this blog
post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And finally, we have made some small improvements on the development side, by &lt;a href="https://twitter.com/numba_jit/status/1363868866984751107"&gt;fixing some
continuous integration small failures&lt;/a&gt;,
&lt;a href="https://github.com/poliastro/poliastro/pull/1092"&gt;reducing the number of warnings in our tests&lt;/a&gt;,
and &lt;a href="https://github.com/poliastro/poliastro/pull/1094"&gt;other small fixes&lt;/a&gt;. Thanks Yash, Dhruv, zkl2,
and Souhit!&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>Impulsive 3D maneuvers have been validated!</title><link href="https://www.poliastro.space/blog/2021/02/17/2021-02-17-validation-of-3dmaneuvers/" rel="alternate"></link><published>2021-02-17T09:30:00+01:00</published><updated>2021-02-17T09:30:00+01:00</updated><author><name>Jorge Martínez Garrido</name></author><id>tag:www.poliastro.space,2021-02-17:/blog/2021/02/17/2021-02-17-validation-of-3dmaneuvers/</id><summary type="html">&lt;p&gt;As part of the NumFOCUS small development grants, the
&lt;a href="https://github.com/poliastro/validation"&gt;poliastro/validation&lt;/a&gt; repository has
increased its activity in order to reach its main goal: validate poliastro's
most complex features against similar software.&lt;/p&gt;
&lt;p&gt;One of those features are impulsive maneuvers (Hohmann and Bi-elliptic) when
applied to non-equatorial orbits. The absence of numerical results in literature
and similar sources, made impossible to test associated pieces of code to
impulsive maneuvers for orbits with inclination and spacecraft not placed in
periapsis. However, this situation has changed, as they are now validated
against Orekit and GMAT.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bi-elliptic transfer in GMAT" src="https://www.poliastro.space/images/poliastro_bielliptic.png"&gt;
&lt;img alt="Bi-elliptic transfer in GMAT" src="https://www.poliastro.space/images/gmat_bielliptic.png"&gt;&lt;/p&gt;
&lt;p&gt;You can see corresponding pull-request for &lt;a href="https://github.com/poliastro/validation/pull/18"&gt;Hohmann
validation&lt;/a&gt; and &lt;a href="https://github.com/poliastro/validation/pull/20"&gt;Bi-elliptic
validation&lt;/a&gt;. Not only that, a
continuous integration tool has been setup. This ensures that if any bug is
introduced within main poliastro source code, we can detect it and fix it
without any problem.&lt;/p&gt;
&lt;p&gt;One interesting thing is that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As part of the NumFOCUS small development grants, the
&lt;a href="https://github.com/poliastro/validation"&gt;poliastro/validation&lt;/a&gt; repository has
increased its activity in order to reach its main goal: validate poliastro's
most complex features against similar software.&lt;/p&gt;
&lt;p&gt;One of those features are impulsive maneuvers (Hohmann and Bi-elliptic) when
applied to non-equatorial orbits. The absence of numerical results in literature
and similar sources, made impossible to test associated pieces of code to
impulsive maneuvers for orbits with inclination and spacecraft not placed in
periapsis. However, this situation has changed, as they are now validated
against Orekit and GMAT.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bi-elliptic transfer in GMAT" src="https://www.poliastro.space/images/poliastro_bielliptic.png"&gt;
&lt;img alt="Bi-elliptic transfer in GMAT" src="https://www.poliastro.space/images/gmat_bielliptic.png"&gt;&lt;/p&gt;
&lt;p&gt;You can see corresponding pull-request for &lt;a href="https://github.com/poliastro/validation/pull/18"&gt;Hohmann
validation&lt;/a&gt; and &lt;a href="https://github.com/poliastro/validation/pull/20"&gt;Bi-elliptic
validation&lt;/a&gt;. Not only that, a
continuous integration tool has been setup. This ensures that if any bug is
introduced within main poliastro source code, we can detect it and fix it
without any problem.&lt;/p&gt;
&lt;p&gt;One interesting thing is that code making use of poliastro API is shorter than
that one based in Orekit or GMAT. This is important from the point of view of
readable code and simplicity. However, let us not forget that both Orekit and
GMAT provide amazing capabilities, so this might be a reason behind more lines
of code when using their APIs.&lt;/p&gt;
&lt;p&gt;In addition to previous implementations, having a look at other similar software
has given us some ideas about future features of poliastro. For example, we
thought about the possibility of expanding our events detectors in order to
locate in time special situations such us when spacecraft will be under umbra
(eclipse) or when it will be visible over the horizon for a particular
topocentric location.&lt;/p&gt;
&lt;p&gt;The idea is now to keep validating more code, in this case the one associated
with planetary reference frames and their conversions between them. This is a
major topic within the actual state of poliastro, as it is not easy at all to
check if conversions are properly performed.&lt;/p&gt;
&lt;p&gt;Stay tuned for more about the validation work we are carrying out!&lt;/p&gt;</content><category term="NumFOCUS grants"></category><category term="NumFOCUS"></category><category term="maneuvers"></category><category term="orekit"></category><category term="GMAT"></category></entry><entry><title>January updates</title><link href="https://www.poliastro.space/blog/2021/01/24/2021-01-24-January-updates/" rel="alternate"></link><published>2021-01-24T12:00:00+01:00</published><updated>2021-01-24T12:00:00+01:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2021-01-24:/blog/2021/01/24/2021-01-24-January-updates/</id><summary type="html">&lt;p&gt;We got awarded a Small Development Grant by NumFOCUS to &lt;a href="https://github.com/poliastro/numfocus_proposal/"&gt;validate poliastro against commercial and
non-commercial similar applications&lt;/a&gt;! 🎉 Jorge
started by setting GitHub Actions to &lt;a href="https://github.com/poliastro/poliastro/pull/1051/"&gt;trigger the validations
automatically&lt;/a&gt;, &lt;a href="https://github.com/poliastro/validation/pull/4"&gt;validating our conversion
between cartesian and Keplerian elements against
Orekit&lt;/a&gt;, and is now &lt;a href="https://github.com/poliastro/validation/pull/15"&gt;fighting some discrepancies
with Hohmann transfers&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;On the development front, while we wait for Numba to release Python 3.9-compatible wheels for our
next release, &lt;a href="https://github.com/poliastro/poliastro/pull/1053"&gt;we refactored our Cowell
propagator&lt;/a&gt; to make the code simpler and more
numba-friendly, we tried to merge &lt;a href="https://github.com/poliastro/poliastro/pull/719"&gt;Eleftheria's implementation of the Escobal method for satellite
visibility&lt;/a&gt; (and &lt;a href="https://space.stackexchange.com/q/49136/10716"&gt;sadly got blocked in the
process&lt;/a&gt;), and kept working on &lt;a href="https://gist.github.com/astrojuanlu/c44e57a8f4e001d5cbc6d6e53ecb66e0"&gt;our analysis of
Walker constellations&lt;/a&gt; for
&lt;a href="https://opensatcom.org/"&gt;the OpenSatCom activity&lt;/a&gt;. We also engaged with the authors of &lt;a href="https://github.com/hgrecco/numbakit-ode/"&gt;the
awesome numbakit-ode&lt;/a&gt; to &lt;a href="https://github.com/poliastro/poliastro/pull/1049"&gt;rewrite our Cowell method using
numba&lt;/a&gt;, but found some issues along the way and
we decided …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We got awarded a Small Development Grant by NumFOCUS to &lt;a href="https://github.com/poliastro/numfocus_proposal/"&gt;validate poliastro against commercial and
non-commercial similar applications&lt;/a&gt;! 🎉 Jorge
started by setting GitHub Actions to &lt;a href="https://github.com/poliastro/poliastro/pull/1051/"&gt;trigger the validations
automatically&lt;/a&gt;, &lt;a href="https://github.com/poliastro/validation/pull/4"&gt;validating our conversion
between cartesian and Keplerian elements against
Orekit&lt;/a&gt;, and is now &lt;a href="https://github.com/poliastro/validation/pull/15"&gt;fighting some discrepancies
with Hohmann transfers&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;On the development front, while we wait for Numba to release Python 3.9-compatible wheels for our
next release, &lt;a href="https://github.com/poliastro/poliastro/pull/1053"&gt;we refactored our Cowell
propagator&lt;/a&gt; to make the code simpler and more
numba-friendly, we tried to merge &lt;a href="https://github.com/poliastro/poliastro/pull/719"&gt;Eleftheria's implementation of the Escobal method for satellite
visibility&lt;/a&gt; (and &lt;a href="https://space.stackexchange.com/q/49136/10716"&gt;sadly got blocked in the
process&lt;/a&gt;), and kept working on &lt;a href="https://gist.github.com/astrojuanlu/c44e57a8f4e001d5cbc6d6e53ecb66e0"&gt;our analysis of
Walker constellations&lt;/a&gt; for
&lt;a href="https://opensatcom.org/"&gt;the OpenSatCom activity&lt;/a&gt;. We also engaged with the authors of &lt;a href="https://github.com/hgrecco/numbakit-ode/"&gt;the
awesome numbakit-ode&lt;/a&gt; to &lt;a href="https://github.com/poliastro/poliastro/pull/1049"&gt;rewrite our Cowell method using
numba&lt;/a&gt;, but found some issues along the way and
we decided to charge batteries and try again after some time.  &lt;/p&gt;
&lt;p&gt;And finally, we made a &lt;em&gt;lot&lt;/em&gt; of documentation changes! Dhruv sent a series of PRs to amend some
small issues, but most importantly he &lt;a href="https://github.com/poliastro/poliastro/pull/1073"&gt;rewrote all the docs using
MyST&lt;/a&gt;, a Markdown dialect compatible with Sphinx
that is getting popular. We also &lt;a href="https://github.com/poliastro/poliastro/pull/1087"&gt;removed the need to install LaTeX to compile our
docs&lt;/a&gt;, and &lt;a href="https://github.com/poliastro/poliastro/pull/1082"&gt;fixed some long standing problems
with our Binder examples&lt;/a&gt;.&lt;/p&gt;</content><category term="articles"></category><category term="NumFOCUS"></category><category term="Updates"></category></entry><entry><title>This is an end of an era</title><link href="https://www.poliastro.space/blog/2020/08/31/2020-08-31-This-is-an-end-of-an-era/" rel="alternate"></link><published>2020-08-31T11:00:00+02:00</published><updated>2020-08-31T11:00:00+02:00</updated><author><name>Meuge</name></author><id>tag:www.poliastro.space,2020-08-31:/blog/2020/08/31/2020-08-31-This-is-an-end-of-an-era/</id><summary type="html">&lt;p&gt;Contributing to Poliastro has been an incredible experience for me. Since it was the first time, I've participated in GSOC. And the first time I've ever approached to package dedicated to problems arising in Astrodynamics and Orbital Mechanics. Being part of Poliastro was an exciting challenge that I had to surmount and also an unbelievable opportunity to learn about Space, Math and Physics.&lt;/p&gt;
&lt;p&gt;&lt;img alt="era" src="https://media.giphy.com/media/Vekuh5ATS6oXPVsij7/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;With the thorough knowledge learned, and the feedback from JuanLu and Jorge, I was able to overcome every challenge in my Poliastro's journey. As I had said when I had the opportunity, I am grateful to both of my mentors who accepted me to be part of this exceptional community.  :)&lt;/p&gt;
&lt;p&gt;&lt;img alt="wall-e" src="https://media.giphy.com/media/2uFLqNEmuOW08/giphy.gif"&gt;&lt;/p&gt;
&lt;h1&gt;Git-log&lt;/h1&gt;
&lt;p&gt;What we have achieved in the past three months:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pulls?q=is%3Apr+author%3A%40me+is%3Aclosed"&gt;#965 Stationary and Synchronous Orbit Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/969"&gt;# 969 Fix for the flaky Horizon Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pulls?q=is%3Apr+author%3A%40me+is%3Aclosed"&gt;#970 Earth Satellite Implementation …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Contributing to Poliastro has been an incredible experience for me. Since it was the first time, I've participated in GSOC. And the first time I've ever approached to package dedicated to problems arising in Astrodynamics and Orbital Mechanics. Being part of Poliastro was an exciting challenge that I had to surmount and also an unbelievable opportunity to learn about Space, Math and Physics.&lt;/p&gt;
&lt;p&gt;&lt;img alt="era" src="https://media.giphy.com/media/Vekuh5ATS6oXPVsij7/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;With the thorough knowledge learned, and the feedback from JuanLu and Jorge, I was able to overcome every challenge in my Poliastro's journey. As I had said when I had the opportunity, I am grateful to both of my mentors who accepted me to be part of this exceptional community.  :)&lt;/p&gt;
&lt;p&gt;&lt;img alt="wall-e" src="https://media.giphy.com/media/2uFLqNEmuOW08/giphy.gif"&gt;&lt;/p&gt;
&lt;h1&gt;Git-log&lt;/h1&gt;
&lt;p&gt;What we have achieved in the past three months:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pulls?q=is%3Apr+author%3A%40me+is%3Aclosed"&gt;#965 Stationary and Synchronous Orbit Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/969"&gt;# 969 Fix for the flaky Horizon Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pulls?q=is%3Apr+author%3A%40me+is%3Aclosed"&gt;#970 Earth Satellite Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/979"&gt;#979 Spacecraft Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/987"&gt;#987 Pericenter maneuver implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/998"&gt;#998 Field of View Implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Open PRs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/984"&gt;#984 Repeat Ground Track Orbit Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/1002"&gt;#1002 Daily repeat groundtrack Mars orbit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Ongoing challenge&lt;/h1&gt;
&lt;p&gt;And we will be continuing working together on the &lt;a href="https://www.researchgate.net/publication/334130047_Coverage_Area_Determination_for_Conical_Fields_of_View_Considering_an_Oblate_Earth"&gt;paper&lt;/a&gt;, named " Coverage Area Determination for Conical Fields of View Considering an Oblate Earth." Sounds great, right? The paper is from Politecnico di Milano, the Italian university where JuanLu studied while coding Poliastro :D . So, there are exciting things ahead!&lt;/p&gt;
&lt;p&gt;This is all for now. In case I don’t see ya, good afternoon, good evening, and good night! :) 🚀&lt;/p&gt;
&lt;p&gt;&lt;img alt="ending" src="https://media.giphy.com/media/y8fXirTJjj6E0/giphy.gif"&gt;&lt;/p&gt;</content><category term="articles"></category><category term="GSOC"></category><category term="GSOC20"></category><category term="Google"></category><category term="poliastro"></category></entry><entry><title>Looking for the answers!</title><link href="https://www.poliastro.space/blog/2020/08/20/2020-08-20-Looking-for-the-answers!/" rel="alternate"></link><published>2020-08-20T12:00:00+02:00</published><updated>2020-08-20T12:00:00+02:00</updated><author><name>Meuge</name></author><id>tag:www.poliastro.space,2020-08-20:/blog/2020/08/20/2020-08-20-Looking-for-the-answers!/</id><summary type="html">&lt;p&gt;Hey, folks! The last weeks were really exciting getting done an algorithm for ground-track orbit. After long days trying to find the perfect approach for Poliastro, we decided to give it a go bringing to life this &lt;a href="[https://www.researchgate.net/publication/287869810_Daily_repeat-groundtrack_Mars_orbits"&gt;paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="wow" src="https://media.giphy.com/media/gZBYbXHtVcYKs/giphy.gif"&gt;&lt;/p&gt;
&lt;h1&gt;But everything it's not what it seems&lt;/h1&gt;
&lt;p&gt;Well, we thought it will be quite straightforward but much too learn still I have , right Master Yoda?  &lt;/p&gt;
&lt;p&gt;&lt;img alt="do-or-do-not" src="https://media.giphy.com/media/pvDp7Ewpzt0o8/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;So I am not gonna lie to you folks, it wasn't that easy, but as Rocky says, "Every champion was once a contender who refused to give up". So now you are gonna know how we solve it. Game on!  First things first, we needed to apply numerical analysis in order to obtain the roots of the equation, because given the complexity of the function, there was no other way around. &lt;/p&gt;
&lt;p&gt;&lt;img alt="oh-no" src="https://media.giphy.com/media/xT5LMLMPdRh2VRNVLi/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;So we had to come up …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hey, folks! The last weeks were really exciting getting done an algorithm for ground-track orbit. After long days trying to find the perfect approach for Poliastro, we decided to give it a go bringing to life this &lt;a href="[https://www.researchgate.net/publication/287869810_Daily_repeat-groundtrack_Mars_orbits"&gt;paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="wow" src="https://media.giphy.com/media/gZBYbXHtVcYKs/giphy.gif"&gt;&lt;/p&gt;
&lt;h1&gt;But everything it's not what it seems&lt;/h1&gt;
&lt;p&gt;Well, we thought it will be quite straightforward but much too learn still I have , right Master Yoda?  &lt;/p&gt;
&lt;p&gt;&lt;img alt="do-or-do-not" src="https://media.giphy.com/media/pvDp7Ewpzt0o8/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;So I am not gonna lie to you folks, it wasn't that easy, but as Rocky says, "Every champion was once a contender who refused to give up". So now you are gonna know how we solve it. Game on!  First things first, we needed to apply numerical analysis in order to obtain the roots of the equation, because given the complexity of the function, there was no other way around. &lt;/p&gt;
&lt;p&gt;&lt;img alt="oh-no" src="https://media.giphy.com/media/xT5LMLMPdRh2VRNVLi/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;So we had to come up with a method which would be computationally efficient and optimal for this kind of problem. That's how LMS, Linear Mean Square, appeared on our door. We used VSSLMS, which is an enhanced LMS version that improves the convergence rate and mean-square error. You might recognize it as one of the main competitors to performance and accuracy of the Kalman Filter, but with the need for less computational power and easier maintenance. What's great about this algorithm is the capability of achieving the solution without the necessity of finding a bracket, since we have no idea which might be the right interval where the answer lies, in this case, we refer to the semi-major axis to acquire a ground-track orbit.
Another point of difficulty when trying to model the solution, it's each orbit's particularities. Such as $ecc=0$ or having an orbit with a critical angle or even $inc=0$.
Currently, the &lt;a href="[https://github.com/poliastro/poliastro/pull/1002](https://github.com/poliastro/poliastro/pull/1002)"&gt;PR&lt;/a&gt; is its last stages of review so let's hope to have this feature soon. &lt;/p&gt;
&lt;p&gt;&lt;img alt="yay" src="https://media1.tenor.com/images/b5c9fa0621cba99bbc1b5ee2f62802c2/tenor.gif?itemid=15917936"&gt;&lt;/p&gt;
&lt;p&gt;I hope everything is fine at your end. See you soon 🚀&lt;/p&gt;</content><category term="articles"></category><category term="GSOC"></category><category term="GSOC20"></category><category term="Google"></category><category term="poliastro"></category></entry><entry><title>On the move!</title><link href="https://www.poliastro.space/blog/2020/07/24/2020-07-24-On-the-move!/" rel="alternate"></link><published>2020-07-24T09:00:00+02:00</published><updated>2020-07-24T09:00:00+02:00</updated><author><name>Meuge</name></author><id>tag:www.poliastro.space,2020-07-24:/blog/2020/07/24/2020-07-24-On-the-move!/</id><summary type="html">&lt;p&gt;Hey, folks! Here's Meuge, your usual host from the last few months. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Johnny" src="https://media.giphy.com/media/RoajqIorBfSE/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;In the last few weeks, we got a little bit of everything, analyzing, coding, and searching for feasible solutions to reach the best result. Therefore, we came up with a new feature in Poliastro's Earth module. The API may change in the future, so be aware by the time you read this. Hence, I bet you might be wondering, what's all the fuzz?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Really?" src="https://media.giphy.com/media/US0y4X7FONHaM/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;Well, now you can experiment with the new API to compute the visibility of sensors that are on board of the satellites. The FOV, field of view, the question is about meeting mission goals within the limit of a satellite sensor. 
Given some parameters about the viewing satellite, the fundamental problem related to calculating the field of view is estimating how much of Earth we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hey, folks! Here's Meuge, your usual host from the last few months. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Johnny" src="https://media.giphy.com/media/RoajqIorBfSE/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;In the last few weeks, we got a little bit of everything, analyzing, coding, and searching for feasible solutions to reach the best result. Therefore, we came up with a new feature in Poliastro's Earth module. The API may change in the future, so be aware by the time you read this. Hence, I bet you might be wondering, what's all the fuzz?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Really?" src="https://media.giphy.com/media/US0y4X7FONHaM/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;Well, now you can experiment with the new API to compute the visibility of sensors that are on board of the satellites. The FOV, field of view, the question is about meeting mission goals within the limit of a satellite sensor. 
Given some parameters about the viewing satellite, the fundamental problem related to calculating the field of view is estimating how much of Earth we can see.
So, you are now able to know the angle of the total area that a sensor can observe. That's cool, right? If you want to take a look, see the &lt;a href="https://github.com/poliastro/poliastro/blob/d40700de75b4c4269b6ef738f8970c381de122fe/src/poliastro/earth/sensors.py"&gt;sensors&lt;/a&gt; file 😊
But first things first,let's see the magic behind the scenes! &lt;/p&gt;
&lt;h1&gt;Show me the code!&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.bodies&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Earth&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.earth.sensors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;max_and_min_ground_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# First we need to define the next parameters &lt;/span&gt;
&lt;span class="c1"&gt;# To calculate the minimum and maximum values of ground-range angles&lt;/span&gt;
&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Earth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Equatorial radius of the attractor&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# Altitude&lt;/span&gt;
&lt;span class="n"&gt;n_fov&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Angle of the total area that a sensor can observe.&lt;/span&gt;
&lt;span class="n"&gt;n_center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Center boresight angle.&lt;/span&gt;
&lt;span class="n"&gt;Λ_max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Λ_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max_and_min_ground_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_fov&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# Please note that the total ground range is the difference between the maximum and minimum ranges&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now imagine that we have the other situation that you know the phase angle, used to specify where the sensor is looking, and you want to figure out the difference in ground-range angles, delta_λ, from the η_center angle and the latitude, φ_tgt, and longitude, λ_tgt, of the target. So we do the next!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.bodies&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Earth&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.earth.sensors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;max_and_min_ground_range_with_specific_azimuth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# First we need to define the next parameters &lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# Altitude&lt;/span&gt;
&lt;span class="n"&gt;η_fov&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Angle of the total area that a sensor can observe.&lt;/span&gt;
&lt;span class="n"&gt;η_center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Center boresight angle.&lt;/span&gt;
&lt;span class="c1"&gt;# The sensor, β,  can be aimed in many directions&lt;/span&gt;
&lt;span class="n"&gt;β&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;140&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#phase angle&lt;/span&gt;
&lt;span class="n"&gt;φ_nadir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Latitude angle of nadir point&lt;/span&gt;
&lt;span class="n"&gt;λ_nadir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Longitude angle of nadir point&lt;/span&gt;
&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Earth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Equatorial radius of the attractor&lt;/span&gt;

&lt;span class="n"&gt;delta_λ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;φ_tgt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;λ_tgt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max_and_min_ground_range_with_specific_azimuth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;η_center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;η_fov&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;β&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;φ_nadir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;λ_nadir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that's it folks.That would be all for today, and stay safe out there! 🚀  &lt;/p&gt;
&lt;p&gt;&lt;img alt="bye" src="https://media0.giphy.com/media/fxe8v45NNXFd4jdaNI/giphy.gif"&gt;&lt;/p&gt;</content><category term="articles"></category><category term="GSOC"></category><category term="GSOC20"></category><category term="Google"></category><category term="poliastro"></category></entry><entry><title>What we've been working on these days!</title><link href="https://www.poliastro.space/blog/2020/06/28/2020-06-28-What-we'-ve-been-working-on-these-days!/" rel="alternate"></link><published>2020-06-28T09:00:00+02:00</published><updated>2020-06-28T09:00:00+02:00</updated><author><name>Meuge</name></author><id>tag:www.poliastro.space,2020-06-28:/blog/2020/06/28/2020-06-28-What-we'-ve-been-working-on-these-days!/</id><summary type="html">&lt;p&gt;Hey, folks! I hope everyone is okay out there. Today, I am going to explain a little bit about &lt;strong&gt;Repeat ground track orbits&lt;/strong&gt;, and the value that lies behind. 
Orbits with repeating ground tracks play a significant role in space engineering. Ground tracks that repeat according to any pattern have meaningful applications in remote sensing missions, reconnaissance missions, and numerous rendezvous and docking opportunities with an orbiting spacecraft. Since they overfly the same points on the planet’s surface every repeat cycle, such as those studying gravity, the atmosphere, or the movement of the polar ice cap.&lt;/p&gt;
&lt;p&gt;&lt;img alt="mind-blown" src="https://media.giphy.com/media/OK27wINdQS5YQ/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;So as you might imagine, this is amazing. In one way, the data we consume relies on these orbits. As mentioned before, Repeat ground track (RGT) orbits allows a satellite to reobserve the same area after a repeat cycle. &lt;/p&gt;
&lt;p&gt;&lt;img alt="repeat-ground-track" src="https://www.iceye.com/hs-fs/hubfs/new-pages-website-2019/Img%20(no%20adding)/Sat%20Data%20-%20constellation.gif?width=450&amp;amp;name=Sat%20Data%20-%20constellation.gif"&gt;&lt;/p&gt;
&lt;h1&gt;So how do we …&lt;/h1&gt;</summary><content type="html">&lt;p&gt;Hey, folks! I hope everyone is okay out there. Today, I am going to explain a little bit about &lt;strong&gt;Repeat ground track orbits&lt;/strong&gt;, and the value that lies behind. 
Orbits with repeating ground tracks play a significant role in space engineering. Ground tracks that repeat according to any pattern have meaningful applications in remote sensing missions, reconnaissance missions, and numerous rendezvous and docking opportunities with an orbiting spacecraft. Since they overfly the same points on the planet’s surface every repeat cycle, such as those studying gravity, the atmosphere, or the movement of the polar ice cap.&lt;/p&gt;
&lt;p&gt;&lt;img alt="mind-blown" src="https://media.giphy.com/media/OK27wINdQS5YQ/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;So as you might imagine, this is amazing. In one way, the data we consume relies on these orbits. As mentioned before, Repeat ground track (RGT) orbits allows a satellite to reobserve the same area after a repeat cycle. &lt;/p&gt;
&lt;p&gt;&lt;img alt="repeat-ground-track" src="https://www.iceye.com/hs-fs/hubfs/new-pages-website-2019/Img%20(no%20adding)/Sat%20Data%20-%20constellation.gif?width=450&amp;amp;name=Sat%20Data%20-%20constellation.gif"&gt;&lt;/p&gt;
&lt;h1&gt;So how do we do it?&lt;/h1&gt;
&lt;p&gt;RGT is usually specified by an integer number of days &lt;em&gt;N&lt;/em&gt; and an integer number of orbits &lt;em&gt;K&lt;/em&gt; in the repeat cycle. So after acknowledging how the user wants the repeat ground track orbit. We calculate the mean semimajor axis,&lt;em&gt;a&lt;/em&gt;, required for a repeating ground track orbit using an algorithm devised by Carl Wagner. And we iterate on &lt;em&gt;a&lt;/em&gt; until we find the desired approximation. For further information, refer to &lt;em&gt;Fundamentals of Astrodynamics and Applications, 4th ed&lt;/em&gt; by David A. Vallado. &lt;/p&gt;
&lt;p&gt;This algorithm starts with the following initial guess for the required mean semimajor axis:&lt;/p&gt;
&lt;p&gt;$$a_{o}= \mu^\frac{1}{3}[(\frac{R}{D})\omega_{b}]^{-\frac{2}{3}}$$&lt;/p&gt;
&lt;p&gt;And iteratively improves the semi-major axis with the following update:&lt;/p&gt;
&lt;p&gt;$$a_{i+1}= \mu^\frac{1}{3}[(\frac{R}{D})\omega_{b}]^{-\frac{2}{3}}[1-\frac{3}{2}J_{2}(\frac{r_{bq}}{a_{i}})^2(1-\frac{3}{2}\sin(i)^2)]^\frac{2}{3}[1+J_{2}(\frac{r_{bq}}{a_{i}})^2(\frac{3}{2}\frac{R}{D}\cos(i)-\frac{3}{4}(5\cos(i)^2-1))]^\frac{2}{3}$$&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;p&gt;$R$ = Integer number of orbits&lt;/p&gt;
&lt;p&gt;$D$ = Integer number of days&lt;/p&gt;
&lt;p&gt;$J_{2}$ = Second gravity coefficient&lt;/p&gt;
&lt;p&gt;$\omega_{b}$ = Inertial rotation rate of the Body&lt;/p&gt;
&lt;p&gt;$r_{qb}$ = Equatorial radius of the Body&lt;/p&gt;
&lt;p&gt;$i$ = Orbital inclination&lt;/p&gt;
&lt;p&gt;$\mu$ = Gravitational constant of the Body&lt;/p&gt;
&lt;p&gt;So do you know any satellite mission that has a repeat ground track orbit? There are just a bunch of them!. Just to mention, ICESat (Ice, Cloud, and land Elevation Satellite), was a satellite mission for measuring ice sheet mass balance, cloud and aerosol heights, as well as land topography and vegetation characteristics. If you visit, &lt;a href="https://nsidc.org/data/icesat/data.html"&gt;National Snow &amp;amp; Ice Data center&lt;/a&gt;, you may find some datasets coming from the different versions of ICESat.&lt;/p&gt;
&lt;h1&gt;Join us on SciPy US sprint!&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Poliastro&lt;/strong&gt; has registered on &lt;strong&gt;SciPy US&lt;/strong&gt;, and we'll have a sprint on 11th and 12th July, in tandem with &lt;strong&gt;SciPy&lt;/strong&gt; sprint. So make a time slot for yourself on the agenda, and get ready! If you have any ideas about what you want to work on, or stuff that you want us to pay attention to, feel free to write to us! These are some of the &lt;a href="https://github.com/poliastro/poliastro/wiki/SciPy-2020-Sprint"&gt;suggestions&lt;/a&gt; we came up with.&lt;/p&gt;
&lt;p&gt;That would be all for today, folks. ;) &lt;/p&gt;
&lt;p&gt;&lt;img alt="bye" src="https://media.giphy.com/media/79ZFYdMsStRYI/giphy.gif"&gt;&lt;/p&gt;</content><category term="articles"></category><category term="GSOC"></category><category term="GSOC20"></category><category term="Google"></category><category term="poliastro"></category></entry><entry><title>To Infinity and Beyond!</title><link href="https://www.poliastro.space/blog/2020/06/27/2020-06-27-to-infinity-and-beyond!/" rel="alternate"></link><published>2020-06-27T21:45:00+02:00</published><updated>2020-06-27T21:45:00+02:00</updated><author><name>Meuge</name></author><id>tag:www.poliastro.space,2020-06-27:/blog/2020/06/27/2020-06-27-to-infinity-and-beyond!/</id><summary type="html">&lt;p&gt;Hey folks! It's been a while, but here I am to keep you posted about what we've been up to these last days. &lt;/p&gt;
&lt;p&gt;&lt;img alt="news" src="https://media.giphy.com/media/3o84sJXOIrnjvlwnF6/giphy.gif"&gt;&lt;/p&gt;
&lt;h1&gt;What have we been up to?&lt;/h1&gt;
&lt;p&gt;We began the coding period with a video call with the mentors, as you might already know, &lt;strong&gt;JuanLu&lt;/strong&gt; and &lt;strong&gt;Jorge&lt;/strong&gt;. We got to know each other a little better, and we started to design what was ahead of our path.&lt;/p&gt;
&lt;p&gt;&lt;img alt="future" src="https://media.giphy.com/media/KZocN3LfuqktW/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;But, before dropping any line of code, we first had to think about what would be the best way to integrate the new features to &lt;strong&gt;Poliastro community&lt;/strong&gt; in order to capture the desired requirements from an end-user perspective. After some deliberation, we came up with the idea of adding two new objects. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Spock" src="https://media.giphy.com/media/sBl8Fowq0ErFC/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;By now, I hope to have your attention as well as Spock's. So we created &lt;em&gt;EarthSatellite&lt;/em&gt; and &lt;em&gt;Spacecraft&lt;/em&gt;. Both …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hey folks! It's been a while, but here I am to keep you posted about what we've been up to these last days. &lt;/p&gt;
&lt;p&gt;&lt;img alt="news" src="https://media.giphy.com/media/3o84sJXOIrnjvlwnF6/giphy.gif"&gt;&lt;/p&gt;
&lt;h1&gt;What have we been up to?&lt;/h1&gt;
&lt;p&gt;We began the coding period with a video call with the mentors, as you might already know, &lt;strong&gt;JuanLu&lt;/strong&gt; and &lt;strong&gt;Jorge&lt;/strong&gt;. We got to know each other a little better, and we started to design what was ahead of our path.&lt;/p&gt;
&lt;p&gt;&lt;img alt="future" src="https://media.giphy.com/media/KZocN3LfuqktW/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;But, before dropping any line of code, we first had to think about what would be the best way to integrate the new features to &lt;strong&gt;Poliastro community&lt;/strong&gt; in order to capture the desired requirements from an end-user perspective. After some deliberation, we came up with the idea of adding two new objects. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Spock" src="https://media.giphy.com/media/sBl8Fowq0ErFC/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;By now, I hope to have your attention as well as Spock's. So we created &lt;em&gt;EarthSatellite&lt;/em&gt; and &lt;em&gt;Spacecraft&lt;/em&gt;. Both of them would be vital to develop what's coming next for &lt;strong&gt;Poliastro&lt;/strong&gt;. Did someone say &lt;strong&gt;TLE&lt;/strong&gt;?. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Surprise" src="https://media.giphy.com/media/LPNNFDYNTgP3q1jcAK/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;Still, you might want to check out EarthSatellite propagation considering J2's perturbation and the atmospheric drag. Sounds superb, right? In order to use it you might want to try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.earth.atmosphere&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;COESA76&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.bodies&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Earth&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.earth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EarthSatellite&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;astropy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;units&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.twobody.orbit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.earth.enums&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EarthGravity&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.spacecraft&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Spacecraft&lt;/span&gt;


&lt;span class="n"&gt;tof&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt; 
&lt;span class="n"&gt;ss0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_classical&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Earth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.75&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;63.4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;270&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;C_D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;  &lt;span class="c1"&gt;# dimentionless drag coefficient&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kg&lt;/span&gt; 
&lt;span class="n"&gt;spacecraft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Spacecraft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C_D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#we create the spacecraft&lt;/span&gt;
&lt;span class="n"&gt;earth_satellite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EarthSatellite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ss0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spacecraft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;orbit_with_atmosphere_and_J2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;earth_satellite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;propagate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tof&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tof&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gravity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;EarthGravity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;J2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;atmosphere&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;COESA76&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nevertheless, this API is subject to changes, so before diving in, verify the documentation :)&lt;/p&gt;
&lt;p&gt;See you in the next post, and stay safe :)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Infinity" src="https://media.giphy.com/media/wPXW2MLFCTNF6/giphy.gif"&gt;&lt;/p&gt;</content><category term="articles"></category><category term="GSOC"></category><category term="GSOC20"></category><category term="Google"></category><category term="poliastro"></category></entry><entry><title>GSoC 2020, I am going to an adventure!</title><link href="https://www.poliastro.space/blog/2020/05/17/2020-05-17-poliastro-google-summer-of-code-2020/" rel="alternate"></link><published>2020-05-17T12:00:00+02:00</published><updated>2020-05-17T12:00:00+02:00</updated><author><name>Meuge</name></author><id>tag:www.poliastro.space,2020-05-17:/blog/2020/05/17/2020-05-17-poliastro-google-summer-of-code-2020/</id><summary type="html">&lt;p&gt;Hi, you all! Let me tell you something, this is going to be the beginning of our journey together, we are going on to a spatial adventure! Sit tight, and wait for the countdown!&lt;/p&gt;
&lt;p&gt;&lt;img alt="countdown" src="https://techcrunch.com/wp-content/uploads/2017/08/falcon-9-crs-12-compressor.gif"&gt;&lt;/p&gt;
&lt;p&gt;But first, let me introduce myself, my name is María Eugenia, though everybody knows me as &lt;em&gt;Meuge&lt;/em&gt;. &lt;/p&gt;
&lt;h1&gt;First things first, SPACE? How did we get here?&lt;/h1&gt;
&lt;p&gt;All began with the big bang, no wait, that's a story for another time. All began in 2019, when &lt;strong&gt;JuanLu&lt;/strong&gt; reached out to the &lt;em&gt;The Fellowship of&lt;/em&gt;  &lt;del&gt;the ring&lt;/del&gt;  &lt;em&gt;Python Científico&lt;/em&gt; community to informed us that &lt;strong&gt;Poliastro&lt;/strong&gt; would be part of &lt;strong&gt;GSoC 2019&lt;/strong&gt;. 
To be honest with you, I had just a slight idea of astrodynamics, so I took a big leap of faith and asked JuanLu where I could make myself useful. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Yoda's way" src="https://media1.tenor.com/images/f708e56b6ab99de21228c95203c7af8e/tenor.gif?itemid=13942585"&gt;&lt;/p&gt;
&lt;p&gt;The truth is that JuanLu wasn't that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hi, you all! Let me tell you something, this is going to be the beginning of our journey together, we are going on to a spatial adventure! Sit tight, and wait for the countdown!&lt;/p&gt;
&lt;p&gt;&lt;img alt="countdown" src="https://techcrunch.com/wp-content/uploads/2017/08/falcon-9-crs-12-compressor.gif"&gt;&lt;/p&gt;
&lt;p&gt;But first, let me introduce myself, my name is María Eugenia, though everybody knows me as &lt;em&gt;Meuge&lt;/em&gt;. &lt;/p&gt;
&lt;h1&gt;First things first, SPACE? How did we get here?&lt;/h1&gt;
&lt;p&gt;All began with the big bang, no wait, that's a story for another time. All began in 2019, when &lt;strong&gt;JuanLu&lt;/strong&gt; reached out to the &lt;em&gt;The Fellowship of&lt;/em&gt;  &lt;del&gt;the ring&lt;/del&gt;  &lt;em&gt;Python Científico&lt;/em&gt; community to informed us that &lt;strong&gt;Poliastro&lt;/strong&gt; would be part of &lt;strong&gt;GSoC 2019&lt;/strong&gt;. 
To be honest with you, I had just a slight idea of astrodynamics, so I took a big leap of faith and asked JuanLu where I could make myself useful. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Yoda's way" src="https://media1.tenor.com/images/f708e56b6ab99de21228c95203c7af8e/tenor.gif?itemid=13942585"&gt;&lt;/p&gt;
&lt;p&gt;The truth is that JuanLu wasn't that green... But he clearly had the wisdom of Master Yoda to lead a young Padawan to the ways of the space. 
We started with &lt;em&gt;Frozen Orbit PR Mission&lt;/em&gt;, and along with the force, success was on our side.&lt;/p&gt;
&lt;h1&gt;Do. Or do not. There is no try.&lt;/h1&gt;
&lt;p&gt;It's been a long journey, but I finally got the opportunity to work with the &lt;strong&gt;Poliastro&lt;/strong&gt; folks. I have nothing but kind words for the community that immediately took me in and made me feel welcome.
After some deliberation, along with &lt;strong&gt;JuanLu&lt;/strong&gt; and &lt;strong&gt;Jorge&lt;/strong&gt;, we decided to go for the following proposal: &lt;em&gt;"Designing a Specialized Orbit and Implementing Geometries for Surveillance and Reconnaissance Capabilities"&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="It's working" src="https://media.giphy.com/media/9K2nFglCAQClO/200_d.gif"&gt;&lt;/p&gt;
&lt;p&gt;And luckily this proposal was selected to be carried out this year. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So what can I say, I was over the moon when I received the news!!!&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Winter is coming or should I say winter is coding?&lt;/h1&gt;
&lt;p&gt;Although GSoC stands for Summer, here in the South Hemisphere, we don't feel the same. It's really cold and with no Starks around.&lt;/p&gt;
&lt;p&gt;&lt;img alt="cold" src="https://media.giphy.com/media/tLrqmVoFJV4mQ/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;But feeling really excited to start the GWoC.  To brief you into this matter, this &lt;del&gt;Winter&lt;/del&gt;, I mean this Summer, one of our core tasks is to be launching the  &lt;strong&gt;Space mission analysis and design module at Poliastro&lt;/strong&gt;. 
At Poliastro, we feel that it's necessary to provide the most efficient way to accomplish the space mission’s objectives while optimizing the time required and minimizing the cost and risk associated.&lt;/p&gt;
&lt;p&gt;Really looking forward to starting this new journey with Poliastro :) 
See you in the next time folks time, trying to conquer the world?&lt;/p&gt;
&lt;p&gt;&lt;img alt="pinky and brain" src="https://media.giphy.com/media/3mKBXLpYeLzUY/giphy.gif"&gt;&lt;/p&gt;</content><category term="articles"></category><category term="GSOC"></category><category term="Google"></category><category term="poliastro"></category><category term="students"></category></entry><entry><title>New features after GSOC19</title><link href="https://www.poliastro.space/blog/2019/08/20/2019-08-20-new-features-after-gsoc19/" rel="alternate"></link><published>2019-08-20T22:00:00+02:00</published><updated>2019-08-20T22:00:00+02:00</updated><author><name>Jorge Martínez Garrido</name></author><id>tag:www.poliastro.space,2019-08-20:/blog/2019/08/20/2019-08-20-new-features-after-gsoc19/</id><summary type="html">&lt;p&gt;GSOC 2019 Edition has almost finished. All along this last three months lots of
issues where solved, &lt;code&gt;poliastro 0.13&lt;/code&gt; was raised, new features were applied and
of course, new issues and bugs appeared.&lt;/p&gt;
&lt;p&gt;The objective of this post is just to collect all the implementations that have
been merged during this GSOC and also those that are still required to be done.&lt;/p&gt;
&lt;h2&gt;ALREADY IMPLEMENTED&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] Lambert minor issues were fixed.&lt;/li&gt;
&lt;li&gt;[x] Lambert as Maneuver instances.&lt;/li&gt;
&lt;li&gt;[x] Docs and notebook on previous implementations.&lt;/li&gt;
&lt;li&gt;[x] Trail plotting option.&lt;/li&gt;
&lt;li&gt;[x] Fix minor issues on CI and tests.&lt;/li&gt;
&lt;li&gt;[x] New twobody propagators.&lt;/li&gt;
&lt;li&gt;[x] Maneuver fixes: Hohmann time to pericenter and units bug.&lt;/li&gt;
&lt;li&gt;[x] Atmospheric models: COESA62 and COESA76.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A detailed description and link to the code can be found in the following lines.&lt;/p&gt;
&lt;h3&gt;Izzo Algorithm minor errors&lt;/h3&gt;
&lt;p&gt;Some errors appeared in the minimum …&lt;/p&gt;</summary><content type="html">&lt;p&gt;GSOC 2019 Edition has almost finished. All along this last three months lots of
issues where solved, &lt;code&gt;poliastro 0.13&lt;/code&gt; was raised, new features were applied and
of course, new issues and bugs appeared.&lt;/p&gt;
&lt;p&gt;The objective of this post is just to collect all the implementations that have
been merged during this GSOC and also those that are still required to be done.&lt;/p&gt;
&lt;h2&gt;ALREADY IMPLEMENTED&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] Lambert minor issues were fixed.&lt;/li&gt;
&lt;li&gt;[x] Lambert as Maneuver instances.&lt;/li&gt;
&lt;li&gt;[x] Docs and notebook on previous implementations.&lt;/li&gt;
&lt;li&gt;[x] Trail plotting option.&lt;/li&gt;
&lt;li&gt;[x] Fix minor issues on CI and tests.&lt;/li&gt;
&lt;li&gt;[x] New twobody propagators.&lt;/li&gt;
&lt;li&gt;[x] Maneuver fixes: Hohmann time to pericenter and units bug.&lt;/li&gt;
&lt;li&gt;[x] Atmospheric models: COESA62 and COESA76.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A detailed description and link to the code can be found in the following lines.&lt;/p&gt;
&lt;h3&gt;Izzo Algorithm minor errors&lt;/h3&gt;
&lt;p&gt;Some errors appeared in the minimum transfer time for the Izzo algorithm. After
a little bit of debugging, Juanlu found that &lt;code&gt;time-of-flight equation that does
not need external computation of one of the terms&lt;/code&gt;. I was asked to write some
unit tests.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;strong&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/709"&gt;Link to the corresponding pull request&lt;/a&gt;&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Lambert becomes Maneuver&lt;/h3&gt;
&lt;p&gt;After the logic in Izzo's algorithm was fixed it was time to create a
&lt;code&gt;Maneuver.lambert(ss_origin, ss_final)&lt;/code&gt;. Finally, a really simple and powerful
implementation was achieved!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;LAUNCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ARRIVAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LAUNCH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;

&lt;span class="n"&gt;ss_earth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_body_ephem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Earth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LAUNCH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ss_mars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_body_ephem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ARRIVAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;man_lambert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Maneuver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lambert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ss_earth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ss_mars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ss_trans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ss_target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ss_earth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_maneuver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;man_lambert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;intermediate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;center&gt;
&lt;strong&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/680"&gt;Link to the corresponding pull request&lt;/a&gt;&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Document Lambert's maneuver&lt;/h3&gt;
&lt;p&gt;It was necessary to update some of the Jupyter notebooks that made use of the
previous * raw* implementation of the algorithm.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;strong&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/699"&gt;Link to the corresponding pull request&lt;/a&gt;&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Lambert's multirevolution example&lt;/h3&gt;
&lt;p&gt;After &lt;code&gt;#680&lt;/code&gt; it was even easier to work with &lt;code&gt;Lambert transfers&lt;/code&gt;. Therefore, I
decided to add some more documentation on the multi revolution problem. A
custom explanatory image was designed and finally merge in the following pull
request.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
!({static}/images/multi_lambert.png)
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;strong&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/725"&gt;Link to the corresponding pull request&lt;/a&gt;&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Add trail plotting option&lt;/h3&gt;
&lt;p&gt;To give a more &lt;em&gt;dynamical&lt;/em&gt; perspective to the user when working with
&lt;code&gt;StaticOrbitPlotter()&lt;/code&gt; instances this feature was proposed. Initial
implementation was not merged but improved by mentor Juanlu. Thank you so much
for your help!&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="trail" src="https://www.poliastro.space/images/faded_orbit.png"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;strong&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/688"&gt;Link to the corresponding pull request&lt;/a&gt;&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Add ipywidgets to tox -e images&lt;/h3&gt;
&lt;p&gt;This is one of the minor issues that appear while coding. It was really easy to
solve.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;strong&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/696"&gt;Link to the corresponding pull request&lt;/a&gt;&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Update tests to astropy 3.2&lt;/h3&gt;
&lt;p&gt;Some of the tests were coded by hard, meaning that they are subjected to
updates on NASA's JPL database. Therefore, when &lt;code&gt;astropy 3.2&lt;/code&gt; was released it
was necessary to update some of them.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;strong&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/700"&gt;Link to the corresponding pull request&lt;/a&gt;&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;New powerful twobody propagators&lt;/h3&gt;
&lt;p&gt;While working with &lt;a href="https://github.com/poliastro/poliastro/issues/475"&gt;#475&lt;/a&gt; I
decided to implement a new propagator to compare the solutions against the
available ones in &lt;strong&gt;poliastro&lt;/strong&gt;. However, I became interested in Kepler's
problem and decided to collect and implement all possible algorithms I was able
to find. Following routines were added:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mikkola&lt;/code&gt;:  https://doi.org/10.1007/BF01235850&lt;/li&gt;
&lt;li&gt;&lt;code&gt;markley&lt;/code&gt;: https://doi.org/10.1007/BF00691917 (this is the previously called &lt;code&gt;kepler_improved&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pimienta&lt;/code&gt;: &lt;a href="https://www.researchgate.net/publication/288133262_Accurate_Kepler_equation_solver_without_transcendental_function_evaluations"&gt;link to the paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gooding&lt;/code&gt;: https://doi.org/10.1007/BF01235540&lt;/li&gt;
&lt;li&gt;&lt;code&gt;danby&lt;/code&gt;: https://doi.org/10.1007/BF00691917&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;
&lt;strong&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/718"&gt;Link to the corresponding pull request&lt;/a&gt;&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Orbit method &lt;code&gt;change_attractor&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;When retrieving orbits from external sources, such for example Jupyter's moons
by making use of &lt;code&gt;Orbit.from_sbdb&lt;/code&gt; they were retrieved with an ICRS frame.
However, if a user wants to study their orbit around Jupyter it was necessary
to implement some &lt;code&gt;Orbit&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;change_attractor&lt;/code&gt; orbit solved this issue. It checked when and &lt;code&gt;Orbit&lt;/code&gt; instance was under or out its attractor's SOI.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;strong&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/729"&gt;Link to the corresponding pull request&lt;/a&gt;&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Hohmann time to pericenter&lt;/h3&gt;
&lt;p&gt;In all books, Hohmann maneuvers are explained from the PQW orbital frame, with
the satellite at an initial perfect circular orbit and &lt;code&gt;true anomaly&lt;/code&gt; equal to
zero. This may not be the case in the real world, since the initial orbit may
be elliptical and the satellite could be in another position rather than at
periapsis. If this was the case, the orbit was propagated by force without
notifying the user and this time was not taken into account. &lt;/p&gt;
&lt;p&gt;Finally, this was solved by keeping the forced propagation and adding that
&lt;code&gt;time_to_anomaly&lt;/code&gt; in the corresponding &lt;code&gt;Maneuver&lt;/code&gt; instance.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;strong&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/744"&gt;Link to the corresponding pull request&lt;/a&gt;&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Add atmospheric models&lt;/h3&gt;
&lt;p&gt;After &lt;a href="https://github.com/poliastro/poliastro/issues/694"&gt;#694&lt;/a&gt; was opened, it
was necessary to implement a better atmospheric model instead of using the ISA
one. Some models such as COESA62, COESA76 were merged in the master code after
0.13 was released. However, previous models were not fully implemented and just
worked under 100km geometric altitude.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;strong&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/738"&gt;Link to the corresponding pull request&lt;/a&gt;&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Reformat on atmospheres&lt;/h3&gt;
&lt;p&gt;After more research on the topic, I was finally able to implement COESA76 up to
1000km instead of 86km. A 4th order polynomial was used but this required
hard-coding lots of coefficients.&lt;/p&gt;
&lt;p&gt;That was the reason behind the reformat of the &lt;code&gt;poliastro.atmosphere&lt;/code&gt; module.
By making use of &lt;code&gt;astropy&lt;/code&gt; generated &lt;code&gt;.dat&lt;/code&gt; files it was possible to clean up
last implementations and make them more readable.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;strong&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/756"&gt;Link to the corresponding pull request&lt;/a&gt;&lt;/strong&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;WHAT IS LEFT #TODO&lt;/h2&gt;
&lt;p&gt;Comparing my &lt;code&gt;Open Astronomy&lt;/code&gt; proposal with the previous implementations following features are still required to be developed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] SS and Earth-Moon barycenters are still required to be developed.&lt;/li&gt;
&lt;li&gt;[ ] New orbit creation such us &lt;code&gt;from_TLE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[ ] More plotting capabilities such us different attractors in the same figure or groundtracks.&lt;/li&gt;
&lt;li&gt;[ ] Verner78 ODE method may be implemented in Scipy following same idea for the &lt;a href="https://github.com/scipy/scipy/pull/10173"&gt;DOP853&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;My experience as GSOC student&lt;/h2&gt;
&lt;p&gt;During the last months, I have learned a lot of new things. Although most of them
are related to scientific content (astrodynamics in particular), others refer
to Python language such as packaging, docs, CI, version release...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It was a great experience working during this summer with &lt;code&gt;poliastro&lt;/code&gt; and
&lt;code&gt;Open Astronomy&lt;/code&gt; people. Juanlu has been an amazing mentor, answering almost in
time all my questions. He understood that some topics were a little bit
complicated and required more time than expected to be studied and applied
to the code.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A total of 5299 lines of code were added while 2620 were removed. But
contributions will not stop there! The Python package &lt;code&gt;poliastro&lt;/code&gt; shows an
amazing future in computational astrodynamics and I want to be part of that
future. For sure I will keep opening issues, pull requests and learning lots of
things. Thank you all very much.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Per Python ad astra!&lt;/em&gt;&lt;/p&gt;</content><category term="GSOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category></entry><entry><title>CZML Extractor: An overview</title><link href="https://www.poliastro.space/blog/2019/08/19/2019-08-19-czml-extractor-an-overview.md/" rel="alternate"></link><published>2019-08-19T15:00:00+02:00</published><updated>2019-08-19T15:00:00+02:00</updated><author><name>Eleftheria Chatziargyriou</name></author><id>tag:www.poliastro.space,2019-08-19:/blog/2019/08/19/2019-08-19-czml-extractor-an-overview.md/</id><summary type="html">&lt;p&gt;As the proverb says "all good things must come to an end". Unfortunately, it's time
to bid adieu to the summer and have a look on what has been accomplished so far.&lt;/p&gt;
&lt;h2&gt;The CZML Extractor&lt;/h2&gt;
&lt;p&gt;This was undoubtedly the main and most time-consuming part of the project. The extractor
allows users to easily convert orbital data to CZML. You can find an overview of the
extractor's usage in the &lt;a href="https://docs.poliastro.space/en/stable/user_guide.html"&gt;User Guide&lt;/a&gt;
or take a look in the more in-depth 
&lt;a href="https://github.com/Sedictious/poliastro/blob/2c4355e50207470b18f31d8405ddc1f2c53c574b/docs/source/examples/CZML%20Tutorial.ipynb"&gt;Jupyter notebook tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Cesium Application&lt;/h2&gt;
&lt;p&gt;Since we need more parameters to accurately represent the data, we also need a
specific application to parse said parameters. For this reason, I worked on a 
Cesium application that allows you to easily visualize the data. At this moment, 
there are two separate applications: 
&lt;a href="https://github.com/poliastro/cesium-app/tree/master/application"&gt;one&lt;/a&gt; that runs remotely 
and &lt;a href="https://github.com/poliastro/cesium-app/tree/master/Sandcastle"&gt;one&lt;/a&gt; you can
copy-paste directly …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As the proverb says "all good things must come to an end". Unfortunately, it's time
to bid adieu to the summer and have a look on what has been accomplished so far.&lt;/p&gt;
&lt;h2&gt;The CZML Extractor&lt;/h2&gt;
&lt;p&gt;This was undoubtedly the main and most time-consuming part of the project. The extractor
allows users to easily convert orbital data to CZML. You can find an overview of the
extractor's usage in the &lt;a href="https://docs.poliastro.space/en/stable/user_guide.html"&gt;User Guide&lt;/a&gt;
or take a look in the more in-depth 
&lt;a href="https://github.com/Sedictious/poliastro/blob/2c4355e50207470b18f31d8405ddc1f2c53c574b/docs/source/examples/CZML%20Tutorial.ipynb"&gt;Jupyter notebook tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Cesium Application&lt;/h2&gt;
&lt;p&gt;Since we need more parameters to accurately represent the data, we also need a
specific application to parse said parameters. For this reason, I worked on a 
Cesium application that allows you to easily visualize the data. At this moment, 
there are two separate applications: 
&lt;a href="https://github.com/poliastro/cesium-app/tree/master/application"&gt;one&lt;/a&gt; that runs remotely 
and &lt;a href="https://github.com/poliastro/cesium-app/tree/master/Sandcastle"&gt;one&lt;/a&gt; you can
copy-paste directly into Cesium &lt;a href="https://cesiumjs.org/Cesium/Build/Apps/Sandcastle/"&gt;Sandcastle&lt;/a&gt;.
I have added the instructions on how to run it in the &lt;a href="https://github.com/poliastro/cesium-app"&gt;repo&lt;/a&gt;,
where you can also find a few examples to get you started.&lt;/p&gt;
&lt;h2&gt;CZML3&lt;/h2&gt;
&lt;p&gt;As I've mentioned in previous posts, the CZML packets were internally represented
by nested dictionaries. This complicated the code and made it generally uglier for 
many reasons (need for a "default" packet, need to specify the path of every parameter
that was being added etc...). Fortunately, my mentor Juanlu came up with a great 
&lt;a href="https://github.com/poliastro/czml3"&gt;library&lt;/a&gt; that made the process exponentially easier and
allowed us to get rid of many unecessary parts of the older code. Over time, I added most of 
the basic Cesium properties that were needed for the extractor (though I hope to eventually
go back to it and turn it into a fully fledged library!)&lt;/p&gt;
&lt;h2&gt;Git log&lt;/h2&gt;
&lt;p&gt;Those are my PRs which were merged into poliastro's core (excluding the commits made to czml3 or the app)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/601"&gt;#601 Adds basic CZML Extractor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/634"&gt;#603 Added some tests for CZML Extractor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/661"&gt;#661 Create custom CZML packets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/674"&gt;#674 Add ground stations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/711"&gt;#711 Use czml3 for the czml extractor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/717"&gt;#717 Additional orbit properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/720"&gt;#720 Add SpheroidLocation class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/721"&gt;#721 Add 2D Scene support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/730"&gt;#730 Add updated IAU values for body radii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/735"&gt;#735 Update rotational elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/737"&gt;#737 SpheroidLocation accepts poliastro bodies instead of spheroid parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/739"&gt;#739 Add ground track plotting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/743"&gt;#743 Allow groundtrack lead/trail time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/746"&gt;#746 Add angular speed and rotational period&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/753"&gt;#753 Add initial CZML notebook tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/pull/755"&gt;#755 Add additional parameters for groundtracks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is still a pending PR that will add pass tracking (finally). I'm currently trying to test the 
added functionality to ensure it is as bug-free as possible.&lt;/p&gt;
&lt;h2&gt;Special thanks&lt;/h2&gt;
&lt;p&gt;I'd like to thank everyone in the Open Atronomy community. I'd also like to give a special
thanks to my mentor, Juanlu, who helped make the whole GSoC experience even greater than I initially
expected: he helped me get the proper background, gave helpful feedback and was very supportive
and an all-around amazing person!&lt;/p&gt;
&lt;h2&gt;What's next&lt;/h2&gt;
&lt;p&gt;I had a wonderful time and I'm certainly planning to go back and polish the project as well as add
any extra functionalities. Who knows, maybe there are many more contributions yet to come 😉&lt;/p&gt;
&lt;p&gt;If you're interested in this project, or poliastro in general, you can attend the 
&lt;a href="https://indico.oscw.space/event/3/"&gt;Open Source CubeSat Workshop&lt;/a&gt; where we'll be running a 
&lt;a href="https://indico.oscw.space/event/3/contributions/78/"&gt;workshop&lt;/a&gt;. Hope to see you there!&lt;/p&gt;</content><category term="GSCOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category></entry><entry><title>Hard reformat week</title><link href="https://www.poliastro.space/blog/2019/08/18/2019-08-16-hard-reformat-week/" rel="alternate"></link><published>2019-08-18T17:30:00+02:00</published><updated>2019-08-18T17:30:00+02:00</updated><author><name>Jorge Martínez Garrido</name></author><id>tag:www.poliastro.space,2019-08-18:/blog/2019/08/18/2019-08-16-hard-reformat-week/</id><summary type="html">&lt;h2&gt;Reformat on poliastro.atmosphere&lt;/h2&gt;
&lt;p&gt;After implementing the &lt;code&gt;COESA62&lt;/code&gt; and &lt;code&gt;COESA76&lt;/code&gt; models in
&lt;a href="https://github.com/poliastro/poliastro/pull/738"&gt;#738&lt;/a&gt; I was not completly
happy because of lots of data and coefficients at the beginning of each script.
Therefore and after asking Juanlu, it was finally decided to move all those
numbers to text files under the &lt;code&gt;*.dat&lt;/code&gt; extension.&lt;/p&gt;
&lt;p&gt;Furthermore, I decided not only to do that but also to completely reformat the
&lt;code&gt;poliastro.atmosphere&lt;/code&gt; module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base.py&lt;/code&gt;: holds different mother classes for atmospheric models.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coesa62.py&lt;/code&gt;: U.S Standard Atmosphere 1962 model.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coesa76.py&lt;/code&gt;: U.S Standard Atmosphere 1976 model.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;util.py&lt;/code&gt;: contains atmospheric utilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Documentation was also added together with a notebook to better see not only how
these objects work but their differences in output results. In the following
image properties for COESA76 against geometrical altitude are plotted:&lt;/p&gt;
&lt;p&gt;&lt;img alt="COESA76" src="https://www.poliastro.space/images/atm76.png"&gt;&lt;/p&gt;
&lt;h2&gt;Reformat on poliastro.bodies&lt;/h2&gt;
&lt;p&gt;While working …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Reformat on poliastro.atmosphere&lt;/h2&gt;
&lt;p&gt;After implementing the &lt;code&gt;COESA62&lt;/code&gt; and &lt;code&gt;COESA76&lt;/code&gt; models in
&lt;a href="https://github.com/poliastro/poliastro/pull/738"&gt;#738&lt;/a&gt; I was not completly
happy because of lots of data and coefficients at the beginning of each script.
Therefore and after asking Juanlu, it was finally decided to move all those
numbers to text files under the &lt;code&gt;*.dat&lt;/code&gt; extension.&lt;/p&gt;
&lt;p&gt;Furthermore, I decided not only to do that but also to completely reformat the
&lt;code&gt;poliastro.atmosphere&lt;/code&gt; module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base.py&lt;/code&gt;: holds different mother classes for atmospheric models.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coesa62.py&lt;/code&gt;: U.S Standard Atmosphere 1962 model.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coesa76.py&lt;/code&gt;: U.S Standard Atmosphere 1976 model.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;util.py&lt;/code&gt;: contains atmospheric utilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Documentation was also added together with a notebook to better see not only how
these objects work but their differences in output results. In the following
image properties for COESA76 against geometrical altitude are plotted:&lt;/p&gt;
&lt;p&gt;&lt;img alt="COESA76" src="https://www.poliastro.space/images/atm76.png"&gt;&lt;/p&gt;
&lt;h2&gt;Reformat on poliastro.bodies&lt;/h2&gt;
&lt;p&gt;While working on the previous module, Eleftheria completed
&lt;a href="https://github.com/poliastro/poliastro/pull/746"&gt;#746&lt;/a&gt; and was merged. This
allowed me to start working on Sun-synchronous orbits for any Solar System body
since sidereal times were added. However, a small bug was introduced, since
inheritance was not properly structured. Taking advantage of this, Juanlu
decided to reformat &lt;code&gt;poliastro.bodies&lt;/code&gt;, &lt;code&gt;poliastro.coordinates&lt;/code&gt; and
&lt;code&gt;poliastro.frames&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Previous changes can be checked at
&lt;a href="https://github.com/poliastro/poliastro/pull/763"&gt;#763&lt;/a&gt;. Since this is a
"critical" issue, I am redirecting all my efforts towards it to check and
adapt different modules and tests that depend on previous ones.&lt;/p&gt;
&lt;h2&gt;Last evaluations and code submissions&lt;/h2&gt;
&lt;p&gt;Previous issue and associated ones may lead to a delay for SS0 orbits to be
merged. Any work produced after August 26th will not be taken into account,
however, it does not mean to stop contributing to &lt;code&gt;poliastro&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lots of things still need to be done for the 0.14 version such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pass &lt;code&gt;frames&lt;/code&gt; in &lt;code&gt;StaticOrbitPlotter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Properly define SS barycenter and EM barycenter.&lt;/li&gt;
&lt;li&gt;Test cases against Orekit, GMAT...&lt;/li&gt;
&lt;li&gt;Implement new orbit creation methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of them require deep analysis since, again, they are critical issues.&lt;/p&gt;
&lt;p&gt;But even if GSOC ends I will be still contributing to &lt;code&gt;poliastro&lt;/code&gt; for sure. It
is not only the number of thigns I have learned since I enjoyed the project but
the people involved in it.&lt;/p&gt;</content><category term="GSOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category><category term="atmosphere"></category><category term="bodies"></category></entry><entry><title>Atmospheric models and more!</title><link href="https://www.poliastro.space/blog/2019/08/01/2019-08-01-atmospheric-models-and-more/" rel="alternate"></link><published>2019-08-01T21:00:00+02:00</published><updated>2019-08-01T21:00:00+02:00</updated><author><name>Jorge Martínez Garrido</name></author><id>tag:www.poliastro.space,2019-08-01:/blog/2019/08/01/2019-08-01-atmospheric-models-and-more/</id><summary type="html">&lt;h2&gt;Tasks for this last period...&lt;/h2&gt;
&lt;p&gt;While checking the stability of the 0.13, GSOC continues and new bugs,
implementations, and others need to be solved for the 0.14. Most of them are
related to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New frame modeling, implementation, and testing.&lt;/li&gt;
&lt;li&gt;New plotting capabilities, such us two attractors in the same plot.&lt;/li&gt;
&lt;li&gt;New orbit creation methods.&lt;/li&gt;
&lt;li&gt;Start using non-dimensional units.&lt;/li&gt;
&lt;li&gt;Different bug solving.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Issues related to frames are the most tricky ones since working with them is
not so intuitive. Plotting capabilities are directly related to frames and
therefore no major improvements are done in this field without solving something
in the previous one.&lt;/p&gt;
&lt;h2&gt;New atmospheric models&lt;/h2&gt;
&lt;p&gt;I have been trying to model and implement some famous atmospheric models for
poliastro. Drag is one of the main perturbations for LEO orbits. By making use
of Cowell's formulation we can integrate …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Tasks for this last period...&lt;/h2&gt;
&lt;p&gt;While checking the stability of the 0.13, GSOC continues and new bugs,
implementations, and others need to be solved for the 0.14. Most of them are
related to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New frame modeling, implementation, and testing.&lt;/li&gt;
&lt;li&gt;New plotting capabilities, such us two attractors in the same plot.&lt;/li&gt;
&lt;li&gt;New orbit creation methods.&lt;/li&gt;
&lt;li&gt;Start using non-dimensional units.&lt;/li&gt;
&lt;li&gt;Different bug solving.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Issues related to frames are the most tricky ones since working with them is
not so intuitive. Plotting capabilities are directly related to frames and
therefore no major improvements are done in this field without solving something
in the previous one.&lt;/p&gt;
&lt;h2&gt;New atmospheric models&lt;/h2&gt;
&lt;p&gt;I have been trying to model and implement some famous atmospheric models for
poliastro. Drag is one of the main perturbations for LEO orbits. By making use
of Cowell's formulation we can integrate the acceleration caused by this force
which is directly proportional to air density. This implies that having a good
atmospheric model is critical since it determines the drag force.&lt;/p&gt;
&lt;p&gt;Different models have been published along the years:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;U.S Standard Atmosphere 1962 and 1976&lt;/li&gt;
&lt;li&gt;Jacchia-Roberts 1971 and 1977&lt;/li&gt;
&lt;li&gt;Russian Ghost models &lt;/li&gt;
&lt;li&gt;NRLMSISE-00&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each model assumes different atmospheric conditions and factors that affect the
temperature distribution, pressure and density among others. While U.S Standard
Atmospheres take the value of the gravity at 45[deg] latitude, Jacchia solves
it no matter the location in the globe. Furthermore, it also includes solar
radiation flux.&lt;/p&gt;
&lt;h2&gt;Pericenter and units bug in poliastro.maneuver&lt;/h2&gt;
&lt;p&gt;Two different issues were found in the &lt;code&gt;poliastro.maneuver&lt;/code&gt; module: one related
with the units and others with a time of flight of maneuvers.&lt;/p&gt;
&lt;p&gt;On one hand, the issue related to the time to pericenter was that
poliastro propagated internally the orbit for both &lt;strong&gt;Hohmann&lt;/strong&gt; and &lt;strong&gt;Bielliptic&lt;/strong&gt; when
not at pericenter to solve for those maneuvers. The time it took the orbit for
being at pericenter was not taken into account and the user was not warned. This
problem was finally solved by adding this time in the Maneuver instance.&lt;/p&gt;
&lt;p&gt;On the other hand, some strange behavior of &lt;code&gt;astropy.units&lt;/code&gt; were causing that
conversions among units internally inside this module were not correct in some
cases. By forcing their simplification this was solved.&lt;/p&gt;</content><category term="GSOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category><category term="twobody"></category></entry><entry><title>Ground track plotting and Ellipsoids</title><link href="https://www.poliastro.space/blog/2019/08/01/2019-08-01-ground-track-plotting-and-ellipsoids.md/" rel="alternate"></link><published>2019-08-01T15:00:00+02:00</published><updated>2019-08-01T15:00:00+02:00</updated><author><name>Eleftheria Chatziargyriou</name></author><id>tag:www.poliastro.space,2019-08-01:/blog/2019/08/01/2019-08-01-ground-track-plotting-and-ellipsoids.md/</id><summary type="html">&lt;p&gt;The second evaluation period has come to the end and with the end of the
program drawing ever closer, I'm happy to announce that most work on 
the additional deliverables has been complete!&lt;/p&gt;
&lt;h2&gt;CZML3&lt;/h2&gt;
&lt;p&gt;I've added polylines and points (along with myriad of other dependent 
properties/types). These also marked the release of 
&lt;a href="https://pypi.org/project/czml3/#description"&gt;v0.1.3&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Ground Track Plotting&lt;/h2&gt;
&lt;p&gt;Having added the necessary CZML properties, I finally managed to add
the ground track plotter. It allows to draw both a static path and
an animated one. The coolest feature is that it automatically calculates
the path's orthographic projection, allowing you to see the satellite in
2D mode. I was also toying with the idea of allowing the users to export
gif images directly from the application, which would mean no longer relying
on external screen capturing software to create and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The second evaluation period has come to the end and with the end of the
program drawing ever closer, I'm happy to announce that most work on 
the additional deliverables has been complete!&lt;/p&gt;
&lt;h2&gt;CZML3&lt;/h2&gt;
&lt;p&gt;I've added polylines and points (along with myriad of other dependent 
properties/types). These also marked the release of 
&lt;a href="https://pypi.org/project/czml3/#description"&gt;v0.1.3&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Ground Track Plotting&lt;/h2&gt;
&lt;p&gt;Having added the necessary CZML properties, I finally managed to add
the ground track plotter. It allows to draw both a static path and
an animated one. The coolest feature is that it automatically calculates
the path's orthographic projection, allowing you to see the satellite in
2D mode. I was also toying with the idea of allowing the users to export
gif images directly from the application, which would mean no longer relying
on external screen capturing software to create and share projects.&lt;/p&gt;
&lt;h2&gt;Speroid Location&lt;/h2&gt;
&lt;p&gt;I refactored the class and got it merged which makes it technically possible
to determine an orbit's pass given the spheroid location. I'm ashamed to admit,
the pass predictor is the only area I haven't make any tangible progress in in 
the last  couple of weeks, so that definetely remains one of my main goals.&lt;/p&gt;
&lt;h2&gt;Ellipsoids, ellipsoids, ellipsoids...&lt;/h2&gt;
&lt;p&gt;The bug that has bugging me the most has been finally resolved! The cesium 
application now correctly renders any arbitrary ellipsoid. My last task is 
to create the rotation matrix given the attractor's average rotational velocity,
converting the system into ICRF.&lt;/p&gt;
&lt;h2&gt;What's Next?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Start working on some Jupyter notebook tutorials&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hopefully be down with the closed-form pass peredictor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use ICRF frames in the app&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="GSCOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category></entry><entry><title>New propagators</title><link href="https://www.poliastro.space/blog/2019/07/16/2019-07-16-new-propagators/" rel="alternate"></link><published>2019-07-16T09:00:00+02:00</published><updated>2019-07-16T09:00:00+02:00</updated><author><name>Jorge Martínez Garrido</name></author><id>tag:www.poliastro.space,2019-07-16:/blog/2019/07/16/2019-07-16-new-propagators/</id><summary type="html">&lt;h2&gt;What are propagators and why do we care about them?&lt;/h2&gt;
&lt;p&gt;One of the most common problems in astrodynamics and orbital mechanics is that
we want to know where a body will be at a given position along its orbit for a
given time. It is possible to integrate by hard the two-body equation and then
apply some boundary conditions. However, this last option is just insane and
would take several hours or days to be done by a human.&lt;/p&gt;
&lt;p&gt;There is a better way to get the position as a function of time or &lt;code&gt;propagate&lt;/code&gt; an
orbit. Johannes Kepler's contributions to the astrodynamics and orbital
mechanics field were really important and can be summarized here, in the
so-called Kepler's Laws:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Planets' orbits follow an elliptical path around the Sun, which is located in one of the focus.&lt;/li&gt;
&lt;li&gt;Planets cover equal …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;What are propagators and why do we care about them?&lt;/h2&gt;
&lt;p&gt;One of the most common problems in astrodynamics and orbital mechanics is that
we want to know where a body will be at a given position along its orbit for a
given time. It is possible to integrate by hard the two-body equation and then
apply some boundary conditions. However, this last option is just insane and
would take several hours or days to be done by a human.&lt;/p&gt;
&lt;p&gt;There is a better way to get the position as a function of time or &lt;code&gt;propagate&lt;/code&gt; an
orbit. Johannes Kepler's contributions to the astrodynamics and orbital
mechanics field were really important and can be summarized here, in the
so-called Kepler's Laws:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Planets' orbits follow an elliptical path around the Sun, which is located in one of the focus.&lt;/li&gt;
&lt;li&gt;Planets cover equal areas for given equal amounts of time.&lt;/li&gt;
&lt;li&gt;The square of the period is proportional to the cube of the semi-major axis.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although Kepler applied previous laws to planets and they lead to good
approximations, they just can be applied when one of the masses is really small
compared to the other. Otherwise, the two masses will orbit around their common
center of mass, breaking this way the first law.&lt;/p&gt;
&lt;p&gt;But one of the greatest relations that Kepler gave us was his famous Kepler's
Equation:&lt;/p&gt;
&lt;p&gt;$$M = E - \sin(E)$$&lt;/p&gt;
&lt;p&gt;This equation can be rewrited in the following form:
$$ M - M_{0} = n(t - t_{0}) = E - \sin(E) - E_{0} + \sin(E_{0}) $$&lt;/p&gt;
&lt;p&gt;Where $$n = \sqrt{\frac{a^{3}}{\mu}}$$ is usually known as mean motion. Variables
M and E are respectively mean anomaly and eccentricity anomaly. This last one
can be realted to the true anomaly by:&lt;/p&gt;
&lt;p&gt;$$ \cos(E) = \frac{e + \cos(\nu)}{1 + e\cos({\nu})} $$&lt;/p&gt;
&lt;p&gt;Notice that given a certain amount of time, if we want to solve for the
position (solving for true anomaly) we must solve first for E and the previous
equation has not an analytical solution due to a sinusoidal function.&lt;/p&gt;
&lt;p&gt;That fact makes this expression one of the most interesting topics in
astrodynamics: how to develop equivalent expressions, algorithms, procedures to
solve efficiently the Kepler's equation. Several algorithms have been raised
during the last years and now can be found in poliastro:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mean_motion [already implemented]: propagates step by step and covers all geometric shapes.&lt;/li&gt;
&lt;li&gt;Kepler [already implemented]: propagates making use of universal formulation.&lt;/li&gt;
&lt;li&gt;mikkola [new]: applies a cubic approximation.&lt;/li&gt;
&lt;li&gt;markley [new]: fifth-order refinement of Mikkola's solution.&lt;/li&gt;
&lt;li&gt;pimienta [new]: 15th order polynomial approximation.&lt;/li&gt;
&lt;li&gt;gooding [new]: third-order polynomial approximation.&lt;/li&gt;
&lt;li&gt;danby [new]: fourth order convergence after initial guess.&lt;/li&gt;
&lt;li&gt;cowell [already implemented]: direct two-body equation integration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Which one is faster?&lt;/h3&gt;
&lt;p&gt;All the previous Kepler solvers are numerical methods. Numerical methods are
based on different mathematical concepts (derivatives, Taylor expansions...)
and sometimes they do not cover specific cases where singularities appear. For
these reason there is no such a great or perfect numerical method that works
well no matter the function to evaluate.&lt;/p&gt;
&lt;p&gt;By having all this propagators, we are able now to compare which one is better
against different conditions: long time propagation, near equatorial orbits,
near parabolic orbits...&lt;/p&gt;
&lt;h2&gt;Version 0.13&lt;/h2&gt;
&lt;p&gt;The release of poliastro 0.13 is getting closer and different checks need to be
done. This implies no more great features or implementations during the next
days until the version has been released. Some milestones where moved to version
0.14 due to their complexity, most of them related to frames. &lt;/p&gt;
&lt;p&gt;Is not rocket science, it is computer rocket science in fact! Modelling physical
concepts and implement them inside a computer is amazing but requires a good
approach and practices from the software engineering perspective, so all the
different algorithms work fast and be reusable.&lt;/p&gt;</content><category term="GSOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category><category term="kepler"></category></entry><entry><title>Moving forward with the Cesium application</title><link href="https://www.poliastro.space/blog/2019/07/15/2019-07-15-moving-forward-with-the-cesium-application/" rel="alternate"></link><published>2019-07-15T17:50:00+02:00</published><updated>2019-07-15T17:50:00+02:00</updated><author><name>Eleftheria Chatziargyriou</name></author><id>tag:www.poliastro.space,2019-07-15:/blog/2019/07/15/2019-07-15-moving-forward-with-the-cesium-application/</id><summary type="html">&lt;p&gt;I feel like in the last couple of weeks I got to work a little in several aspects
of the project. While this didn't allow me to focus on a single feature, it allowed
me to make progress in various different areas.&lt;/p&gt;
&lt;h2&gt;Bug resolving and 2D mode&lt;/h2&gt;
&lt;p&gt;First and foremost, I got rid of a particularly frustrating bug in the application.
Certain javascript events (such as the one that allows the inertial view), where tied 
to a single &lt;code&gt;Viewer&lt;/code&gt; and thus wouldn't trigger when the &lt;code&gt;Viewer&lt;/code&gt; was destroyed 
(which is the case when, for example, loading the data from the file). I also made a 
few minor changes in the code and introduced the option to set the Viewer mode to 2D.
This isn't any useful as of now, but it will be with the new feature I'm planning to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I feel like in the last couple of weeks I got to work a little in several aspects
of the project. While this didn't allow me to focus on a single feature, it allowed
me to make progress in various different areas.&lt;/p&gt;
&lt;h2&gt;Bug resolving and 2D mode&lt;/h2&gt;
&lt;p&gt;First and foremost, I got rid of a particularly frustrating bug in the application.
Certain javascript events (such as the one that allows the inertial view), where tied 
to a single &lt;code&gt;Viewer&lt;/code&gt; and thus wouldn't trigger when the &lt;code&gt;Viewer&lt;/code&gt; was destroyed 
(which is the case when, for example, loading the data from the file). I also made a 
few minor changes in the code and introduced the option to set the Viewer mode to 2D.
This isn't any useful as of now, but it will be with the new feature I'm planning to 
introduce, which brings me to...&lt;/p&gt;
&lt;h2&gt;Groundtrack plotting&lt;/h2&gt;
&lt;p&gt;Cesium allows users to define animated polyline paths, allowing us to visualize an orbit's 
groundtrack. What is even more exciting, is that Cesium automatically projects the path when
on 2D scene mode, allowing us to see the orbit's groundtrack even on orthographic projection.&lt;/p&gt;
&lt;p&gt;I have most of the work laid out and I'm planning to open a pull request next week. Cesium
has a problem when dealing with particularly long paths and in that case the path needs to be 
broken down and dynamically loaded.&lt;/p&gt;
&lt;h2&gt;Satellite pass predictor&lt;/h2&gt;
&lt;p&gt;I made an initial commit for the pass predictor based on Escobal's paper and I also started
working on a helper class to work on the Ellipsoidal coordinate system (altough technically,
the class is restricted to spheroids, since they are easier to work with and planetary bodies
can be accurately approximated by them). It offers methods for converting coordinates from the 
ellipsoidal to the Cartesian system and vice versa and determining whether a point is visible to
the &lt;code&gt;SpheroidLocation&lt;/code&gt;. Additionally, it is also equiped with a few other helpful math functions
(e.g. determining the plane tangential to the point on the spheroid).&lt;/p&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;In the next couple of weeks, I'm planning to finally finish the pass predictor and at least complete
the first commit of the groundtrack plotter.&lt;/p&gt;</content><category term="GSCOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category></entry><entry><title>Converting to CZML and next steps</title><link href="https://www.poliastro.space/blog/2019/06/30/2019-06-30-converting-to-czml-and-next-steps/" rel="alternate"></link><published>2019-06-30T11:30:00+02:00</published><updated>2019-06-30T11:30:00+02:00</updated><author><name>Eleftheria Chatziargyriou</name></author><id>tag:www.poliastro.space,2019-06-30:/blog/2019/06/30/2019-06-30-converting-to-czml-and-next-steps/</id><summary type="html">&lt;p&gt;So the first phase of GSoC is over and with it, it's time to reflect what
has been achieved in the last couple of months.&lt;/p&gt;
&lt;h1&gt;CZML3&lt;/h1&gt;
&lt;p&gt;As I mentioned in the 
&lt;a href="https://blog.poliastro.space/2019/06/13/2019-06-13-communication-satellites-and-refactoring/"&gt;last blogpost&lt;/a&gt;
this is a very useful &lt;a href="https://github.com/poliastro/czml3"&gt;library&lt;/a&gt; created by juanlu. After a
few patches, the library now supports most CZML properties and - as far as I can tell - this is 
the only currently mantained Python library for creating CZML packets.&lt;/p&gt;
&lt;h1&gt;CZML Extractor&lt;/h1&gt;
&lt;p&gt;This is the first feature I've started to work on and while it is still far from complete,
I'm happy to say that it is now usable. &lt;/p&gt;
&lt;p&gt;At first, the czml document was represented by a nested dictionary and then converted to 
valid JSON format. This worked ok and I did write a function which made manipulating the
dictionary a tad more intuitive, but it was …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So the first phase of GSoC is over and with it, it's time to reflect what
has been achieved in the last couple of months.&lt;/p&gt;
&lt;h1&gt;CZML3&lt;/h1&gt;
&lt;p&gt;As I mentioned in the 
&lt;a href="https://blog.poliastro.space/2019/06/13/2019-06-13-communication-satellites-and-refactoring/"&gt;last blogpost&lt;/a&gt;
this is a very useful &lt;a href="https://github.com/poliastro/czml3"&gt;library&lt;/a&gt; created by juanlu. After a
few patches, the library now supports most CZML properties and - as far as I can tell - this is 
the only currently mantained Python library for creating CZML packets.&lt;/p&gt;
&lt;h1&gt;CZML Extractor&lt;/h1&gt;
&lt;p&gt;This is the first feature I've started to work on and while it is still far from complete,
I'm happy to say that it is now usable. &lt;/p&gt;
&lt;p&gt;At first, the czml document was represented by a nested dictionary and then converted to 
valid JSON format. This worked ok and I did write a function which made manipulating the
dictionary a tad more intuitive, but it was overall a very ad hoc solution and made the
code hard to follow. What I attempted to do was to completely refactor the extractor
to rely on czml3 (you can find the related PR &lt;a href="https://github.com/poliastro/poliastro/pull/711"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Merging the PR and getting everything &lt;em&gt;just&lt;/em&gt; right gave me far more trouble than I would've expected
and there are still a few more things that need to be adressed. Part of the problem was that czml3
doesn't support Python 3.5 (since it doesn't have any way to implement ordered dictionaries without 
relying on external libaries or creating your own data structure), so a simple Import Error could 
cause the whole thing to fail. On the flipside, I learned the importance of exhaustive testing and
paying attention to versioning.&lt;/p&gt;
&lt;h1&gt;Cesium application&lt;/h1&gt;
&lt;p&gt;Of course, the custom data isn't really useful in and of itself so I also created an 
&lt;a href="https://github.com/poliastro/cesium-app"&gt;application&lt;/a&gt; (which you can run both locally and on
&lt;a href="https://cesiumjs.org/Cesium/Build/Apps/Sandcastle/"&gt;Sandcastle&lt;/a&gt;) to visualize the data. &lt;/p&gt;
&lt;h1&gt;What's next?&lt;/h1&gt;
&lt;p&gt;As I mentioned before, one of the features I was meaning to add was the determination of a satellite's pass.
The difficulty lies in solving the problem efficiently and most of the solutions I've thought of or read were either
too slow or too inaccurate and often making earth-specific assumptions which wouldn't help with the general case.&lt;/p&gt;
&lt;p&gt;However, my mentor recently pointed my to a very interesting &lt;a href="https://arc.aiaa.org/doi/abs/10.2514/3.2057"&gt;paper&lt;/a&gt; which
I'm currently going through and trying to thing of the next step.&lt;/p&gt;
&lt;p&gt;GSoC has been a great experience so far and I'm looking forward to the next coding phase!&lt;/p&gt;</content><category term="GSCOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category></entry><entry><title>Getting done for next release</title><link href="https://www.poliastro.space/blog/2019/06/29/2019-06-29-getting-done-for-next-release/" rel="alternate"></link><published>2019-06-29T07:00:00+02:00</published><updated>2019-06-29T07:00:00+02:00</updated><author><name>Jorge Martínez Garrido</name></author><id>tag:www.poliastro.space,2019-06-29:/blog/2019/06/29/2019-06-29-getting-done-for-next-release/</id><summary type="html">&lt;h2&gt;Version 0.13 is getting closer&lt;/h2&gt;
&lt;p&gt;Version 0.13 is expected to be tagged in about a month. As any other release,
it includes new features such as a new method in the &lt;code&gt;Orbit&lt;/code&gt; class called
&lt;code&gt;change_attractor&lt;/code&gt; or the &lt;code&gt;trail&lt;/code&gt; parameter in &lt;code&gt;StaticOrbitPlotter&lt;/code&gt;. However,
this release will also include really important bug fixes such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minor issues related to Lambert's problem.&lt;/li&gt;
&lt;li&gt;Propagator's are supposed not to hang out anymore due to robust solutions and propagation methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that my final exams ended I am completely free to work in poliastro and
direct all my efforts to the software. I want to close issues
&lt;a href="https://github.com/poliastro/poliastro/issues/495"&gt;#495&lt;/a&gt; and
&lt;a href="https://github.com/poliastro/poliastro/issues/475"&gt;#475&lt;/a&gt;  in the next days since they are previously commented bugs.&lt;/p&gt;
&lt;h3&gt;Propagator methods in the twobody problem&lt;/h3&gt;
&lt;p&gt;Kepler's equation (KE) allows us to solve either for the time at a given
position or the position …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Version 0.13 is getting closer&lt;/h2&gt;
&lt;p&gt;Version 0.13 is expected to be tagged in about a month. As any other release,
it includes new features such as a new method in the &lt;code&gt;Orbit&lt;/code&gt; class called
&lt;code&gt;change_attractor&lt;/code&gt; or the &lt;code&gt;trail&lt;/code&gt; parameter in &lt;code&gt;StaticOrbitPlotter&lt;/code&gt;. However,
this release will also include really important bug fixes such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minor issues related to Lambert's problem.&lt;/li&gt;
&lt;li&gt;Propagator's are supposed not to hang out anymore due to robust solutions and propagation methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that my final exams ended I am completely free to work in poliastro and
direct all my efforts to the software. I want to close issues
&lt;a href="https://github.com/poliastro/poliastro/issues/495"&gt;#495&lt;/a&gt; and
&lt;a href="https://github.com/poliastro/poliastro/issues/475"&gt;#475&lt;/a&gt;  in the next days since they are previously commented bugs.&lt;/p&gt;
&lt;h3&gt;Propagator methods in the twobody problem&lt;/h3&gt;
&lt;p&gt;Kepler's equation (KE) allows us to solve either for the time at a given
position or the position for a known time. Although it is a very short
equation, there have been lots of numerical methods along with history since it
has not an analytical solution.&lt;/p&gt;
&lt;p&gt;The most famous numerical method related to root finding is probably the so
called &lt;a href="https://es.wikipedia.org/wiki/M%C3%A9todo_de_Newton"&gt;Newton-Raphson
method&lt;/a&gt;. By making use of
the function derivative it is possible to reach with great accuracy and speed
the solution to the equation. Other methods also use higher order derivatives
to achieve a faster connvergence. Although the Newton-Raphson methods works
really well most of the cases, it is possible that sometimes the derivative at
some point of the evaluated function becomes zero, making to diverge the
numerical method.&lt;/p&gt;
&lt;p&gt;Along the years, different approaches have been developed to solve this famous
equation: conversion to a third order polynomial, higher order derivatives
iterative methods, series expansion... Most of the different papers available
claim convergence regarding the speed of computation, somehting that is not
&lt;em&gt;fair&lt;/em&gt; if we consider that CPUs computational power evolve as years pass.
Numerical methods should be compared fixing a relative error and number of
iterations. But remember: there is not a perfect numerical methods. While for
examples the &lt;em&gt;bisection&lt;/em&gt; method always converges it does really slowly, on the
other hand, &lt;em&gt;Newton-Rapshon&lt;/em&gt; based methods have a great rate convergence but
are subjected to zero derivative singularities.&lt;/p&gt;
&lt;p&gt;After a huge research on the topic, the most interesting algorithms from my
point of view are the following ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dx.doi.org/10.1007/BF00049384"&gt;Fukushima's work on KE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doi.org/10.1051/0004-6361/201833563"&gt;Solving the KE with SDG-CODE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both are universal, meaning that no matter the geometrical nature of the orbit
we can solve the KE. They claim low interations with huge numerical precission
onli limited by mantissa errors (floating point precission).&lt;/p&gt;
&lt;h3&gt;Implementation of previous methods&lt;/h3&gt;
&lt;p&gt;As said before, there is no such a perfect numerical solver for the KE. I would
like to implement not only the previous cited ones, but also more of them and
compare their performance on the near-parabolic regime.&lt;/p&gt;
&lt;p&gt;Fukushima's work also includes some Fortran77 codes and his research on the KE
topic is huge. It looks really promising. On the other hand, the SDG group at
UPM may be a really good contact source if I got stucked with the
implementation of the algorithm.&lt;/p&gt;
&lt;p&gt;Last week I already added a new one that was called by me as
&lt;a href="https://gist.github.com/jorgepiloto/8d572ea4bb50c9ffed93c56dfaa81160"&gt;&lt;em&gt;kepler_improved&lt;/em&gt;&lt;/a&gt;
and although it is a non-iterative method it has a great accuracy. But after
some tests, I realized that it was diverging for eccentricities near 0.999. I
will contact with the &lt;a href="https://juliaastro.github.io/"&gt;Julia Astro&lt;/a&gt; people to
compare the results.&lt;/p&gt;
&lt;p&gt;Stay tuned!🚀 &lt;/p&gt;</content><category term="GSOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category></entry><entry><title>Communication satellites and refactoring</title><link href="https://www.poliastro.space/blog/2019/06/13/2019-06-13-communication-satellites-and-refactoring/" rel="alternate"></link><published>2019-06-13T21:00:00+02:00</published><updated>2019-06-13T21:00:00+02:00</updated><author><name>Eleftheria Chatziargyriou</name></author><id>tag:www.poliastro.space,2019-06-13:/blog/2019/06/13/2019-06-13-communication-satellites-and-refactoring/</id><summary type="html">&lt;p&gt;Those couple of weeks were spent mainly on setting future milestones
and improving the quality of the code. In a way, Tom Cargill's famous
aphorism came to my mind:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The first 90 percent of the code accounts for the first 90 percent 
of the development time. The remaining 10 percent of the code accounts
for the other 90 percent of the development time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Writing stuff that "just works" is relatively easy. But when programming,
you always have to keep track of myriad variables including but not limited
to: maintanability, integration and readability. &lt;/p&gt;
&lt;h1&gt;CZML3&lt;/h1&gt;
&lt;p&gt;My mentor, Juanlu, wrote a fully-fledged &lt;a href="https://github.com/poliastro/czml3"&gt;library&lt;/a&gt;
for composing czml packets. While it's still in the early stages of development,
I  would urge anyone interested to check it out. I'm currently trying to refactor
the czml core, so it utilizes the library instead of the current approach …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Those couple of weeks were spent mainly on setting future milestones
and improving the quality of the code. In a way, Tom Cargill's famous
aphorism came to my mind:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The first 90 percent of the code accounts for the first 90 percent 
of the development time. The remaining 10 percent of the code accounts
for the other 90 percent of the development time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Writing stuff that "just works" is relatively easy. But when programming,
you always have to keep track of myriad variables including but not limited
to: maintanability, integration and readability. &lt;/p&gt;
&lt;h1&gt;CZML3&lt;/h1&gt;
&lt;p&gt;My mentor, Juanlu, wrote a fully-fledged &lt;a href="https://github.com/poliastro/czml3"&gt;library&lt;/a&gt;
for composing czml packets. While it's still in the early stages of development,
I  would urge anyone interested to check it out. I'm currently trying to refactor
the czml core, so it utilizes the library instead of the current approach (packets
are represented as a nested dictionary which is then converted to JSON).&lt;/p&gt;
&lt;h1&gt;Changes to the javascript application&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added camera controls for easier navigation (only rotation left to be added)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added a file browser, so that any czml data file can be added directly from the
browser. This was one of my top priorities since before that, the only way to import
the files was by copy-pasting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wrote a README explaining how to run the application. Once I'm done with the basic 
refactoring, I'll also start adding documentation  and tutorials about writing czml 
packets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Communication satellites&lt;/h1&gt;
&lt;p&gt;As mentioned in the last blogpost, I started working on visualizing ground stations
and communication satellites. This opened up a whole new can of worms. For example,
early in the process, we decided that it would be better for groundstation's coordinates
to be expressed on the ellipsoidal coordinate system. However, this seemed to result in
accuracy errors where a given point would be slightly off the ellipsoid, which would in
turn give inaccurate results on the visibility predictor. Some of the code is merged and 
at least a PR containing the basic implementation is pending, but I'll get back to it
after refactoring the core.&lt;/p&gt;</content><category term="GSCOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category></entry><entry><title>Lambert maneuvers and trails in plots</title><link href="https://www.poliastro.space/blog/2019/06/13/2019-06-13-Lambert-maneuvers-and-trails-in-plots/" rel="alternate"></link><published>2019-06-13T09:00:00+02:00</published><updated>2019-06-13T09:00:00+02:00</updated><author><name>Jorge Martínez Garrido</name></author><id>tag:www.poliastro.space,2019-06-13:/blog/2019/06/13/2019-06-13-Lambert-maneuvers-and-trails-in-plots/</id><summary type="html">&lt;h2&gt;What's new?&lt;/h2&gt;
&lt;p&gt;Three weeks have passed since the coding phase began and new features have been
added to the software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lambert is now a &lt;code&gt;Maneuver&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;A trail keyword in &lt;code&gt;StaticOrbitPlotter&lt;/code&gt; for showing orbits' trails.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lambert just needs now two orbits!&lt;/h3&gt;
&lt;p&gt;Although the raw algorithms are kept under the module &lt;code&gt;poliastro.iod&lt;/code&gt;, it is 
possible now to simplify the process of solving this famous astrodynamics 
problem by making use of the &lt;code&gt;poliastro.maneuver&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;Imagine that we want to solve the classical problem ongoing from Earth to Mars
for a trip of 600 days duration. Let us compare  before and after
&lt;code&gt;Maneuver.lambert&lt;/code&gt; implementations:&lt;/p&gt;
&lt;p&gt;With 0.12 version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;astropy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;units&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;astropy.time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.bodies&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Earth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sun&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.iod.izzo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;lambert&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.twobody&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;

&lt;span class="n"&gt;LAUNCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;What's new?&lt;/h2&gt;
&lt;p&gt;Three weeks have passed since the coding phase began and new features have been
added to the software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lambert is now a &lt;code&gt;Maneuver&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;A trail keyword in &lt;code&gt;StaticOrbitPlotter&lt;/code&gt; for showing orbits' trails.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lambert just needs now two orbits!&lt;/h3&gt;
&lt;p&gt;Although the raw algorithms are kept under the module &lt;code&gt;poliastro.iod&lt;/code&gt;, it is 
possible now to simplify the process of solving this famous astrodynamics 
problem by making use of the &lt;code&gt;poliastro.maneuver&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;Imagine that we want to solve the classical problem ongoing from Earth to Mars
for a trip of 600 days duration. Let us compare  before and after
&lt;code&gt;Maneuver.lambert&lt;/code&gt; implementations:&lt;/p&gt;
&lt;p&gt;With 0.12 version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;astropy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;units&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;astropy.time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.bodies&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Earth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sun&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.iod.izzo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;lambert&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.twobody&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;

&lt;span class="n"&gt;LAUNCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ARRIVAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LAUNCH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;span class="n"&gt;TOF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ARRIVAL&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;LAUNCH&lt;/span&gt;

&lt;span class="n"&gt;ss_earth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_body_ephem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Earth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LAUNCH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ss_mars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_body_ephem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ARRIVAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dv_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lambert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sun&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ss_earth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ss_mars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tof&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ss_trans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_vectors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ss_earth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ss_target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_vectors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ss_mars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dv_b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that we work with a &lt;em&gt;raw Lambert's algorithm&lt;/em&gt;. Therefore, we 
needed to pass the gravitational parameter, initial position,
final one and finally the time of flight. After that the transfer
and target orbits are created.&lt;/p&gt;
&lt;p&gt;However with the 0.13 version this process will be not only
simplified but more intuitive:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;astropy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;units&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;astropy.time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.bodies&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Earth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mars&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.maneuver&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Maneuver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.twobody&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;

&lt;span class="n"&gt;LAUNCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ARRIVAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LAUNCH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;

&lt;span class="n"&gt;ss_earth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_body_ephem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Earth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LAUNCH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ss_mars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_body_ephem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ARRIVAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;man_lambert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Maneuver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lambert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ss_earth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ss_mars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ss_trans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ss_target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ss_earth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_maneuver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;man_lambert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;intermediate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Although we have the same number of imports, the fact that we have a &lt;code&gt;Maneuver&lt;/code&gt;
instance, as a result, is very powerful. It not only contains all the different
impulses but also can be applied to the departure orbit. This means that we do
not care anymore about working with vectors and times but with Orbit instances,
which are the core of poliastro.&lt;/p&gt;
&lt;h3&gt;Trails can now be plotted&lt;/h3&gt;
&lt;p&gt;When it comes to plotting, it is very difficult to recreate movement on static
images. And if we also add the fact that representing a 3D trajectory on a
two-dimensions plot sometimes can lead to confusion, things get even worst.&lt;/p&gt;
&lt;p&gt;For that, and with a lot of Juanlu's help, we finally implemented a trail option
that fades any orbit trajectory, giving the user the feeling that that object
was moving along the drawn path when the plot was made. It works with the 
&lt;code&gt;StaticOrbitPlotter&lt;/code&gt; class just by passing the argument trail=True:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;poliastro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bodies&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Earth&lt;/span&gt;
&lt;span class="n"&gt;froms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plotting&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;StaticOrbitPlotter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.twobody&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;                                             

&lt;span class="n"&gt;ss_earth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_body_ephem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Earth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plotter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StaticOrbitPlotter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plotter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ss_earth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Faded Orbit" src="https://www.poliastro.space/images/faded_orbit.png"&gt;&lt;/p&gt;
&lt;h2&gt;Astropy 3.2&lt;/h2&gt;
&lt;p&gt;Astropy 3.2 was tagged and some poliastro tests were failing. Most of the are
related with astroquery, since the JPL database was updated.&lt;/p&gt;
&lt;p&gt;In particular, some tiny precission errors appeared but they were solved easily
after deleting the astropy's caché file. However, something that needs a further
inspection is the last failing test related to the new
&lt;code&gt;GeocentricSolarEcliptic&lt;/code&gt;. A deep inspection on Astropy's changelog is needed
on solving this.&lt;/p&gt;
&lt;h2&gt;For the next weeks&lt;/h2&gt;
&lt;p&gt;For the next weeks, I am planning to solve the previous issue and updating the
user's guide to the new Lambert maneuver. Also, since working on this topic, a
multi-revolution example will be added to the documentation and minor errors
in Lambert's algorithms need further inspection.&lt;/p&gt;
&lt;p&gt;However, Gauss' algorithm is still something that frustrates me. It is supposed
that it will properly propagate any orbit no matter it's nature and therefore
may be the solution to near-parabolic orbits. But for the moment, I have not
succeeded in implementing this algorithm. I hope it to be ready for the end of
this month!&lt;/p&gt;</content><category term="GSOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category></entry><entry><title>Let the coding begin</title><link href="https://www.poliastro.space/blog/2019/05/29/2019-05-29-let-the-coding-begin/" rel="alternate"></link><published>2019-05-29T23:30:00+02:00</published><updated>2019-05-29T23:30:00+02:00</updated><author><name>Eleftheria Chatziargyriou</name></author><id>tag:www.poliastro.space,2019-05-29:/blog/2019/05/29/2019-05-29-let-the-coding-begin/</id><summary type="html">&lt;h1&gt;Let the coding begin&lt;/h1&gt;
&lt;p&gt;So the bonding period is over, which means that the coding phase has officially begun.
I've already worked on some of the key features I'd like to add since my examination
period is around the corner. Hopefully, this won't slow me down and I'll keep up with 
the workload.&lt;/p&gt;
&lt;h1&gt;The work so far&lt;/h1&gt;
&lt;p&gt;I've worked on the main part of the project, which was to connect poliastro to the
visualization capabilities offered by the Cesium API. There is already the possibility
of adding orbits and defining custom attractors, along with various visual customizations.
As exciting as this is, there are still way more things that could be added to give life to the
project, rendering it more useful and interesting.&lt;/p&gt;
&lt;h1&gt;Communications satellites&lt;/h1&gt;
&lt;p&gt;In the past days, I became increasingly interested in adding communication satellites
and visualizing …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Let the coding begin&lt;/h1&gt;
&lt;p&gt;So the bonding period is over, which means that the coding phase has officially begun.
I've already worked on some of the key features I'd like to add since my examination
period is around the corner. Hopefully, this won't slow me down and I'll keep up with 
the workload.&lt;/p&gt;
&lt;h1&gt;The work so far&lt;/h1&gt;
&lt;p&gt;I've worked on the main part of the project, which was to connect poliastro to the
visualization capabilities offered by the Cesium API. There is already the possibility
of adding orbits and defining custom attractors, along with various visual customizations.
As exciting as this is, there are still way more things that could be added to give life to the
project, rendering it more useful and interesting.&lt;/p&gt;
&lt;h1&gt;Communications satellites&lt;/h1&gt;
&lt;p&gt;In the past days, I became increasingly interested in adding communication satellites
and visualizing their line of sight. I added a bit of extra code to define ground
stations anywhere on the surface of the attractor.&lt;/p&gt;
&lt;p&gt;With the attractor defined, we need to calculate the time the satellite is visible
to the ground station. My initial approach was pretty straight-forward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Take N sample points of the trajectory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Emit a ray from said point to the ground station.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the ray intersects the ellipsoid at any point other than the ground station discard
it, otherwise conclude that the satellite is visible to the station at the given
time stamp.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Despite working fine, this approach posed two main problems: The calculated pass is
dependent on the number of sample points and the algorithm itself isn't really efficient.&lt;/p&gt;
&lt;p&gt;What I thought next was to define the plane that is tangential to the ellipse at the coordinates
of the ground station. After that, we could easily find the point where the plane and the trajectory
(granted it has constant eccentricity) intersect. Now we'd have the exact point where the satellite
became visible, but we still needed the respective timestamp. This was the point I became stuck and
had to ask my mentor for ideas on how to move on. Unfortunately, the answer is that there is no single
closed formula that can be used to easily calculate the starting and ending epochs. The problem needs
to be reformulated mathematically and solved by known iterative approximation methods.&lt;/p&gt;
&lt;h1&gt;What's next&lt;/h1&gt;
&lt;p&gt;By the end of the first phase, I'm planning to have a more-or-less working pass predictor integrated
into poliastro. I'd also like to work some more on documentation, by adding a few tutorials to make
the project more accessible to regular users.&lt;/p&gt;</content><category term="GSCOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category></entry><entry><title>Coding phase starts!</title><link href="https://www.poliastro.space/blog/2019/05/27/2019-05-27-coding-phase-starts/" rel="alternate"></link><published>2019-05-27T11:30:00+02:00</published><updated>2019-05-27T11:30:00+02:00</updated><author><name>Jorge Martínez Garrido</name></author><id>tag:www.poliastro.space,2019-05-27:/blog/2019/05/27/2019-05-27-coding-phase-starts/</id><summary type="html">&lt;h2&gt;The End of the bonding period&lt;/h2&gt;
&lt;p&gt;Today bonding period ends for all students selected at GSoC'19. The aim of this
period was to learn more about your project community: get in touch with
mentors, other developers and their future ideas on the software...&lt;/p&gt;
&lt;p&gt;As I said in my last post, I started contributing to poliastro several months
ago, even before GSOC was announced. Therefore, and since I am taking my final
exams, all my efforts were towards passing them.&lt;/p&gt;
&lt;p&gt;But today the coding phase starts! That means we all should start working on
our proposal features.&lt;/p&gt;
&lt;h2&gt;The coding phase at poliastro&lt;/h2&gt;
&lt;p&gt;The release of poliastro version 0.13 is getting closer. During this first part
of the coding phase, I am planning to solve for different issues, most of them
related to frames, &lt;a href="https://github.com/poliastro/poliastro/milestone/14"&gt;check out milestones 0.13&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Frames are …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The End of the bonding period&lt;/h2&gt;
&lt;p&gt;Today bonding period ends for all students selected at GSoC'19. The aim of this
period was to learn more about your project community: get in touch with
mentors, other developers and their future ideas on the software...&lt;/p&gt;
&lt;p&gt;As I said in my last post, I started contributing to poliastro several months
ago, even before GSOC was announced. Therefore, and since I am taking my final
exams, all my efforts were towards passing them.&lt;/p&gt;
&lt;p&gt;But today the coding phase starts! That means we all should start working on
our proposal features.&lt;/p&gt;
&lt;h2&gt;The coding phase at poliastro&lt;/h2&gt;
&lt;p&gt;The release of poliastro version 0.13 is getting closer. During this first part
of the coding phase, I am planning to solve for different issues, most of them
related to frames, &lt;a href="https://github.com/poliastro/poliastro/milestone/14"&gt;check out milestones 0.13&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Frames are really important: they enable to define where we are measuring from.
It should be easy to use them but also to define frames around custom bodies.
One solution as stated in
&lt;a href="https://github.com/poliastro/poliastro/wiki/Orbits-and-reference-frames#proposed-steps"&gt;Wiki&lt;/a&gt;
is, no matter which frame is defined for each body, always work with a common one
internally at poliastro.&lt;/p&gt;
&lt;p&gt;I will need to ask Juanlu and find the best approach on how to solve this
problem. When solved, I am sure poliastro plotting capabilities will increase. 
For example, plotting different bodies with different attractors in the same
figure.&lt;/p&gt;
&lt;p&gt;Previous issues may be followed by defining Solar System Barycenter so more
accurate solutions could be worked by poliastro. But clearly, frame issues are
the most important thing for the moment.&lt;/p&gt;
&lt;h2&gt;Hands on Gauss Algorithm&lt;/h2&gt;
&lt;p&gt;Some time ago I found great mathematician Gauss developed in his "Theoria motus
corporum coelestium in sectionibus conicis Solem ambientium" a way to transform
Kepler's algorithm into a third order polynomial. This led to an amazing fast
convergence when solving near parabolic orbits.&lt;/p&gt;
&lt;p&gt;On Battin 1999 and improved Gauss algorithm is explained. However after several
hours of coding and debugging I have not been able to find why it does not
converge to the expected solution. I will come back to it after some time and
for sure make a post about this algorithm, because it is amazing how Gauss
was able to find a solution just by using convergent series!&lt;/p&gt;</content><category term="GSOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category></entry><entry><title>The beginning of GSoC</title><link href="https://www.poliastro.space/blog/2019/05/13/2019-05-10-poliastro-gsoc-eleftheria/" rel="alternate"></link><published>2019-05-13T20:30:00+02:00</published><updated>2019-05-13T20:30:00+02:00</updated><author><name>Eleftheria Chatziargyriou</name></author><id>tag:www.poliastro.space,2019-05-13:/blog/2019/05/13/2019-05-10-poliastro-gsoc-eleftheria/</id><summary type="html">&lt;p&gt;Hello everyone, I'm Eleftheria and this summer I'll be working with poliastro 
under Open Astronomy as part of GSoC 2019. I'm hoping this blog will prove to 
be interesting to those who are interested in poliastro or simply a source of 
inspiration to those looking for a way to get their feet wet with open source.&lt;/p&gt;
&lt;h1&gt;The beginning of a journey&lt;/h1&gt;
&lt;p&gt;After forking poliastro, I immediately dived in and tried to make sense of the
codebase. Fortunately, poliastro is extensively 
&lt;a href="https://docs.poliastro.space/en/stable/"&gt;documented&lt;/a&gt; so the learning curve wasn't
as steep as I expected. After getting familiar with the project structure, I started
browsing the open issues to find ways to make myself useful. What caught my attention
was the ongoing process of adding visualization features to poliastro, which would 
make the library more accessible to professionals and beginners alike.&lt;/p&gt;
&lt;p&gt;It should be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello everyone, I'm Eleftheria and this summer I'll be working with poliastro 
under Open Astronomy as part of GSoC 2019. I'm hoping this blog will prove to 
be interesting to those who are interested in poliastro or simply a source of 
inspiration to those looking for a way to get their feet wet with open source.&lt;/p&gt;
&lt;h1&gt;The beginning of a journey&lt;/h1&gt;
&lt;p&gt;After forking poliastro, I immediately dived in and tried to make sense of the
codebase. Fortunately, poliastro is extensively 
&lt;a href="https://docs.poliastro.space/en/stable/"&gt;documented&lt;/a&gt; so the learning curve wasn't
as steep as I expected. After getting familiar with the project structure, I started
browsing the open issues to find ways to make myself useful. What caught my attention
was the ongoing process of adding visualization features to poliastro, which would 
make the library more accessible to professionals and beginners alike.&lt;/p&gt;
&lt;p&gt;It should be noted that poliastro does provide a way to easily create both 
&lt;a href="https://docs.poliastro.space/en/stable/examples/Catch%20that%20asteroid!.html?highlight=plot"&gt;2D&lt;/a&gt;
and  &lt;a href="https://docs.poliastro.space/en/stable/examples/Plotting%20in%203D.html"&gt;3D&lt;/a&gt; plots.
However, while matplotlib and plotly excell at data visualization, neither of them
are really suitable for this particular task. &lt;/p&gt;
&lt;h1&gt;Cesium to the rescue&lt;/h1&gt;
&lt;p&gt;One of the project ideas was to create an application who could extract orbitary data with
the help of poliastro and visualize it with Cesium. While I've heard of Cesium before,
as it is arguably one of the most well-known javascript libraries (and is also open source!), 
I didn't know just how extensive its functionality is.&lt;/p&gt;
&lt;p&gt;I immediately started looking at similar projects both for inspiration and in order to get 
a sense of what can be achieved on the tecnhical side. I was pleasantly surprised by a large
selection of &lt;a href="https://cesiumjs.org/demos/"&gt;demos&lt;/a&gt;, 
&lt;a href="https://cesiumjs.org/demos/OrbitalPredictor/"&gt;some&lt;/a&gt; of which were particulary relevant to
poliastro.&lt;/p&gt;
&lt;h1&gt;Summer is coming&lt;/h1&gt;
&lt;p&gt;So what is there to be done during the summer? Well, fortunately far more that I initially 
expected. I currently have a working, albeit basic version of the project which allows the users 
to define Earth-based sattelites and visualize their trajectories, but when it comes to additional
features, sky's the limit. &lt;/p&gt;
&lt;p&gt;Some of the features I plan to tackle first are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add communication satellites and ground stations and visualize their line of sight.&lt;/li&gt;
&lt;li&gt;Add a groundtrack plotter capabilities (hopefully following Jorge's work) that will also work
with Cesium's 2D view&lt;/li&gt;
&lt;li&gt;Implement planetary orbits &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm really excited to start working on the project and hope for an exciting and productive summer!&lt;/p&gt;</content><category term="GSCOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category></entry><entry><title>GSOC-19 starts!</title><link href="https://www.poliastro.space/blog/2019/05/10/2019-05-10-poliastro-gsoc-jorge/" rel="alternate"></link><published>2019-05-10T11:00:00+02:00</published><updated>2019-05-10T11:00:00+02:00</updated><author><name>Jorge Martínez Garrido</name></author><id>tag:www.poliastro.space,2019-05-10:/blog/2019/05/10/2019-05-10-poliastro-gsoc-jorge/</id><summary type="html">&lt;h2&gt;From my first pull request to GSOC student&lt;/h2&gt;
&lt;p&gt;Hi, my name is Jorge, and I am one of the selected students for this GSOC
edition at poliastro under the OpenAstronomy organization. I started working on
poliastro project after Juanlu came to my university to give a talk about Open
Source software in engineering. &lt;/p&gt;
&lt;p&gt;After forking poliastro, I decided to improve API Docs, which gave me an
overview on how the project was built and how the different modules talked
among them. I had no idea on how Git and GitHub worked and therefore,
when finished with the docs my first pull request was quite massive...&lt;/p&gt;
&lt;p&gt;But after that I started feeling more confortable with GitHub and Sphinx, the
tool used nowadays in poliastro for building documentation. Then, I decided to
work on a porkchop plotter.&lt;/p&gt;
&lt;p&gt;I spent the week after …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;From my first pull request to GSOC student&lt;/h2&gt;
&lt;p&gt;Hi, my name is Jorge, and I am one of the selected students for this GSOC
edition at poliastro under the OpenAstronomy organization. I started working on
poliastro project after Juanlu came to my university to give a talk about Open
Source software in engineering. &lt;/p&gt;
&lt;p&gt;After forking poliastro, I decided to improve API Docs, which gave me an
overview on how the project was built and how the different modules talked
among them. I had no idea on how Git and GitHub worked and therefore,
when finished with the docs my first pull request was quite massive...&lt;/p&gt;
&lt;p&gt;But after that I started feeling more confortable with GitHub and Sphinx, the
tool used nowadays in poliastro for building documentation. Then, I decided to
work on a porkchop plotter.&lt;/p&gt;
&lt;p&gt;I spent the week after taking my final exams with the porkchop plotter. Reading
lots of blogs, posts and others on how to plot contours in Python, vectorize
functions... But finally, I was able to code the plotting utility and it was
included in poliastro.&lt;/p&gt;
&lt;h2&gt;GSOC acceptance and first ideas&lt;/h2&gt;
&lt;p&gt;After being accepted at GSOC I have received a lot of emails, comming either
from Google, OpenAstronomy and poliastro. We need to regulary meet our tutors
or at least be in contact with them, so everyone knows how things are evolving.&lt;/p&gt;
&lt;p&gt;Yesterday I talked with Juanlu about the main goals for this Summer of Code.
My objective during the first weeks of coding phase will be the development of
a propagation algorithm capable of working with all possible orbits, no matter
their eccentricity.&lt;/p&gt;
&lt;p&gt;This would be amazing, since no integrators would be needed for near parabolic
orbits where numerical methods start failing. The algorithm that we expect to
solve for this is the one developed by Gauss.&lt;/p&gt;
&lt;h2&gt;My plans for this summer in poliastro&lt;/h2&gt;
&lt;p&gt;Previous algorithm is just one of many utilities I am expected to code
all along this summer.  Although most of them are related
to numerical methods and inegrators, others dealt with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plotting utilities such us a groundtrack plotter.&lt;/li&gt;
&lt;li&gt;Orbit determination and TLE retreival from Celestrack.&lt;/li&gt;
&lt;li&gt;Atmospheric models.&lt;/li&gt;
&lt;li&gt;Rendezvous maneuvers and low-thrust guidance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this moment, there are two main important core issues that I would like to
solve before first GSOC evaluation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gauss propagator for any kind of orbit.&lt;/li&gt;
&lt;li&gt;Solar-system and Earth-Moon barycenters implementations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am still thinking how to approach the second one and this will need another
talk with Juanlu, for sure. But for the moment, I will focus on my final exams.&lt;/p&gt;
&lt;p&gt;Can't wait to start the coding phase!&lt;/p&gt;</content><category term="GSOC"></category><category term="GSOC"></category><category term="GSOC19"></category><category term="poliastro"></category></entry><entry><title>poliastro in Google Summer of Code 2019!</title><link href="https://www.poliastro.space/blog/2019/03/01/2019-03-01-poliastro-google-summer-of-code-2019/" rel="alternate"></link><published>2019-03-01T12:00:00+01:00</published><updated>2019-03-01T12:00:00+01:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2019-03-01:/blog/2019/03/01/2019-03-01-poliastro-google-summer-of-code-2019/</id><summary type="html">&lt;p&gt;We are glad to announce that &lt;strong&gt;poliastro&lt;/strong&gt; will accept student applications during Google Summer of Code 2019, thanks to the umbrella organization OpenAstronomy! 🚀&lt;/p&gt;
&lt;p&gt;For the newcomers, poliastro is a pure Python library that allows you to easily simulate and visualize interplanetary orbits in an interactive way, &lt;a href="https://docs.poliastro.space/en/v0.12.0/index.html#success-stories"&gt;used by people from all around the world&lt;/a&gt;. Sounds interesting? Read on!&lt;/p&gt;
&lt;h1&gt;What is Google Summer of Code?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Google Summer of Code&lt;/strong&gt; (from now on, &lt;strong&gt;GSOC&lt;/strong&gt;) is, according to &lt;a href="https://summerofcode.withgoogle.com/"&gt;its own website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a global program focused on bringing more student developers into open source software development. Students work with an open source organization on a 3 month programming project during their break from school.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Google Summer of Code" src="https://upload.wikimedia.org/wikipedia/commons/1/1e/GSoC.png"&gt;&lt;/p&gt;
&lt;p&gt;GSOC is the inspiration for the Summer of Code in Space (SOCIS), a similar program organized by the European Space Agency in which &lt;a href="http://blog.poliastro.space/2017/09/15/2017-09-15-poliastro-070-released-ready-pycones/"&gt;we also participated&lt;/a&gt;, with great success.&lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We are glad to announce that &lt;strong&gt;poliastro&lt;/strong&gt; will accept student applications during Google Summer of Code 2019, thanks to the umbrella organization OpenAstronomy! 🚀&lt;/p&gt;
&lt;p&gt;For the newcomers, poliastro is a pure Python library that allows you to easily simulate and visualize interplanetary orbits in an interactive way, &lt;a href="https://docs.poliastro.space/en/v0.12.0/index.html#success-stories"&gt;used by people from all around the world&lt;/a&gt;. Sounds interesting? Read on!&lt;/p&gt;
&lt;h1&gt;What is Google Summer of Code?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Google Summer of Code&lt;/strong&gt; (from now on, &lt;strong&gt;GSOC&lt;/strong&gt;) is, according to &lt;a href="https://summerofcode.withgoogle.com/"&gt;its own website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a global program focused on bringing more student developers into open source software development. Students work with an open source organization on a 3 month programming project during their break from school.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Google Summer of Code" src="https://upload.wikimedia.org/wikipedia/commons/1/1e/GSoC.png"&gt;&lt;/p&gt;
&lt;p&gt;GSOC is the inspiration for the Summer of Code in Space (SOCIS), a similar program organized by the European Space Agency in which &lt;a href="http://blog.poliastro.space/2017/09/15/2017-09-15-poliastro-070-released-ready-pycones/"&gt;we also participated&lt;/a&gt;, with great success.&lt;/p&gt;
&lt;p&gt;The process of GSOC before the coding starts goes more or less like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mentoring organizations apply ✔️&lt;/li&gt;
&lt;li&gt;they get accepted (yay!) ✔️&lt;/li&gt;
&lt;li&gt;students start getting familiar with the project of their choice ⬅&lt;/li&gt;
&lt;li&gt;they send a proposal (March 25 - April 9, 2019), and&lt;/li&gt;
&lt;li&gt;they get accepted (hopefully! on May 6, 2019)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How did we get to this point? Keep on reading!&lt;/p&gt;
&lt;h2&gt;What is OpenAstronomy?&lt;/h2&gt;
&lt;p&gt;This year we participate again under the umbrella organization &lt;strong&gt;OpenAstronomy&lt;/strong&gt;, which is, again according to our own website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a collaboration between open source astronomy and astrophysics projects to share resources, ideas, and to improve code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://openastronomy.org/members/"&gt;poliastro is a project member of OpenAstronomy&lt;/a&gt;, but there are many more: AstroPy, SunPy, JuliaAstro... Many of them are participating in GSOC!&lt;/p&gt;
&lt;h2&gt;Sounds interesting, how much do I get paid?&lt;/h2&gt;
&lt;p&gt;On the GSOC website you can find &lt;a href="https://developers.google.com/open-source/gsoc/help/student-stipends"&gt;the stipend amount for each country&lt;/a&gt;. For the country I come from, Spain, it's $4200 in total, which is roughly 1200 € per month. Of course, you first have to &lt;a href="https://developers.google.com/open-source/gsoc/faq#what_are_the_eligibility_requirements_for_participation"&gt;meet the eligibility criteria&lt;/a&gt;, send a successful proposal, and get accepted.&lt;/p&gt;
&lt;h2&gt;Awesome! How can I participate?&lt;/h2&gt;
&lt;p&gt;Fantastic! The first thing you should do is to select on which project you would like to participate. We would love to have you all in poliastro, but you might be more interested in Solar physics, or the Julia programming language, or Software Defined Radio... &lt;a href="https://summerofcode.withgoogle.com/organizations/"&gt;There are tons of different projects&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Whichever project you would like to participate in, including poliastro, will have an "ideas list" somewhere. These ideas give you inspiration on what the project administrators expect from students, what is the functionality or new developments that they desire... But you can propose your own ideas as well! Here you can find the &lt;a href="http://openastronomy.org/gsoc/gsoc2019/#/projects"&gt;ideas list for poliastro and the rest of OpenAstronomy projects&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And finally, once you have decided which project is your favourite, you should run and engage with it in some way. For poliastro we encourage you to &lt;a href="https://chat.openastronomy.org/#/room/#poliastro:matrix.org"&gt;join our chat&lt;/a&gt;, and other projects will have their own documentation channels.&lt;/p&gt;
&lt;h2&gt;Fair enough, but how do I get started?&lt;/h2&gt;
&lt;p&gt;I know, too much information, right? Here is a list of things you can do if you want to work with poliastro this summer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chat.openastronomy.org/#/room/#poliastro:matrix.org"&gt;Join our chat&lt;/a&gt; (you already did that, rigtht?)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.poliastro.space/"&gt;Read the documentation&lt;/a&gt; (at least a little bit!)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://beta.mybinder.org/v2/gh/poliastro/poliastro/master?filepath=index.ipynb"&gt;Play with the notebooks&lt;/a&gt; (don't need to install anything!)&lt;/li&gt;
&lt;li&gt;Watch a talk about poliastro, like &lt;a href="https://youtu.be/lpcp849dnLA"&gt;this one&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/"&gt;Clone the git repository&lt;/a&gt;, and make sure that the tests pass&lt;/li&gt;
&lt;li&gt;Take a look at the &lt;a href="https://github.com/poliastro/poliastro/issues"&gt;issues list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You already have enough homework to get started, but don't get overwhelmed - just &lt;a href="https://chat.openastronomy.org/#/room/#poliastro:matrix.org"&gt;join our chat&lt;/a&gt; (did I forget to mention?) and say hello!&lt;/p&gt;
&lt;h2&gt;And then what?&lt;/h2&gt;
&lt;p&gt;And then... you decide! I can help you polish your proposal if you need to, find an idea to work on, give a hand with git, suggest a different project or organization based on your skills and interests... If you happen to send a good proposal to work on poliastro, you will have good chances to get selected and maybe we will have the opportunity to work together and learn a lot. Also perhaps &lt;a href="http://2019.es.pycon.org/"&gt;give a talk in a conference&lt;/a&gt; &lt;a href="https://www.euroscipy.org/"&gt;or two&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;I would greatly appreciate if you spread the word about this. I believe GSOC is a great opportunity to get in touch with open source and make a big contribution to science and technology.&lt;/p&gt;
&lt;p&gt;Before you leave, let me add a very important &lt;strong&gt;impostor syndrome disclaimer&lt;/strong&gt; (from &lt;a href="https://github.com/adriennefriend/imposter-syndrome-disclaimer#how-to-contribute"&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want your help. No really, I do.&lt;/p&gt;
&lt;p&gt;There might be a little voice inside that tells you you're not ready;
that you need to do one more tutorial, or learn another framework, or
write a few more blog posts before you can help me with this project.&lt;/p&gt;
&lt;p&gt;I assure you, that's not the case.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have read this far, I hope to have you on board very soon :)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Per Python ad astra!&lt;/em&gt;&lt;/p&gt;</content><category term="articles"></category><category term="GSOC"></category><category term="Google"></category><category term="poliastro"></category><category term="students"></category></entry><entry><title>GSoC'18: improving propagators, adding natural and artificial perturbations at Poliastro</title><link href="https://www.poliastro.space/blog/2018/08/05/2018-08-05-google-summer-of-code-2018/" rel="alternate"></link><published>2018-08-05T14:00:00+02:00</published><updated>2018-08-05T14:00:00+02:00</updated><author><name>Nikita Astrakhantsev</name></author><id>tag:www.poliastro.space,2018-08-05:/blog/2018/08/05/2018-08-05-google-summer-of-code-2018/</id><summary type="html">&lt;p&gt;It was a lazy Sunday at home and nothing prepared me for my girlfriend giving me the link for the GSoC'18 announcement page. I was considering participation a year ago, but had not enough resoluteness for that. This year I wanted it to be different so I started scrolling through the list of open-source organisations. As I am doing a PhD in theoretical physics now (defending in January 2019), I wanted the project to be scientific, not just some boring back-end development (in which I am anyway not strong enough). After a couple of iterations I converged to three space-aimed organisations. What shocked me, was the fact that mostly people of these organizations were not eager to even answer simple questions or it took them a week to provide a dataset for analysis. Only in Poliastro it was easy enough …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It was a lazy Sunday at home and nothing prepared me for my girlfriend giving me the link for the GSoC'18 announcement page. I was considering participation a year ago, but had not enough resoluteness for that. This year I wanted it to be different so I started scrolling through the list of open-source organisations. As I am doing a PhD in theoretical physics now (defending in January 2019), I wanted the project to be scientific, not just some boring back-end development (in which I am anyway not strong enough). After a couple of iterations I converged to three space-aimed organisations. What shocked me, was the fact that mostly people of these organizations were not eager to even answer simple questions or it took them a week to provide a dataset for analysis. Only in Poliastro it was easy enough to get in touch with people and they (especially Juan Luis) turned out to be friendly and helpful. In such an atmosphere it is more than possible to work.&lt;/p&gt;
&lt;p&gt;After looking project proposal list, I found what I am strong at and made a compilation of three project proposals into my own final &lt;a href="http://docs.poliastro.space/content/other/gsoc-18-astrakhantsev-proposal.pdf"&gt;proposal&lt;/a&gt; and got accepted.&lt;/p&gt;
&lt;p&gt;During the GSoC, I was writing a &lt;a href="https://medium.com/@nikita.astronaut"&gt;blog on Medium&lt;/a&gt;. You can actually see how I was becoming more and more tired till the end as the length of posts was gradually shrinking :) Still, there I was trying to describe all the things we've done and give all the links to merged pull requests. Below I will repeat that in more of a shorter manner, giving links to PRs and corresponding Medium posts :)&lt;/p&gt;
&lt;h2&gt;So what was done (in chronological order)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://medium.com/@nikita.astronaut/my-bonding-period-working-for-gsoc18-poliastro-project-3aa10732b7c0"&gt;Bonding period&lt;/a&gt;. &lt;a href="https://github.com/poliastro/poliastro/pull/320"&gt;Fixed non-smoothness in orbit-plotting&lt;/a&gt;, &lt;a href="https://github.com/poliastro/poliastro/pull/322"&gt;added &lt;code&gt;mean_motion&lt;/code&gt; propagator&lt;/a&gt; and &lt;a href="https://github.com/poliastro/poliastro/pull/334"&gt;made it possible to propagate &lt;code&gt;Orbit&lt;/code&gt; to desired true anomaly&lt;/a&gt;. &lt;a href="https://github.com/poliastro/poliastro/pull/341"&gt;Added &lt;code&gt;J2_perturbation&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/poliastro/poliastro/pull/343"&gt;&lt;code&gt;atmospheric_drag&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/poliastro/poliastro/pull/362"&gt;fixed Newton method and &lt;code&gt;kepler&lt;/code&gt; propagator convergence&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@nikita.astronaut/the-end-of-may-in-gsoc18-poliastro-project-2d3ed2d6c9e0"&gt;First milestone, first part&lt;/a&gt;. &lt;a href="https://github.com/poliastro/poliastro/pull/368"&gt;Wrote my own &lt;code&gt;DOP853&lt;/code&gt; solver in python!!&lt;/a&gt; and &lt;a href="https://github.com/poliastro/poliastro/pull/379"&gt;optimized &lt;code&gt;Orbit.sample&lt;/code&gt; method using now accessible dense output&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@nikita.astronaut/the-detective-story-3rd-body-perturbation-validation-8b260086ea0d"&gt;First milestone, second part&lt;/a&gt;. After a veeery long search for mistake in validation (it actually turned out to be mistake in BOOK, see in the pull request link), &lt;a href="https://github.com/poliastro/poliastro/pull/381"&gt;added 3rd-body perturbation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@nikita.astronaut/solar-drag-and-robust-kepler-equation-solution-694a4658c35b"&gt;Second milestone, first part&lt;/a&gt;. &lt;a href="https://github.com/poliastro/poliastro/pull/388"&gt;Added &lt;code&gt;solar_drag&lt;/code&gt; perturbation&lt;/a&gt;, &lt;a href="https://github.com/poliastro/poliastro/pull/390"&gt;changed the source of docs download&lt;/a&gt; and &lt;a href="https://github.com/poliastro/poliastro/pull/394"&gt;implemented better treatment of parabolic region in &lt;code&gt;mean_motion&lt;/code&gt; propagator&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@nikita.astronaut/ending-of-2nd-evaluation-period-new-propagator-in-parabolic-region-j3-perturbation-continuous-17042f85d8b3"&gt;Second milestone, second part&lt;/a&gt;. &lt;a href="https://github.com/poliastro/poliastro/pull/398"&gt;Added &lt;code&gt;J3_perturbations&lt;/code&gt;&lt;/a&gt; (there we could not validate one of the results and thus consider this feature experimental) and &lt;a href="https://github.com/poliastro/poliastro/pull/400"&gt;artificial perturbations from the old Juan Luis's code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@nikita.astronaut/making-propagators-fast-again-and-more-a8df832ca7ec"&gt;Third milestone&lt;/a&gt;. &lt;a href="https://github.com/poliastro/poliastro/pull/409"&gt;Made propagators fasted by using &lt;code&gt;numba&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/poliastro/poliastro/pull/413"&gt;even more faster&lt;/a&gt;, &lt;a href="https://github.com/poliastro/poliastro-benchmarks/pull/16"&gt;added continuous benchmarking of propagators&lt;/a&gt; and &lt;a href="https://github.com/poliastro/poliastro/pull/428"&gt;spent some time documenting and demonstrating new features from this summer&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So, as you can see, quite some work has been done and I got really tired :) However, I want to thank Juan Luis for his continuous assessment and support, for teaching me right code structuring and using github. Juan Luis was always ready to help and save me from any bugs, which made all these contributions possible. This was a real experience and I am happy that I agreed to take part in it :) Now one can plot, for instance, evolution of planet orbits and classical elements over time!
&lt;img alt="Decay of orbit due to atmospheric drag" src="https://docs.poliastro.space/en/latest/_images/examples_Natural_and_artificial_perturbations_5_1.png"&gt;&lt;/p&gt;</content><category term="GSOC"></category><category term="GSoC"></category><category term="poliastro"></category></entry><entry><title>poliastro at the Python in Astronomy 2018 conference</title><link href="https://www.poliastro.space/blog/2018/06/04/2018-06-04-poliastro-python-astronomy-2018-conference/" rel="alternate"></link><published>2018-06-04T20:30:00+02:00</published><updated>2018-06-04T20:30:00+02:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2018-06-04:/blog/2018/06/04/2018-06-04-poliastro-python-astronomy-2018-conference/</id><summary type="html">&lt;p&gt;A month ago I had the privilege to attend the &lt;strong&gt;Python in Astronomy 2018 conference&lt;/strong&gt;, which gave me an unique perspective of the status of Python in the astronomical sciences and an opportunity to present poliastro to a very technical audience. I was planning to post a writeup somewhere, and as the Zen of Python says...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;import this&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;Now&lt;/span&gt;
&lt;span class="n"&gt;Now&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, let's do it! 🚀&lt;/p&gt;
&lt;h1&gt;What was Python in Astronomy?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Python in Astronomy&lt;/strong&gt; (from now on, &lt;strong&gt;PyAstro18&lt;/strong&gt;) is best explained in &lt;a href="http://openastronomy.org/pyastro/2018/"&gt;its website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This conference aims to bring a wide variety of people who use, develop or teach people about Python packages in the context of all forms of Astronomy. The conference will include presentations, tutorials, unconference sessions, and sprints. As well as enhancing the community around astronomical uses of Python, the conference aims …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;A month ago I had the privilege to attend the &lt;strong&gt;Python in Astronomy 2018 conference&lt;/strong&gt;, which gave me an unique perspective of the status of Python in the astronomical sciences and an opportunity to present poliastro to a very technical audience. I was planning to post a writeup somewhere, and as the Zen of Python says...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;import this&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;Now&lt;/span&gt;
&lt;span class="n"&gt;Now&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, let's do it! 🚀&lt;/p&gt;
&lt;h1&gt;What was Python in Astronomy?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Python in Astronomy&lt;/strong&gt; (from now on, &lt;strong&gt;PyAstro18&lt;/strong&gt;) is best explained in &lt;a href="http://openastronomy.org/pyastro/2018/"&gt;its website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This conference aims to bring a wide variety of people who use, develop or teach people about Python packages in the context of all forms of Astronomy. The conference will include presentations, tutorials, unconference sessions, and sprints. As well as enhancing the community around astronomical uses of Python, the conference aims to improve collaboration and interoperability between Python packages, and share knowledge on Python packages and techniques. It will also provide training and educational materials for users and developers of Python astronomy packages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="PyAstro 2018 introduction" src="/images/pyastro-intro.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This year it was celebrated at the &lt;a href="https://www.simonsfoundation.org/flatiron/center-for-computational-astrophysics/"&gt;Center for Computational Astrophysics&lt;/a&gt;, a research center committed to developing the research tools needed for modern astronomy as part the Flatiron Institute, in New York.&lt;/p&gt;
&lt;p&gt;I had heard about the conference perhaps last year, but this was the first edition I actually applied to attend, and I was selected! Not only did the organization pay for transportation and accommodation of &lt;em&gt;all&lt;/em&gt; the attendees (including yours truly), but also they did a wonderful job gathering a &lt;strong&gt;diverse audience&lt;/strong&gt;, which made me extremely happy!&lt;/p&gt;
&lt;p&gt;PyAstro is not an ordinary conference, and many types of sessions happened:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Keynotes&lt;/strong&gt;: Classical talks addressed to all the attendees, about an important topic and given by a relevant member of the community.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unconferences/Tutorials&lt;/strong&gt;: Sessions proposed by the attendees during the event itself. There were moments during the week when we were asked to suggest topics on a whiteboard, do a "pitch" about them (i.e. explain why we wanted to discuss about those topics) and then vote. The ones that were more interactive, or encouraged the attendees to code something, were called tutorials. There were also people taking notes of the discussions and they were all summarized at the end of each day.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lightning talks&lt;/strong&gt;: 5 minutes talks about &lt;em&gt;any&lt;/em&gt; topic that can be a great opportunity for first time speakers or people that want to show something in an humorous way.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hack projects&lt;/strong&gt;: One day was entirely devoted to &lt;em&gt;hacking&lt;/em&gt;! This meant that people could do sprint on a particular software package, explore new libraries, discuss complicated things in person, or just advance with their personal projects. In the same way as unconferences, the conclusions were summarized and presented the following day.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The best thing is that &lt;em&gt;you can read&lt;/em&gt; most of the content we generated during the conference &lt;a href="https://docs.google.com/document/d/1DLgH9D-Wm-zgeRdPecE1_VtKnugkYyHAc5imwAptktk/edit?usp=sharing"&gt;in this index and the linked documents!&lt;/a&gt; This includes the summaries of the unconference sessions, the lightning talks list, the participants directory, pictures and more. Great, isn't it?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Unconference sessions" src="/images/pyastro-unconference.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;poliastro + PyAstro18 = 🚀&lt;/h1&gt;
&lt;p&gt;I wanted to make the most of PyAstro18 and participate as much as I could, so before arriving to New York I already had a rough idea of my main goals for the event, which were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spread the word about poliastro and reach out to potential users,&lt;/li&gt;
&lt;li&gt;Make a decision about the API of ecliptic reference frames in Astropy, which affects poliastro (see &lt;a href="https://github.com/astropy/astropy/pull/6508"&gt;this lengthy issue&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;Share my concerns about high level, performant code in Python, in particular the performance of &lt;code&gt;astropy.units&lt;/code&gt; (which in some parts of poliastro is a bottleneck, see &lt;a href="https://github.com/poliastro/poliastro/commit/ed931adb"&gt;this commit&lt;/a&gt;), and&lt;/li&gt;
&lt;li&gt;Get to know the Astropy developers (and the rest of the community) in person and have fun!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With this in mind, apart from my scheduled talk about poliastro (&lt;a href="https://github.com/poliastro/pyastro18-talk/"&gt;repo&lt;/a&gt;), I gave a lightning talk titled "That messy conversation about reference frames" inspired in &lt;a href="https://github.com/astropy/astropy/pull/6508"&gt;this lengthy issue in astropy.coordinates that is not over yet&lt;/a&gt; (&lt;a href="https://github.com/Juanlu001/messy-frames-talk"&gt;repo&lt;/a&gt;) and I co-chaired an unconference session about Parallelization, Cython, Measuring Python Performance and Identifying bottlenecks.&lt;/p&gt;
&lt;h2&gt;Personal summary&lt;/h2&gt;
&lt;p&gt;Luckily, &lt;strong&gt;poliastro&lt;/strong&gt; attracted some attention and I got many interesting question from the attendees. The golden moment of the week was when &lt;a href="https://github.com/abigailStev"&gt;Abbie Stevens&lt;/a&gt; wrote "Where are you sitting? Someone has a question about orbital mechanics!" 💗 Also, &lt;a href="https://twitter.com/coachxcpayne"&gt;Charlie Payne&lt;/a&gt; announced that &lt;a href="https://twitter.com/coachxcpayne/status/997322543852814336"&gt;he had used poliastro with high school students to examine the Europa Clipper mission&lt;/a&gt; 💖&lt;/p&gt;
&lt;p&gt;For my &lt;strong&gt;hack day project&lt;/strong&gt;, I decided to work on the performance of &lt;code&gt;astropy.units&lt;/code&gt;, doing some profiling with common use cases to identify hot spots and hopefully try to address some of them. I must give a special Thank You here to &lt;a href="https://github.com/eteq"&gt;Erik Tollerud&lt;/a&gt;, which was super kind and supportive all the time and always happy to give guidance even though he was doing a dozen things at the same time. I also worked a lot with &lt;a href="https://github.com/manodeep/"&gt;Manodeep Sinha&lt;/a&gt;, our optimization expert and "general pedant about coding", who gave lots of useful and interesting suggestions to optimize the code. The conclusions can be read in &lt;a href="https://github.com/astropy/astropy/issues/7438"&gt;this issue&lt;/a&gt; and can be sumarized to "why the heck is &lt;code&gt;isinstance&lt;/code&gt; so slow?".&lt;/p&gt;
&lt;p&gt;Regarding the decision on the &lt;strong&gt;ecliptic frames&lt;/strong&gt;, at one point I sat with &lt;a href="https://github.com/adrn"&gt;Adrian Price-Whelan&lt;/a&gt; and Erik and figured out that 12 or 24 ecliptic frames would be too many (unsurprisingly), and that we would have to find a compromise using factory methods and trying to make common frames visibly documented. A straightforward solution that works for us is already in place in poliastro, but I hope I have enough time to work on this &lt;a href="https://github.com/astropy/astropy/wiki/Release-Calendar"&gt;before Astropy 3.1 feature freeze&lt;/a&gt; and reach consensus with the rest of the Astropy core developers (since not all of them were at PyAstro18).&lt;/p&gt;
&lt;p&gt;And finally, I think I managed to &lt;strong&gt;meet lots of new people&lt;/strong&gt; and had some fun :) I found myself excited to find other Spanish-speaking people (special mention to &lt;a href="https://github.com/carlgogo"&gt;Carlos Alberto Gómez González&lt;/a&gt;, with whom I had a couple of funny anecdotes) and in general I was glad to meet people I usually interact with on GitHub, in person.&lt;/p&gt;
&lt;p&gt;&lt;img alt="I, Juanlu" src="/images/pyastro-juanlu.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Some final thoughts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There was a great atmosphere during the event: everybody was participating, the venue was just awesome, there were people from many different countries... &lt;strong&gt;10/10&lt;/strong&gt; for the organization, they did a great job. &lt;/li&gt;
&lt;li&gt;I was already aware of the huge &lt;strong&gt;infrastructure&lt;/strong&gt; that the Astropy community has been developing throughout the years, but watching how easy it is to create a Python package using their templates was amazing (&lt;a href="https://github.com/astropy/package-template"&gt;check out their cookiecutter template&lt;/a&gt;, which was finished during the event!). I think it's very important that non-programmers have easy ways to sort out documentation, continuous integration, testing... This applies not only for scientists, but also for engineers whose day to day job involves coding.&lt;/li&gt;
&lt;li&gt;I discovered thanks to Adrian that the field of &lt;strong&gt;galactic dynamics&lt;/strong&gt; shares some common problem with astrodynamics/orbital mechanics (check out his package &lt;a href="http://gala.adrian.pw/en/latest/"&gt;gala&lt;/a&gt;). Also, &lt;a href="https://github.com/migueldvb"&gt;Miguel de Val-Borro&lt;/a&gt; shared that he is about to start working on a Python package for small bodies research called &lt;a href="https://github.com/mommermi/sbpy"&gt;sbpy&lt;/a&gt; that will need orbital element handling and easy access to HORIZONS data. There are more collaboration opportunities than I expected, and I only wish I had more time to advance on common interfaces. &lt;/li&gt;
&lt;li&gt;I think &lt;em&gt;I was among the few non-astronomers, and also among the few people working in a private company&lt;/em&gt;. It was a weird feeling at the beginning, and gave me a different perspective about what the incentives for using open source are, what are the common problems in academia... I've been wondered how to bring the open source philosophy closer to the engineering world for years now, and this event was so important for me in that respect.&lt;/li&gt;
&lt;li&gt;After this event I really want to collaborate more and more with the community. I already have a plan to reduce the number of commitments in other areas and work more closely with the scientific community.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Group picture at PyAstro18" src="/images/pyastro-group.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Looking forward to see you all at PyAstro19!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Per Python ad astra!&lt;/em&gt;&lt;/p&gt;</content><category term="articles"></category><category term="pyastro18"></category><category term="poliastro"></category><category term="conferences"></category></entry><entry><title>Join poliastro thanks to Google Summer of Code!</title><link href="https://www.poliastro.space/blog/2018/02/22/2018-02-22-join-poliastro-google-summer-of-code/" rel="alternate"></link><published>2018-02-22T12:00:00+01:00</published><updated>2018-02-22T12:00:00+01:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2018-02-22:/blog/2018/02/22/2018-02-22-join-poliastro-google-summer-of-code/</id><summary type="html">&lt;p&gt;We are glad to announce that &lt;strong&gt;poliastro&lt;/strong&gt; will accept student applications during Google Summer of Code this year, thanks to the umbrella organization OpenAstronomy! 🚀&lt;/p&gt;
&lt;p&gt;For the newcomers, poliastro is a pure Python library that allows you to easily simulate and visualize interplanetary orbits in an interactive way, &lt;a href="http://docs.poliastro.space/en/v0.8.0/index.html#success-stories"&gt;used by people from all around the world&lt;/a&gt;. Sounds interesting? Read on!&lt;/p&gt;
&lt;h1&gt;What is Google Summer of Code?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Google Summer of Code&lt;/strong&gt; (from now on, &lt;strong&gt;GSOC&lt;/strong&gt;) is, according to &lt;a href="https://summerofcode.withgoogle.com/"&gt;its own website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a global program focused on bringing more student developers into open source software development. Students work with an open source organization on a 3 month programming project during their break from school.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Google Summer of Code" src="https://upload.wikimedia.org/wikipedia/commons/1/1e/GSoC.png"&gt;&lt;/p&gt;
&lt;p&gt;GSOC is the inspiration for the Summer of Code in Space (SOCIS), a similar program organized by the European Space Agency in which &lt;a href="http://blog.poliastro.space/2017/09/15/2017-09-15-poliastro-070-released-ready-pycones/"&gt;we also participated last year&lt;/a&gt;, with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We are glad to announce that &lt;strong&gt;poliastro&lt;/strong&gt; will accept student applications during Google Summer of Code this year, thanks to the umbrella organization OpenAstronomy! 🚀&lt;/p&gt;
&lt;p&gt;For the newcomers, poliastro is a pure Python library that allows you to easily simulate and visualize interplanetary orbits in an interactive way, &lt;a href="http://docs.poliastro.space/en/v0.8.0/index.html#success-stories"&gt;used by people from all around the world&lt;/a&gt;. Sounds interesting? Read on!&lt;/p&gt;
&lt;h1&gt;What is Google Summer of Code?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Google Summer of Code&lt;/strong&gt; (from now on, &lt;strong&gt;GSOC&lt;/strong&gt;) is, according to &lt;a href="https://summerofcode.withgoogle.com/"&gt;its own website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a global program focused on bringing more student developers into open source software development. Students work with an open source organization on a 3 month programming project during their break from school.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Google Summer of Code" src="https://upload.wikimedia.org/wikipedia/commons/1/1e/GSoC.png"&gt;&lt;/p&gt;
&lt;p&gt;GSOC is the inspiration for the Summer of Code in Space (SOCIS), a similar program organized by the European Space Agency in which &lt;a href="http://blog.poliastro.space/2017/09/15/2017-09-15-poliastro-070-released-ready-pycones/"&gt;we also participated last year&lt;/a&gt;, with great success.&lt;/p&gt;
&lt;p&gt;The process of GSOC before the coding starts goes more or less like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mentoring organizations apply ✔️&lt;/li&gt;
&lt;li&gt;they get accepted (yay!) ✔️&lt;/li&gt;
&lt;li&gt;students start getting familiar with the project of their choice ✔️&lt;/li&gt;
&lt;li&gt;they send a proposal (March 12 - 27, 2018 ⬅), and&lt;/li&gt;
&lt;li&gt;they get accepted (hopefully! on April 23, 2018)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How did we get to this point? Keep on reading!&lt;/p&gt;
&lt;h2&gt;What is OpenAstronomy?&lt;/h2&gt;
&lt;p&gt;This year is the first one we are participating, thanks to the umbrella organization &lt;strong&gt;OpenAstronomy&lt;/strong&gt;, which is, again according to our own website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a collaboration between open source astronomy and astrophysics projects to share resources, ideas, and to improve code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://openastronomy.org/members/"&gt;poliastro is a project member of OpenAstronomy&lt;/a&gt;, but there are many more: AstroPy, SunPy, JuliaAstro... Many of them are participating in GSOC!&lt;/p&gt;
&lt;h2&gt;Sounds interesting, how much do I get paid?&lt;/h2&gt;
&lt;p&gt;On the GSOC website you can find &lt;a href="https://developers.google.com/open-source/gsoc/help/student-stipends"&gt;the stipend amount for each country&lt;/a&gt;. For the country I come from, Spain, it's $5400 in total, which is roughly 1500 € per month. Of course, you first have to &lt;a href="https://developers.google.com/open-source/gsoc/faq#what_are_the_eligibility_requirements_for_participation"&gt;meet the eligibility criteria&lt;/a&gt;, send a successful proposal, and get accepted.&lt;/p&gt;
&lt;h2&gt;Awesome! How can I participate?&lt;/h2&gt;
&lt;p&gt;Fantastic! The first thing you should do is to select on which project you would like to participate. We would love to have you all in poliastro, but you might be more interested in Solar physics, or the Julia programming language, or Software Defined Radio... &lt;a href="https://summerofcode.withgoogle.com/organizations/"&gt;There are tons of different projects&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Whichever project you would like to participate in, including poliastro, will have an "ideas list" somewhere. These ideas give you inspiration on what the project administrators expect from students, what is the functionality or new developments that they desire... But you can propose your own ideas as well! Here you can find the &lt;a href="http://openastronomy.org/gsoc/gsoc2018/#/projects"&gt;ideas list for poliastro and the rest of OpenAstronomy projects&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And finally, once you have decided which project is your favourite, you should run and engage with it in some way. For poliastro we encourage you to &lt;a href="https://riot.im/app/#/room/#poliastro:matrix.org"&gt;join our chat&lt;/a&gt;, and other projects will have their own documentation channels.&lt;/p&gt;
&lt;h2&gt;Fair enough, but how do I get started?&lt;/h2&gt;
&lt;p&gt;I know, too much information, right? Here is a list of things you can do if you want to work with poliastro this summer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://riot.im/app/#/room/#poliastro:matrix.org"&gt;Join our chat&lt;/a&gt; (you already did that, rigtht?)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.poliastro.space/"&gt;Read the documentation&lt;/a&gt; (at least a little bit!)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://beta.mybinder.org/v2/gh/poliastro/poliastro/master?filepath=index.ipynb"&gt;Play with the notebooks&lt;/a&gt; (don't need to install anything!)&lt;/li&gt;
&lt;li&gt;Watch a talk about poliastro, like &lt;a href="https://youtu.be/lpcp849dnLA"&gt;this one&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/poliastro/poliastro/"&gt;Clone the git repository&lt;/a&gt;, and make sure that the tests pass&lt;/li&gt;
&lt;li&gt;Take a look at the &lt;a href="https://github.com/poliastro/poliastro/issues"&gt;issues list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You already have enough homework to get started, but don't get overwhelmed - just &lt;a href="https://riot.im/app/#/room/#poliastro:matrix.org"&gt;join our chat&lt;/a&gt; (did I forget to mention?) and say hello!&lt;/p&gt;
&lt;h2&gt;And then what?&lt;/h2&gt;
&lt;p&gt;And then... you decide! I can help you polish your proposal if you need to, find an idea to work on, give a hand with git, suggest a different project or organization based on your skills and interests... If you happen to send a good proposal to work on poliastro, you will have good chances to get selected and maybe we will have the opportunity to work together and learn a lot. Also perhaps &lt;a href="http://2018.es.pycon.org/"&gt;give a talk in a conference&lt;/a&gt; &lt;a href="https://www.euroscipy.org/"&gt;or two&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;I would greatly appreciate if you spread the word about this. I believe GSOC is a great opportunity to get in touch with open source and make a big contribution to science and technology.&lt;/p&gt;
&lt;p&gt;Before you leave, let me add a very important &lt;strong&gt;impostor syndrome disclaimer&lt;/strong&gt; (from &lt;a href="https://github.com/adriennefriend/imposter-syndrome-disclaimer#how-to-contribute"&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want your help. No really, I do.&lt;/p&gt;
&lt;p&gt;There might be a little voice inside that tells you you're not ready;
that you need to do one more tutorial, or learn another framework, or
write a few more blog posts before you can help me with this project.&lt;/p&gt;
&lt;p&gt;I assure you, that's not the case.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have read this far, I hope to have you on board very soon :)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Per Python ad astra!&lt;/em&gt;&lt;/p&gt;</content><category term="articles"></category><category term="GSOC"></category><category term="Google"></category><category term="poliastro"></category><category term="students"></category></entry><entry><title>poliastro 0.7.0 released and ready for PyConES!</title><link href="https://www.poliastro.space/blog/2017/09/15/2017-09-15-poliastro-070-released-ready-pycones/" rel="alternate"></link><published>2017-09-15T11:00:00+02:00</published><updated>2017-09-15T11:00:00+02:00</updated><author><name>Juan Luis Cano Rodríguez</name></author><id>tag:www.poliastro.space,2017-09-15:/blog/2017/09/15/2017-09-15-poliastro-070-released-ready-pycones/</id><summary type="html">&lt;p&gt;It fills us with astronomical joy to announce the release of &lt;strong&gt;poliastro 0.7.0&lt;/strong&gt;! 🚀&lt;/p&gt;
&lt;p&gt;For the newcomers, poliastro is a pure Python library that allows you to simulate and analyze interplanetary orbits in a Jupyter notebook in an interactive and easy way, &lt;a href="http://docs.poliastro.space/en/v0.7.0/index.html#success-stories"&gt;used by people from all around the world&lt;/a&gt;. Sounds interesting? Read on!&lt;/p&gt;
&lt;p&gt;This release is the biggest one since the creation of the project in terms of code changes and new features, and on behalf of the poliastro development team I would like to deeply thank the European Space Agency for the SOCIS grant that made it possible. Besides, I would like to officially welcome Antonio Hidalgo to the team, since in reward for his amazing work during SOCIS he gained write access to the repository. ¡Bienvenido Antonio!&lt;/p&gt;
&lt;p&gt;As always, the easiest way to get poliastro in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It fills us with astronomical joy to announce the release of &lt;strong&gt;poliastro 0.7.0&lt;/strong&gt;! 🚀&lt;/p&gt;
&lt;p&gt;For the newcomers, poliastro is a pure Python library that allows you to simulate and analyze interplanetary orbits in a Jupyter notebook in an interactive and easy way, &lt;a href="http://docs.poliastro.space/en/v0.7.0/index.html#success-stories"&gt;used by people from all around the world&lt;/a&gt;. Sounds interesting? Read on!&lt;/p&gt;
&lt;p&gt;This release is the biggest one since the creation of the project in terms of code changes and new features, and on behalf of the poliastro development team I would like to deeply thank the European Space Agency for the SOCIS grant that made it possible. Besides, I would like to officially welcome Antonio Hidalgo to the team, since in reward for his amazing work during SOCIS he gained write access to the repository. ¡Bienvenido Antonio!&lt;/p&gt;
&lt;p&gt;As always, the easiest way to get poliastro in any platform is using &lt;code&gt;conda&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda install poliastro --channel conda-forge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Additionally, installation using &lt;code&gt;pip&lt;/code&gt; is now better supported and &lt;code&gt;numba&lt;/code&gt; is no longer optional (see below).&lt;/p&gt;
&lt;h1&gt;Release highlights&lt;/h1&gt;
&lt;h2&gt;New NEOS package&lt;/h2&gt;
&lt;p&gt;As you have been reading in this blog during the summer, Antonio implemented a new &lt;code&gt;poliastro.neos&lt;/code&gt; package which reads public asteroid and comet data from NASA JPL and loads it as poliastro &lt;code&gt;Orbit&lt;/code&gt; objects. Using it is as simple as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.neos&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;neows&lt;/span&gt;
&lt;span class="n"&gt;apophis_orbit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orbit_from_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apophis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And you can get nice plots like this one:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ganymed, Eros and an Amor asteroid" src="http://docs.poliastro.space/en/v0.7.0/_images/examples_Using_NEOS_package_7_1.png"&gt;&lt;/p&gt;
&lt;p&gt;To know more about how to handle NEOS in poliastro check out &lt;a href="http://docs.poliastro.space/en/v0.7.0/examples/Using%20NEOS%20package.html"&gt;the corresponding Jupyter notebook&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Astropy for body ephemerides&lt;/h2&gt;
&lt;p&gt;We now rely directly on Astropy to manage the Solar System ephemerides for us. It ships an approximate model that does not require downloading files from the JPL, so now getting the osculating orbit of a body is as simple as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; Orbit.from_body_ephem(Earth, epoch=time.Time(&amp;quot;2015-05-09 10:43&amp;quot;))
1 x 1 AU x 23.4 deg orbit around Sun (☉)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In case we need more precise results, we can tell Astropy to download a better model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;astropy.coordinates&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;solar_system_ephemeris&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;solar_system_ephemeris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jpl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Downloading&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;naif&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nasa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gov&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pub&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;naif&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;generic_kernels&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;planets&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;de430&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bsp&lt;/span&gt;
&lt;span class="o"&gt;|==========&amp;gt;-------------------------------|&lt;/span&gt;  &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;119&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;19.54&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ETA&lt;/span&gt;    &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="n"&gt;s22ss23&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Coordinate frame transformations&lt;/h2&gt;
&lt;p&gt;In this release we took the issue of coordinate frames very seriously, namely because the REST APIs we are using to retrieve the orbits of NEOs use an &lt;em&gt;heliocentric ecliptic frame&lt;/em&gt; that is different from &lt;a href="http://aa.usno.navy.mil/faq/docs/ICRS_doc.php"&gt;ICRS&lt;/a&gt;, the standard frame assumed in poliastro.&lt;/p&gt;
&lt;p&gt;As a result, we are working hard with the Astropy core devs (see &lt;a href="https://github.com/astropy/astropy/pull/6508"&gt;this lengthy pull request&lt;/a&gt; by Juanlu) to properly define ecliptic coordinates and their transformations to other reference frames. You can have a sneak peek of this work by using the new &lt;code&gt;poliastro.frames&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;astropy.coordinates&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ICRS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CartesianRepresentation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CartesianDifferential&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.neos&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;neows&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.frames&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HeliocentricEclipticJ2000&lt;/span&gt;

&lt;span class="n"&gt;florence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orbit_from_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Florence&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;florence_heclip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HeliocentricEclipticJ2000&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;florence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;florence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;florence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;d_x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;florence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;d_y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;florence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;d_z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;florence&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;representation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CartesianRepresentation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;differential_cls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CartesianDifferential&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;obstime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;EPOCH&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;florence_icrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;florence_heclip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ICRS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This way you can mix orbits expressed in different frames as it is done here!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Florence asteroid in the inner Solar System" src="http://docs.poliastro.space/en/v0.7.0/_images/examples_Catch_that_asteroid!_26_1.png"&gt;&lt;/p&gt;
&lt;p&gt;For details on how this is done, check out the &lt;a href="http://docs.poliastro.space/en/v0.7.0/examples/Catch%20that%20asteroid!.html"&gt;Jupyter notebook that studies the orbit of the Florence asteroid&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;And many more!&lt;/h2&gt;
&lt;p&gt;There were so many changes in this release that describing them in full would take us a while. We recommend interested readers to check the &lt;a href="http://docs.poliastro.space/en/v0.7.0/changelog.html#poliastro-0-7-0-2017-09-15"&gt;full release notes of poliastro 0.7.0&lt;/a&gt; in the official documentation.&lt;/p&gt;
&lt;p&gt;This release arrived just in time to PyConES 2017, the Spanish Python Conference. &lt;a href="https://2017.es.pycon.org/es/schedule/atrapa-ese-asteroide-con-poliastro/"&gt;Our talk on poliastro and NEOS&lt;/a&gt; (Spanish) was accepted, so we hope the public will enjoy our little Python library. See you there!&lt;/p&gt;
&lt;p&gt;If you use poliastro and are happy with it, please send us a little paragraph to contact@poliastro.space and we will publish it under &lt;a href="http://docs.poliastro.space/en/v0.7.0/index.html#success-stories"&gt;our Success Stories section&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;As a last note, we would like to invite you to our &lt;a href="https://riot.im/app/#/room/#poliastro:matrix.org"&gt;community chat&lt;/a&gt; so you can share your impressions on the library, ask questions, or just say "Thank you! 💙"&lt;/p&gt;
&lt;h1&gt;Getting involved&lt;/h1&gt;
&lt;p&gt;Our focus now for the 0.8 release will be to improve the plotting capabilities. &lt;a href="https://github.com/poliastro/poliastro/issues/22"&gt;Having proper 3D plotting functions is now the oldest poliastro issue&lt;/a&gt;, and we think the library is now mature enough to accept the challenge. Several tasks will have to be worked on first:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add propagation to a certain date https://github.com/poliastro/poliastro/issues/236&lt;/li&gt;
&lt;li&gt;Add a method to sample an osculating orbit https://github.com/poliastro/poliastro/issues/237&lt;/li&gt;
&lt;li&gt;Refactor plotting to store all the orbits&lt;/li&gt;
&lt;li&gt;Add the ability to change the plotting plane a posteriori&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these are no easy tasks, so we will need your help!&lt;/p&gt;
&lt;p&gt;If you are a beginner but still want to lend a hand, thank you again! Here you have &lt;a href="https://github.com/poliastro/poliastro/issues?q=is%3Aissue+is%3Aopen+label%3Aeasy"&gt;a list of issues that we have identified as "easy"&lt;/a&gt; in case you need a place to start.&lt;/p&gt;
&lt;p&gt;You are more than welcome to contribute to poliastro and even the tiniest help will be highly appreciated. This includes not only code, but also documentation, ideas, testing, blog articles showcasing poliastro... Anything! Please relax and read the &lt;a href="https://github.com/poliastro/poliastro/blob/master/CONTRIBUTING.rst"&gt;Contribution Guidelines&lt;/a&gt; and drop by our chat so we can guide you in using git, GitHub and everything.&lt;/p&gt;
&lt;p&gt;Before you leave, let me add a very important &lt;strong&gt;impostor syndrome disclaimer&lt;/strong&gt; (from &lt;a href="https://github.com/adriennefriend/imposter-syndrome-disclaimer#how-to-contribute"&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want your help. No really, I do.&lt;/p&gt;
&lt;p&gt;There might be a little voice inside that tells you you're not ready;
that you need to do one more tutorial, or learn another framework, or
write a few more blog posts before you can help me with this project.&lt;/p&gt;
&lt;p&gt;I assure you, that's not the case.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have read this far, I hope to have you on board very soon :)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Per Python ad astra!&lt;/em&gt;&lt;/p&gt;</content><category term="articles"></category><category term="SOCIS"></category><category term="poliastro"></category><category term="releases"></category><category term="PyConES"></category></entry><entry><title>FTPs, DASTCOM5 and dtypes (SOCIS 2017)</title><link href="https://www.poliastro.space/blog/2017/08/17/2017-08-17-ftps-dastcom5-and-dtypes/" rel="alternate"></link><published>2017-08-17T22:00:00+02:00</published><updated>2017-08-17T22:00:00+02:00</updated><author><name>Antonio Hidalgo Galindo</name></author><id>tag:www.poliastro.space,2017-08-17:/blog/2017/08/17/2017-08-17-ftps-dastcom5-and-dtypes/</id><summary type="html">&lt;p&gt;In the previous entry, I said that we had found a new database, and we would have to take a closer look to it.&lt;/p&gt;
&lt;p&gt;Actually, what I found was a &lt;a href="ftp://ssd.jpl.nasa.gov/pub"&gt;JPL public FTP&lt;/a&gt;, with lots of data in it (I have barely taken a glance to all the folders that contains, so have fun looking into it :P).&lt;/p&gt;
&lt;p&gt;In that FTP, inside &lt;code&gt;ssd&lt;/code&gt; folder (Solar System Dynamics, not Solid State Drive), there were several different files, some of them with .DB extension, some of them with .dat extension, and a README.&lt;/p&gt;
&lt;p&gt;The README explained some of the files (a few of them are still a mystery), and I quote what it said about a file named &lt;code&gt;dastcom5.zip&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dastcom5.zip&lt;/p&gt;
&lt;p&gt;Link to a a portable/programmable version of the JPL/Horizons 
 database of asteroids and comets ("DASTCOM5"), updated as often …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;In the previous entry, I said that we had found a new database, and we would have to take a closer look to it.&lt;/p&gt;
&lt;p&gt;Actually, what I found was a &lt;a href="ftp://ssd.jpl.nasa.gov/pub"&gt;JPL public FTP&lt;/a&gt;, with lots of data in it (I have barely taken a glance to all the folders that contains, so have fun looking into it :P).&lt;/p&gt;
&lt;p&gt;In that FTP, inside &lt;code&gt;ssd&lt;/code&gt; folder (Solar System Dynamics, not Solid State Drive), there were several different files, some of them with .DB extension, some of them with .dat extension, and a README.&lt;/p&gt;
&lt;p&gt;The README explained some of the files (a few of them are still a mystery), and I quote what it said about a file named &lt;code&gt;dastcom5.zip&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dastcom5.zip&lt;/p&gt;
&lt;p&gt;Link to a a portable/programmable version of the JPL/Horizons 
 database of asteroids and comets ("DASTCOM5"), updated as often 
 as hourly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Interesting, isn't it?&lt;/p&gt;
&lt;p&gt;Well, after a week, I can now assure that this database has been a great discovery, so this week entry will address mainly about it.&lt;/p&gt;
&lt;h1&gt;DASTCOM5&lt;/h1&gt;
&lt;p&gt;As README says, DASTCOM5 is the name of a JPL-maintained database of asteroids and comets (I think &lt;code&gt;D&lt;/code&gt; stands for Database, &lt;code&gt;AST&lt;/code&gt; for asteroid, &lt;code&gt;COM&lt;/code&gt; for comets, and &lt;code&gt;5&lt;/code&gt; is the current version, but I'm not sure haha).
After downloading and unzipping the file that JPL provides, you can see the following folder structure:&lt;/p&gt;
&lt;p&gt;&lt;img alt="DASTCOM5 folder structure" src="https://www.poliastro.space/images/dastcom5_folder.png" title="DASTCOM5 folder structure"&gt;&lt;/p&gt;
&lt;p&gt;Fortunately, &lt;code&gt;dastcom5.zip&lt;/code&gt; provided a doc folder.&lt;/p&gt;
&lt;p&gt;Inside this folder there was a long README (more than 1200 lines) with a lot of information, which I quote below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DASTCOM5 is a direct-access binary database. It contains heliocentric 
ecliptic osculating elements for the known asteroids and comets, determined 
by a least-squares orbit solution fit to optical and 
radar astrometric measurements.&lt;/p&gt;
&lt;p&gt;[...]&lt;/p&gt;
&lt;p&gt;A total of 142 parameters per object are defined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So DASTCOM5 format was binary (more difficult than JSON), but it contained 142 parameters. Not bad! Let's continue:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The DASTCOM5 distribution .zip file archive contains the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;two binary database files (one holding asteroid data, the second holding
      comet data),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a plain-text index (linking all objects to their DASTCOM5 record, 
      permitting look-up based on name, designation, SPK ID, packed MPC 
      designation, and historical aliases), &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;documentation,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;latest database reader source code (FORTRAN). The software has been 
      tested using GFORTRAN (gfortran), Lahey (lf95), Intel (ifort), and 
      SunStudio (f95) compilers in both 32 and 64-bit builds, under RedHat 
      Linux 4/5/6.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Apparently, DASTCOM5 provided all of the necessary files for building a module &lt;code&gt;poliastro.neos.dastcom5&lt;/code&gt;. We decided to read the two binary databases with Python instead of creating a FORTRAN wrapper, which didn't sound appealing at all.&lt;/p&gt;
&lt;p&gt;Therefore, the first task was to read a comet or asteroid binary record, and the chosen tool was &lt;a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromfile.html"&gt;numpy.fromfile()&lt;/a&gt;, which, as stated on its docs, needs a known data-type. Fortunately, the extensive DASTCOM5 README had a section named &lt;code&gt;DASTCOM5 BYTE MAP&lt;/code&gt; which was really useful.&lt;/p&gt;
&lt;p&gt;&lt;img alt="DASTCOM5 byte map" src="https://www.poliastro.space/images/dastcom5_map.png" title="DASTCOM5 byte map"&gt;&lt;/p&gt;
&lt;p&gt;Knowing the number of bytes and type of each variable, the only difficulty was writing it for each of the 142 variables manually.&lt;/p&gt;
&lt;p&gt;Once that was done, we were able store the full asteroid or comet database as a numpy array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AST_DB_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AST_DTYPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or obtain a single record given a physical record number using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AST_DB_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PHYSICAL_RECORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SEEK_SET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;COM_DTYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, the problem was that DASTCOM5 physical record didn't correspond to a logical record, such as 433 for Eros, or 900001 for 1P/Halley. So, the next task consisted of reading database headers in order to get information about bias between logical and physical record. The resultant function can be found, as usual, on &lt;a href="https://github.com/poliastro/poliastro/blob/8f2f8a42f1a01610971ef1bfee874d72701bb963/src/poliastro/neos/dastcom5.py#L395"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After dealing with records, it was time to start with the lookup function. As stated above, DASTCOM5 package come with a plain text index file containing names, designations, SPK-IDs, packed MPC designations, and historical aliases.&lt;/p&gt;
&lt;p&gt;The file format was sort of CSV, but really ugly to parse, given that alternative designations, alternative SPK-IDs, etc. were all mixed without any order.&lt;/p&gt;
&lt;p&gt;&lt;img alt="DASTCOM5 index file" src="https://www.poliastro.space/images/dastcom5_index.png" title="DASTCOM5 index file"&gt;&lt;/p&gt;
&lt;p&gt;Therefore, as the file was plain text, we decided to read line by line the index, comparing with a string passed as argument. Code is on &lt;a href="https://github.com/poliastro/poliastro"&gt;Github&lt;/a&gt; and anyone is welcome to improve the lookup function as well as any other part of the code :)&lt;/p&gt;
&lt;h1&gt;Downloading DASTCOM5&lt;/h1&gt;
&lt;p&gt;DASTCOM5 isn't an online API, but an online available file, which you need to download in order to use.
Therefore, poliastro needed to provide a good way to download the database without having to stop Python console.&lt;/p&gt;
&lt;p&gt;Unlike previous entry, where we used &lt;code&gt;Request&lt;/code&gt; library in order to communicate with the internet, in this module &lt;a href="https://docs.python.org/3/library/urllib.request.html"&gt;urllib.request&lt;/a&gt; was chosen, since &lt;code&gt;urllib.request.urlretrieve()&lt;/code&gt; can be called using a function as an argument, which is called after each block read. That gave us the opportunity of showing download progress, with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_show_download_progress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transferred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalsize&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;trans_mb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transferred&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;total_mb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;totalsize&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%.2f&lt;/span&gt;&lt;span class="s1"&gt; MB / &lt;/span&gt;&lt;span class="si"&gt;%.2f&lt;/span&gt;&lt;span class="s1"&gt; MB&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trans_mb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_mb&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also, once the download function was finished, we decided to provide CLI support, adding &lt;code&gt;poliastro --download-dastcom5&lt;/code&gt; command.
So, from now, you can download DASTCOM5 database automatically to ~/.poliastro folder either from a Python interpreter or from CLI.&lt;/p&gt;
&lt;h1&gt;NeoWs and DASTCOM5&lt;/h1&gt;
&lt;p&gt;Both NeoWs and DASTCOM5 are currently part of &lt;code&gt;poliastro.neos&lt;/code&gt;, and their functionalities can somehow intersect. But they are completely different in the background, with mainly two differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DASTCOM5 database has data about every asteroid and comet in the solar system, but NeoWs is only available for NEAs (Near Earth Asteroids).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NeoWs is an online API, but DASTCOM5 has to be downloaded in order to be used (~230 MB).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, depending on your needs, you will have to decide which one fits you better, considering that both of them can create an &lt;code&gt;Orbit&lt;/code&gt; given a name, SPK-ID, etc.&lt;/p&gt;
&lt;p&gt;However, the resultant orbits using the two functions are exactly equal, as you can check in the following example using Eros:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.neos&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;neows&lt;/span&gt;
&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Earth equatorial radius&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;already&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;astropy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jupiter equatorial radius&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;already&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;astropy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.neos&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dastcom5&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.plotting&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrbitPlotter&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;eros_neows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orbit_from_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eros&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;eros_dastcom5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dastcom5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orbit_from_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eros&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrbitPlotter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eros_neows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Eros from NeoWs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Line2D&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1e0c0d68940&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Line2D&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1e0b9a71438&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eros_dastcom5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Eros from DASTCOM5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Line2D&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1e0c0e38780&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Line2D&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1e0c0e3a8d0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Eros orbit comparison" src="https://www.poliastro.space/images/eros_comparison.png" title="Eros orbit comparison"&gt;&lt;/p&gt;
&lt;p&gt;That was all for this week (two weeks actually, sorry for that). Now poliastro has two ways of dealing with NEOs, each one with its advantages and disadvantages, and you can try any of them.
Probably, the next week entry will be about a completely different topic, not exactly related to NEOS, but I can't disclose anything right now :P See you!&lt;/p&gt;</content><category term="SOCIS"></category><category term="SOCIS"></category><category term="poliastro"></category><category term="NASA"></category><category term="DASTCOM5"></category><category term="APIs"></category><category term="JPL"></category><category term="mocking"></category></entry><entry><title>NeoWs, SPK-ID and parsing (SOCIS 2017)</title><link href="https://www.poliastro.space/blog/2017/07/31/2017-07-31-neows-spk-id-and-parsing-socis/" rel="alternate"></link><published>2017-07-31T22:30:00+02:00</published><updated>2017-07-31T22:30:00+02:00</updated><author><name>Antonio Hidalgo Galindo</name></author><id>tag:www.poliastro.space,2017-07-31:/blog/2017/07/31/2017-07-31-neows-spk-id-and-parsing-socis/</id><summary type="html">&lt;p&gt;In the previous entry, several different APIs related to NEOs were studied, and finally &lt;a href="https://api.nasa.gov/neo/?api_key=DEMO_KEY"&gt;NeoWs&lt;/a&gt; was chosen to start working with.&lt;/p&gt;
&lt;p&gt;This week, we aimed to start with coding itself, adding an &lt;code&gt;orbit_from_spk_id&lt;/code&gt; function to newly created &lt;code&gt;poliastro.neos module&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to achieve this, the first step was researching how NeoWs API exactly works.&lt;/p&gt;
&lt;h2&gt;NeoWs operation&lt;/h2&gt;
&lt;p&gt;As stated in the prevoius article of this "series", this API provides several different functionalities, but, for the moment, we were only interested in the lookup service.&lt;/p&gt;
&lt;p&gt;It also counts with web documentation, which was a really good start point, as you can see:&lt;/p&gt;
&lt;p&gt;&lt;img alt="NeoWs Documentation" src="https://www.poliastro.space/images/neows_lookup.png" title="NeoWs Documentation"&gt;&lt;/p&gt;
&lt;p&gt;When using the lookup service (and any NASA API) you need an &lt;code&gt;API key&lt;/code&gt;, but we used &lt;code&gt;DEMO_KEY&lt;/code&gt;, which only limits your queries to 40 per hour. Having that in mind, all you need to do is a query …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the previous entry, several different APIs related to NEOs were studied, and finally &lt;a href="https://api.nasa.gov/neo/?api_key=DEMO_KEY"&gt;NeoWs&lt;/a&gt; was chosen to start working with.&lt;/p&gt;
&lt;p&gt;This week, we aimed to start with coding itself, adding an &lt;code&gt;orbit_from_spk_id&lt;/code&gt; function to newly created &lt;code&gt;poliastro.neos module&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to achieve this, the first step was researching how NeoWs API exactly works.&lt;/p&gt;
&lt;h2&gt;NeoWs operation&lt;/h2&gt;
&lt;p&gt;As stated in the prevoius article of this "series", this API provides several different functionalities, but, for the moment, we were only interested in the lookup service.&lt;/p&gt;
&lt;p&gt;It also counts with web documentation, which was a really good start point, as you can see:&lt;/p&gt;
&lt;p&gt;&lt;img alt="NeoWs Documentation" src="https://www.poliastro.space/images/neows_lookup.png" title="NeoWs Documentation"&gt;&lt;/p&gt;
&lt;p&gt;When using the lookup service (and any NASA API) you need an &lt;code&gt;API key&lt;/code&gt;, but we used &lt;code&gt;DEMO_KEY&lt;/code&gt;, which only limits your queries to 40 per hour. Having that in mind, all you need to do is a query with a body SPK-ID (we will explain this number later), and, if all goes well, the API will answer your query with a JSON response, containing the following data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Body information&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Name, ID, hazard, ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Orbital data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next close approachs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, we were mainly interested in orbital data. But, what would mean "orbital data"? A simple query using &lt;a href="https://en.wikipedia.org/wiki/433_Eros"&gt;Eros asteroid&lt;/a&gt; SPK-ID, gave us the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;tal&lt;/span&gt;&lt;span class="err"&gt;_da&lt;/span&gt;&lt;span class="kc"&gt;ta&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;611&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;_de&lt;/span&gt;&lt;span class="kc"&gt;ter&lt;/span&gt;&lt;span class="err"&gt;mi&lt;/span&gt;&lt;span class="kc"&gt;nat&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_da&lt;/span&gt;&lt;span class="kc"&gt;te&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;2017-06-06&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;_u&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;cer&lt;/span&gt;&lt;span class="kc"&gt;ta&lt;/span&gt;&lt;span class="err"&gt;i&lt;/span&gt;&lt;span class="kc"&gt;nt&lt;/span&gt;&lt;span class="err"&gt;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;mi&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;imum_orbi&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;_i&lt;/span&gt;&lt;span class="kc"&gt;nterse&lt;/span&gt;&lt;span class="err"&gt;c&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;.&lt;/span&gt;&lt;span class="mi"&gt;150505&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;jupi&lt;/span&gt;&lt;span class="kc"&gt;ter&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;issera&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;d_i&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;varia&lt;/span&gt;&lt;span class="kc"&gt;nt&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;4.583&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;epoch_oscula&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;2458000.5&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;ecce&lt;/span&gt;&lt;span class="kc"&gt;ntr&lt;/span&gt;&lt;span class="err"&gt;ici&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;.&lt;/span&gt;&lt;span class="mi"&gt;2225889698301071&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;semi_major_axis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;1.457940027185708&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;cli&lt;/span&gt;&lt;span class="kc"&gt;nat&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;10.82759100494802&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;asce&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;di&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;g_&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ode_lo&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;gi&lt;/span&gt;&lt;span class="kc"&gt;tu&lt;/span&gt;&lt;span class="err"&gt;de&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;304.3221633898424&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;tal&lt;/span&gt;&lt;span class="err"&gt;_period&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;642.9954742523677&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;perihelio&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_dis&lt;/span&gt;&lt;span class="kc"&gt;tan&lt;/span&gt;&lt;span class="err"&gt;ce&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;1.133418658460363&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;perihelio&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_argume&lt;/span&gt;&lt;span class="kc"&gt;nt&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;178.8165910886752&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;aphelio&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_dis&lt;/span&gt;&lt;span class="kc"&gt;tan&lt;/span&gt;&lt;span class="err"&gt;ce&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;1.782461395911054&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;perihelio&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;ime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;2457873.186399333365&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;mea&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_a&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;omaly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;71.28027812836476&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;mea&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_mo&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;.&lt;/span&gt;&lt;span class="mi"&gt;5598795239089109&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;equi&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;J&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not bad at all!&lt;/p&gt;
&lt;p&gt;If you are familiar with astrophysics, you will probably know about classical orbital elements. If you are more a computer scientist than an astrophysicist, &lt;a href="https://en.wikipedia.org/wiki/Orbital_elements#Keplerian_elements"&gt;classical orbital elements&lt;/a&gt; are just six parameters which determine orbit and body position in that orbit at a given time.&lt;/p&gt;
&lt;p&gt;There are several ways to create an &lt;a href="https://poliastro.readthedocs.io/en/latest/api.html#module-poliastro.twobody.orbit.Orbit"&gt;Orbit&lt;/a&gt; object in poliastro, but it seemed that we had all the necessary parameters to create one with &lt;a href="https://poliastro.readthedocs.io/en/latest/api.html#module-poliastro.twobody.orbit.Orbit.from_classical"&gt;from_classical() function&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, after retrieving API information, we were ready to start coding :)&lt;/p&gt;
&lt;h2&gt;orbit_from_spk_id()&lt;/h2&gt;
&lt;p&gt;Since you can see the &lt;code&gt;neos module&lt;/code&gt; code on &lt;a href="https://github.com/poliastro/poliastro/blob/master/src/poliastro/neos.py"&gt;Github&lt;/a&gt;, I won't write much about it here.&lt;/p&gt;
&lt;p&gt;We decided to use &lt;a href="http://docs.python-requests.org/en/master/"&gt;Requests library&lt;/a&gt;, which is really easy and has its own JSON parser.&lt;/p&gt;
&lt;p&gt;The function created is really simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, a GET request is send with SPK-ID as a parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there is a 4xx or 5xx error, it raises an exception.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Else, it parses classical orbital elements, which are used then to&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create and return an Orbit object.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After that, we were able to create such a beautiful code :P :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;neos&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.bodies&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Earth&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.twobody.orbit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.plotting&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrbitPlotter&lt;/span&gt;

&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrbitPlotter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;apophis_orbit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orbit_from_spk_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2099942&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Apophis SPK-ID&lt;/span&gt;
&lt;span class="n"&gt;earth_orbit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;Orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_body_ephem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Earth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;earth_orbit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Earth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apophis_orbit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Apophis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which produces:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Apophis Orbit" src="https://www.poliastro.space/images/apophis.png" title="Apophis Orbit"&gt;&lt;/p&gt;
&lt;p&gt;The function was coded and it worked, but there were still some problems.&lt;/p&gt;
&lt;p&gt;As I said in the previous entry, &lt;code&gt;NeoWs&lt;/code&gt; has pros (that's why we decided to use it), but also has some cons, and one of them is that it only allows to browse by SPK-ID number.&lt;/p&gt;
&lt;h2&gt;SPK-ID and orbit_from_name()&lt;/h2&gt;
&lt;p&gt;SPK-ID (do not confuse with IAU number) is a number that &lt;a href="https://www.jpl.nasa.gov/"&gt;JPL&lt;/a&gt; uses to catalog small-bodies in their database, so it isn't easy to find unless you search in &lt;a href="https://ssd.jpl.nasa.gov/sbdb.cgi"&gt;JPL Small-bodies Database&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Having to use internet in order to find every SPK-ID would be really boring, so the next logical step was coding a function that, given a name, searched the corresponding SPK-ID. Combining this function with the previously written, &lt;code&gt;orbit_from_name&lt;/code&gt; function would be trivial.&lt;/p&gt;
&lt;p&gt;As I said, the only way that we had to find SPK-IDs was using JPL Small-bodies Database, but it doesn't provide machine-readable data (web interface isn't really modern either, as you can see), so a HTML parser was needed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SBDB interface" src="https://www.poliastro.space/images/sbdb_interface.png" title="SBDB interface"&gt;&lt;/p&gt;
&lt;p&gt;We wrote an &lt;code&gt;name_from_spk_id()&lt;/code&gt; function that basically makes a GET request to SBDB with a string. After that, there are three options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If an object exists with that name, SPK-ID is parsed and returned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there are several objects that matches the query, an exception is raised with the list of those objects, and function return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If no objects were found, an exception is raised and function return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, code is available on &lt;a href="https://github.com/poliastro/poliastro/blob/master/src/poliastro/neos.py"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Modules with HTML parsing in them are usually ugly, and this one is no exception, but it works, so currently you can get a NEO orbit (only NEAs at the moment, but it's equally great) by name or IAU number.&lt;/p&gt;
&lt;p&gt;Next days, we will probably take a close look at some JPL offline databases we found yesterday, so we don't know if we'll continue with the same code or we'll change radically. That means that next week entry topic will be completly unknown until then ;) See you!&lt;/p&gt;</content><category term="SOCIS"></category><category term="SOCIS"></category><category term="poliastro"></category><category term="NASA"></category><category term="NeoWs"></category><category term="APIs"></category><category term="HTML"></category><category term="parsing"></category></entry><entry><title>NeoWs, SPK-ID y parsing (SOCIS 2017)</title><link href="https://www.poliastro.space/2017-07-31-neows-spk-id-and-parsing-socis-es.html" rel="alternate"></link><published>2017-07-31T22:30:00+02:00</published><updated>2017-07-31T22:30:00+02:00</updated><author><name>Antonio Hidalgo Galindo</name></author><id>tag:www.poliastro.space,2017-07-31:/2017-07-31-neows-spk-id-and-parsing-socis-es.html</id><summary type="html">&lt;p&gt;En la anterior entrada, estudiamos diferentes APIs relacionadas con NEOs, y finalmente elegimos &lt;a href="https://api.nasa.gov/neo/?api_key=DEMO_KEY"&gt;NeoWs&lt;/a&gt; para empezar a trabajar.&lt;/p&gt;
&lt;p&gt;Esta semana, nuestro objetivo era empezar con la propia programación, añadiendo una función de la forma &lt;code&gt;orbit_from_spk_id&lt;/code&gt; al nuevo módulo &lt;code&gt;poliastro.neos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para conseguir esto, el primer paso era investigar el funcionamiento exacto de la API NeoWs.&lt;/p&gt;
&lt;h2&gt;Funcionamiento de NeoWs&lt;/h2&gt;
&lt;p&gt;En la anterior entrada de esta "serie", ya dijimos que esta API proporciona varias funcionalidades distintas, pero, por el momento, solo nos interesaba el servicio de búsqueda.&lt;/p&gt;
&lt;p&gt;Además, también proporciona una documentación web, que es un buen sitio para empezar, como se puede ver:&lt;/p&gt;
&lt;p&gt;&lt;img alt="NeoWs Documentation" src="https://www.poliastro.space/images/neows_lookup.png" title="NeoWs Documentation"&gt;&lt;/p&gt;
&lt;p&gt;Al usar el servicio de búsqueda (y cualquier otra API de la NASA), necesitas una &lt;code&gt;API key&lt;/code&gt;, pero nosotro usamos &lt;code&gt;DEMO_KEY&lt;/code&gt;, que únicamente límita las peticiones a 40 por hora. Con esto en mente, lo único que necesitas …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En la anterior entrada, estudiamos diferentes APIs relacionadas con NEOs, y finalmente elegimos &lt;a href="https://api.nasa.gov/neo/?api_key=DEMO_KEY"&gt;NeoWs&lt;/a&gt; para empezar a trabajar.&lt;/p&gt;
&lt;p&gt;Esta semana, nuestro objetivo era empezar con la propia programación, añadiendo una función de la forma &lt;code&gt;orbit_from_spk_id&lt;/code&gt; al nuevo módulo &lt;code&gt;poliastro.neos&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para conseguir esto, el primer paso era investigar el funcionamiento exacto de la API NeoWs.&lt;/p&gt;
&lt;h2&gt;Funcionamiento de NeoWs&lt;/h2&gt;
&lt;p&gt;En la anterior entrada de esta "serie", ya dijimos que esta API proporciona varias funcionalidades distintas, pero, por el momento, solo nos interesaba el servicio de búsqueda.&lt;/p&gt;
&lt;p&gt;Además, también proporciona una documentación web, que es un buen sitio para empezar, como se puede ver:&lt;/p&gt;
&lt;p&gt;&lt;img alt="NeoWs Documentation" src="https://www.poliastro.space/images/neows_lookup.png" title="NeoWs Documentation"&gt;&lt;/p&gt;
&lt;p&gt;Al usar el servicio de búsqueda (y cualquier otra API de la NASA), necesitas una &lt;code&gt;API key&lt;/code&gt;, pero nosotro usamos &lt;code&gt;DEMO_KEY&lt;/code&gt;, que únicamente límita las peticiones a 40 por hora. Con esto en mente, lo único que necesitas es hacer una petición con un SPK-ID (explicaremos este número después) y, si todo va bien, la API responderá con datos en formato JSON, que contienen la siguiente información:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Información sobre el cuerpo&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nombre, ID, peligrosidad, ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Datos orbitales&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Próximas aproximaciones&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nostros sólo estábamos interesados en los datos orbitales. Pero, ¿que querría decir exáctamente "datos orbitales"? Una simple petición usando el SPK-ID del asteroide &lt;a href="https://es.wikipedia.org/wiki/433_Eros"&gt;Eros&lt;/a&gt; nos dio lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;tal&lt;/span&gt;&lt;span class="err"&gt;_da&lt;/span&gt;&lt;span class="kc"&gt;ta&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;611&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;_de&lt;/span&gt;&lt;span class="kc"&gt;ter&lt;/span&gt;&lt;span class="err"&gt;mi&lt;/span&gt;&lt;span class="kc"&gt;nat&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_da&lt;/span&gt;&lt;span class="kc"&gt;te&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;2017-06-06&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;_u&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;cer&lt;/span&gt;&lt;span class="kc"&gt;ta&lt;/span&gt;&lt;span class="err"&gt;i&lt;/span&gt;&lt;span class="kc"&gt;nt&lt;/span&gt;&lt;span class="err"&gt;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;mi&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;imum_orbi&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;_i&lt;/span&gt;&lt;span class="kc"&gt;nterse&lt;/span&gt;&lt;span class="err"&gt;c&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;.&lt;/span&gt;&lt;span class="mi"&gt;150505&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;jupi&lt;/span&gt;&lt;span class="kc"&gt;ter&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;issera&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;d_i&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;varia&lt;/span&gt;&lt;span class="kc"&gt;nt&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;4.583&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;epoch_oscula&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;2458000.5&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;ecce&lt;/span&gt;&lt;span class="kc"&gt;ntr&lt;/span&gt;&lt;span class="err"&gt;ici&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;.&lt;/span&gt;&lt;span class="mi"&gt;2225889698301071&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;semi_major_axis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;1.457940027185708&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;cli&lt;/span&gt;&lt;span class="kc"&gt;nat&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;10.82759100494802&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;asce&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;di&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;g_&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ode_lo&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;gi&lt;/span&gt;&lt;span class="kc"&gt;tu&lt;/span&gt;&lt;span class="err"&gt;de&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;304.3221633898424&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;tal&lt;/span&gt;&lt;span class="err"&gt;_period&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;642.9954742523677&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;perihelio&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_dis&lt;/span&gt;&lt;span class="kc"&gt;tan&lt;/span&gt;&lt;span class="err"&gt;ce&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;1.133418658460363&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;perihelio&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_argume&lt;/span&gt;&lt;span class="kc"&gt;nt&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;178.8165910886752&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;aphelio&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_dis&lt;/span&gt;&lt;span class="kc"&gt;tan&lt;/span&gt;&lt;span class="err"&gt;ce&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;1.782461395911054&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;perihelio&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;ime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;2457873.186399333365&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;mea&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_a&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;omaly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;71.28027812836476&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;mea&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_mo&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;.&lt;/span&gt;&lt;span class="mi"&gt;5598795239089109&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;equi&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;J&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;No está mal!&lt;/p&gt;
&lt;p&gt;Si estás familiarizado con la astrofísica, probablemente sabrás lo que son los elementos orbitales keplerianos. Si eres más informático que astrofísico, los &lt;a href="https://es.wikipedia.org/wiki/Elementos_orbitales"&gt;elementos orbitales keplerianos&lt;/a&gt; son simplemente seis parámetros que permiten determinar completamente una orbita y la posición del cuerpo en ella en cierto instante.&lt;/p&gt;
&lt;p&gt;En poliastro hay varias formas de crear un objecto &lt;a href="https://poliastro.readthedocs.io/en/latest/api.html#module-poliastro.twobody.orbit.Orbit"&gt;Orbit&lt;/a&gt;, pero parecía que teníamos todos los parámetros necesarios para crear uno usando la función &lt;a href="https://poliastro.readthedocs.io/en/latest/api.html#module-poliastro.twobody.orbit.Orbit.from_classical"&gt;from_classical()&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Así que, después de recabar información sobre la API, ya estábamos listo para empezar a programar :)&lt;/p&gt;
&lt;h2&gt;orbit_from_spk_id()&lt;/h2&gt;
&lt;p&gt;Ya que el código del módulo &lt;code&gt;neos.py&lt;/code&gt; está disponible en &lt;a href="https://github.com/poliastro/poliastro/blob/master/src/poliastro/neos.py"&gt;Github&lt;/a&gt;, no hablaré demasiado sobre ello en esta entrada.&lt;/p&gt;
&lt;p&gt;Para la parte de peticiones a internet, decidimos usar la librería &lt;a href="http://docs.python-requests.org/en/master/"&gt;Requests&lt;/a&gt;, bastante sencilla y además con su propio parser de JSON.&lt;/p&gt;
&lt;p&gt;La función que creamos es muy simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Primero se envía una petición GET con un número SPK-ID como parámetro.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Si hay un error 4xx o 5xx, se produce una excepción.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Si no, se parsean los elementos orbitales, que se usan para&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;crear y devolver un objeto Orbit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Con esta función fuimos capaces de crear este código tan bonito :P :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;neos&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.bodies&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Earth&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.twobody.orbit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.plotting&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrbitPlotter&lt;/span&gt;

&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrbitPlotter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;apophis_orbit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orbit_from_spk_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2099942&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Apophis SPK-ID&lt;/span&gt;
&lt;span class="n"&gt;earth_orbit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;Orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_body_ephem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Earth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;earth_orbit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Earth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apophis_orbit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Apophis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;que produce:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Apophis Orbit" src="https://www.poliastro.space/images/apophis.png" title="Apophis Orbit"&gt;&lt;/p&gt;
&lt;p&gt;La función hacía su trabajo, pero aún había algunos problemas.&lt;/p&gt;
&lt;p&gt;Como dije en la anterior entrada, &lt;code&gt;NeoWs&lt;/code&gt; tiene ventajas (por eso decidimos usarla), pero también algunas desventajas, y una de ellas es que sólo permite buscar por número SPK-ID.&lt;/p&gt;
&lt;h2&gt;SPK-ID y orbit_from_name()&lt;/h2&gt;
&lt;p&gt;El SPK-ID (con confundir con el número IAU) es un número que el &lt;a href="https://www.jpl.nasa.gov/"&gt;JPL&lt;/a&gt; utiliza para catalogar los cuerpos menores en su base de datos, y por eso no es fácil de encontrar a no ser que busques en la &lt;a href="https://ssd.jpl.nasa.gov/sbdb.cgi"&gt;base de datos de cuerpos menores del JPL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tener que usar internet para encontrar cada SPK-ID sería bastante aburrido, así que el paso más lógico para nosotros era escribir una función que, dado un nombre, encontrase el correspondiente SPK-ID. Combinando esta función y la escrita anteriormente, la siguiente función &lt;code&gt;orbit_from_name&lt;/code&gt; sería trivial.&lt;/p&gt;
&lt;p&gt;Como ya he dicho, la única manera de encontrar el SPK-ID de un cuerpo es usar la base de datos del JPL, pero desgraciadamente no proporciona datos en formato máquina (la interfaz web tampoco es demsiado moderna, como se puede ver) así que necesitabamos un parser HTML.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SBDB interface" src="https://www.poliastro.space/images/sbdb_interface.png" title="SBDB interface"&gt;&lt;/p&gt;
&lt;p&gt;Escribimos una función &lt;code&gt;name_from_spk_id()&lt;/code&gt; que básicamente hace una petición GET a la página con una cadena (nombre) como parámetro. Tras eso, pueden pasar tres cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Si hay un objeto con ese nombre, se parsea y se devuelve el SPK-ID.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Si hay varios objetos con ese nombre, se produce una excepción con la lista de objetos, y se devuelve &lt;code&gt;None&lt;/code&gt; en la función.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Si no se encuentra ningún objeto, se produce una excepción y la función devuelve &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El código también está disponible en &lt;a href="https://github.com/poliastro/poliastro/blob/master/src/poliastro/neos.py"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Las funciones que parsean HTML suelen ser feas, y ésta no es una excepción, pero funciona, así que ahora mismo puedes conseguir la órbita de un NEO (en realidad sólo de NEAs de momento, pero sigue estando bien) por nombre o número IAU.&lt;/p&gt;
&lt;p&gt;En los próximos días probablemente analizaremos en profundidad algunas bases de datos offline del JPL que encontramos ayer, así que no sabemos si continuaremos programando en esta línea o cambiaremos radicalmente. Eso significa que el tema de la entrada de la semana que viene será un misterio hasta entonces ;) Nos vemos!&lt;/p&gt;</content><category term="SOCIS"></category><category term="SOCIS"></category><category term="poliastro"></category><category term="NASA"></category><category term="NeoWs"></category><category term="APIs"></category><category term="HTML"></category><category term="parsing"></category></entry><entry><title>Space APIs, JSON and REST (SOCIS 2017)</title><link href="https://www.poliastro.space/blog/2017/07/25/2017-07-25-space-apis-json-and-rest-socis/" rel="alternate"></link><published>2017-07-25T14:00:00+02:00</published><updated>2017-07-25T14:00:00+02:00</updated><author><name>Antonio Hidalgo Galindo</name></author><id>tag:www.poliastro.space,2017-07-25:/blog/2017/07/25/2017-07-25-space-apis-json-and-rest-socis/</id><summary type="html">&lt;p&gt;After setting up the blog, it was time to start with the first week of my &lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo#timeline"&gt;timeline&lt;/a&gt;. The task for this week was to research the available NASA Open APIs and other NEOs databases that could better fit for this project.&lt;/p&gt;
&lt;p&gt;I had already studied some APIs, and taked a look at their capabilities, but further research was needed. As my &lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo#proposal"&gt;proposal&lt;/a&gt; was made of 3 different pages, I analyzed each one separately.&lt;/p&gt;
&lt;h2&gt;CNEOS page&lt;/h2&gt;
&lt;p&gt;In the &lt;a href="https://cneos.jpl.nasa.gov/orbits/"&gt;CNEOS page&lt;/a&gt; there is a list of tools, but it can be shorten to four different APIs/Databases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd.jpl.nasa.gov/sbdb.cgi"&gt;JPL Small-Body Database Browser&lt;/a&gt;: allows to search any small-body (like NEOs) by entering the IAU number, name, or designation, and also supports wild-cards &lt;code&gt;*&lt;/code&gt; and/or &lt;code&gt;?&lt;/code&gt;. Available data include, quoting the page itself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;orbital elements&lt;/li&gt;
&lt;li&gt;orbit diagrams&lt;/li&gt;
&lt;li&gt;physical parameters&lt;/li&gt;
&lt;li&gt;discovery circumstances&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Newly discovered objects and their …&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;After setting up the blog, it was time to start with the first week of my &lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo#timeline"&gt;timeline&lt;/a&gt;. The task for this week was to research the available NASA Open APIs and other NEOs databases that could better fit for this project.&lt;/p&gt;
&lt;p&gt;I had already studied some APIs, and taked a look at their capabilities, but further research was needed. As my &lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo#proposal"&gt;proposal&lt;/a&gt; was made of 3 different pages, I analyzed each one separately.&lt;/p&gt;
&lt;h2&gt;CNEOS page&lt;/h2&gt;
&lt;p&gt;In the &lt;a href="https://cneos.jpl.nasa.gov/orbits/"&gt;CNEOS page&lt;/a&gt; there is a list of tools, but it can be shorten to four different APIs/Databases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd.jpl.nasa.gov/sbdb.cgi"&gt;JPL Small-Body Database Browser&lt;/a&gt;: allows to search any small-body (like NEOs) by entering the IAU number, name, or designation, and also supports wild-cards &lt;code&gt;*&lt;/code&gt; and/or &lt;code&gt;?&lt;/code&gt;. Available data include, quoting the page itself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;orbital elements&lt;/li&gt;
&lt;li&gt;orbit diagrams&lt;/li&gt;
&lt;li&gt;physical parameters&lt;/li&gt;
&lt;li&gt;discovery circumstances&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Newly discovered objects and their orbits are added on a daily basis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd.jpl.nasa.gov/sbdb_query.cgi"&gt;JPL Small-Body Database Search Engine&lt;/a&gt;: can be used to generate custom tables of orbital and/or physical parameters for all asteroids and comets or a specified sub-set. There is a huge amount of search contraints, for example:
&lt;img alt="Figure 1" src="https://www.poliastro.space/images/sbdb_constraints.jpg" title="Figure 1"&gt;
And you can also select output fields, and choose between HTML and CSV output format.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd.jpl.nasa.gov/?horizons"&gt;Horizons&lt;/a&gt;: provides access to highly accurate ephemerides for solar system objects, not only small-body. Can be accessed using telnet, email and web-interface.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;NEOWS&lt;/h2&gt;
&lt;p&gt;Among NASA OPEN APIs, it is &lt;a href="https://api.nasa.gov/neo/?api_key=DEMO_KEY"&gt;NeoWs&lt;/a&gt;. It can be used to get lists of Near Earth Objects (within a date range, for today...), and to retrieve orbital elements and close aproaches data given a SPK-ID (integer code that &lt;a href="https://www.jpl.nasa.gov/"&gt;JPL&lt;/a&gt; uses to identify objects). Despite his name, only works with NEAs (Near Earth Asteroids), and therefore there is no information about comets.&lt;/p&gt;
&lt;h2&gt;JPL SSD/CNEOS API SERVICE&lt;/h2&gt;
&lt;p&gt;As stated on his web, &lt;a href="https://ssd-api.jpl.nasa.gov/"&gt;JPL SSD/CNEOS API SERVICE&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;provides an interface to machine-readable data (JSON-format) related to SSD and CNEOS.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The more relevant tools are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd-api.jpl.nasa.gov/doc/cad.html"&gt;Close-Approach Data (CAD)&lt;/a&gt;: provides access to current close-approach data for all asteroids and comets in JPL Small-Body DataBase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://cneos.jpl.nasa.gov/nhats/"&gt;Accessible NEAs (NHATS)&lt;/a&gt;: is provided by Near-Earth Object Human Space Flight Accessible Targets Study (&lt;a href="https://cneos.jpl.nasa.gov/nhats/intro.html"&gt;NHATS&lt;/a&gt;), and can be used to identify those NEAs that may be well-suited to future human space flight round trip rendezvous missions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd-api.jpl.nasa.gov/doc/scout.html"&gt;Scout&lt;/a&gt;: Scout system provides trajectory analysis and hazard assessment for recently detected objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://cneos.jpl.nasa.gov/sentry/"&gt;Sentry&lt;/a&gt;: Sentry is a highly automated collision monitoring system that continually scans the most current asteroid catalog for possibilities of future impact.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Choosing the APIs&lt;/h2&gt;
&lt;p&gt;Once all the possibilities were studied, it was time to choose the APIs that seem more suitable for our purpose.&lt;/p&gt;
&lt;p&gt;Given that &lt;code&gt;poliastro&lt;/code&gt; core are &lt;a href="https://poliastro.readthedocs.io/en/latest/api.html#poliastro.twobody.orbit.Orbit"&gt;Orbit&lt;/a&gt; objects, our main goal is to automatically create a NEO orbit, based on data from internet APIs. In order to achieve this, orbital elements or position and velocity vectors are needed, so this was the first requeriment that APIs had to comply with.&lt;/p&gt;
&lt;p&gt;Therefore several APIs could be discarded because they do not provide needed data: &lt;code&gt;Accesible NEAs&lt;/code&gt;, &lt;code&gt;Scout&lt;/code&gt;, &lt;code&gt;Sentry&lt;/code&gt; and &lt;code&gt;Close-Approach Data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since we would rather not have to deal with intricate POST requests, another important requeriment for APIs was to provide a good interface (the "I" in API stands for interface, so...), and with luck something close to &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;RESTFul webservices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JPL Small-Body Database Search Engine&lt;/code&gt; requires POST requests that are more than 150 lines long, so we automatically discarded it.&lt;/p&gt;
&lt;p&gt;Finally, the third requeriment, considering that we are writing code in Python, was machine-readable data output, with JSON being the best format and awfully written HTML being the worst.&lt;/p&gt;
&lt;p&gt;Both &lt;code&gt;JPL Small-Body Database Browser&lt;/code&gt; and &lt;code&gt;Horizons&lt;/code&gt; provide HTML output, which have to be parsed, with all the risks that imply, so they were discarded.&lt;/p&gt;
&lt;p&gt;In order to clarify all of this data sequence, I made a table:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;API&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Orbital elements?&lt;/th&gt;
&lt;th style="text-align: center;"&gt;REST-style?&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Machine-readable?&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Other&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;JPL Small-Body Database Browser&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Not limited to NEOs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;JPL Small-Body Database Search Engine&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes (CSV)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Not limited to NEOs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Horizons&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;[existent Python interface]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;NeoWs&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Only for NEAs (asteroids)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Close-Approach Data (CAD)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Accessible NEAs (NHATS)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Scout&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Sentry&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;[existent Python interface]: https://github.com/mommermi/callhorizons&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;With all this requeriments in mind, the best option seemed to be &lt;code&gt;NeoWs&lt;/code&gt;. Although it doesn't provides information about NECs (comets), they are only 0.7% of NEOs total, so they could be discarded (only for the moment :P). Another issue related to &lt;code&gt;NeoWs&lt;/code&gt; is the fact that it only allows to browse by SPK-ID number (do not confuse with IAU number), which is unknown for most people, so before doing any query, SPK-ID number has to be found.&lt;/p&gt;
&lt;p&gt;And that was all for this week. Next week, we will start with coding itself, adding an &lt;code&gt;orbit_from_spk_id&lt;/code&gt; function to &lt;code&gt;poliastro&lt;/code&gt;, that queries &lt;code&gt;NeoWs&lt;/code&gt; API. See you!&lt;/p&gt;</content><category term="SOCIS"></category><category term="SOCIS"></category><category term="ESA"></category><category term="poliastro"></category><category term="NASA"></category><category term="APIs"></category><category term="open data"></category></entry><entry><title>APIs espaciales, JSON y REST (SOCIS 2017)</title><link href="https://www.poliastro.space/2017-07-25-space-apis-json-and-rest-socis-es.html" rel="alternate"></link><published>2017-07-25T14:00:00+02:00</published><updated>2017-07-25T14:00:00+02:00</updated><author><name>Antonio Hidalgo Galindo</name></author><id>tag:www.poliastro.space,2017-07-25:/2017-07-25-space-apis-json-and-rest-socis-es.html</id><summary type="html">&lt;p&gt;Después de montar el blog, era el momento de empezar con la primera semana de mi &lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo#timeline"&gt;timeline&lt;/a&gt;. La tarea de esta semana era investigar las APIs de la NASA disponibles y otras bases de datos de NEOs que pudiesen ser útiles para este proyecto.&lt;/p&gt;
&lt;p&gt;Ya había estudiado algunas APIs y echado un vistazo a sus posibilidades, pero hacía falta una investigación más profunda. Como mi &lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo#proposal"&gt;propuesta&lt;/a&gt; se componía de 3 páginas diferentes, decidí analizar cada una por separado.&lt;/p&gt;
&lt;h2&gt;CNEOS&lt;/h2&gt;
&lt;p&gt;En la página del &lt;a href="https://cneos.jpl.nasa.gov/orbits/"&gt;CNEOS&lt;/a&gt; hay una lista de distintas herramientas, pero puede ser acortada a las siguientes APIs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd.jpl.nasa.gov/sbdb.cgi"&gt;JPL Small-Body Database Browser&lt;/a&gt;: permite buscar cualquier cuerpo menor (como los NEOs) mediante su número IAU, nombre o designación, y también soporta los caracteres comodín &lt;code&gt;*&lt;/code&gt; y/o &lt;code&gt;?&lt;/code&gt;. Los datos disponibles incluyen, citando a la propia página:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;elementos orbitales&lt;/li&gt;
&lt;li&gt;diagramas orbitales&lt;/li&gt;
&lt;li&gt;parámetros físicos …&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Después de montar el blog, era el momento de empezar con la primera semana de mi &lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo#timeline"&gt;timeline&lt;/a&gt;. La tarea de esta semana era investigar las APIs de la NASA disponibles y otras bases de datos de NEOs que pudiesen ser útiles para este proyecto.&lt;/p&gt;
&lt;p&gt;Ya había estudiado algunas APIs y echado un vistazo a sus posibilidades, pero hacía falta una investigación más profunda. Como mi &lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo#proposal"&gt;propuesta&lt;/a&gt; se componía de 3 páginas diferentes, decidí analizar cada una por separado.&lt;/p&gt;
&lt;h2&gt;CNEOS&lt;/h2&gt;
&lt;p&gt;En la página del &lt;a href="https://cneos.jpl.nasa.gov/orbits/"&gt;CNEOS&lt;/a&gt; hay una lista de distintas herramientas, pero puede ser acortada a las siguientes APIs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd.jpl.nasa.gov/sbdb.cgi"&gt;JPL Small-Body Database Browser&lt;/a&gt;: permite buscar cualquier cuerpo menor (como los NEOs) mediante su número IAU, nombre o designación, y también soporta los caracteres comodín &lt;code&gt;*&lt;/code&gt; y/o &lt;code&gt;?&lt;/code&gt;. Los datos disponibles incluyen, citando a la propia página:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;elementos orbitales&lt;/li&gt;
&lt;li&gt;diagramas orbitales&lt;/li&gt;
&lt;li&gt;parámetros físicos&lt;/li&gt;
&lt;li&gt;circunstancias sobre el descubrimiento&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Los nuevos objetos descubiertos y sus órbitas son añadidos de forma diaria.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd.jpl.nasa.gov/sbdb_query.cgi"&gt;JPL Small-Body Database Search Engine&lt;/a&gt;: permite generar tablas personalizadas con datos orbitales y parámetros físicos de un subconjunto de todos los asteroides y cometas. Permite una gran cantidad de restricciones de búsqueda, por ejemplo:
&lt;img alt="Figure 1" src="https://www.poliastro.space/images/sbdb_constraints.jpg" title="Figure 1"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;También permite seleccionar los datos de salida, y elegir entre HTML y CSV.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ssd.jpl.nasa.gov/?horizons"&gt;Horizons&lt;/a&gt;: proporciona acceso a efemérides de alta precisión para objetos del sistema solar, no solo cuerpos menores. Se puede acceder mediante telnet, email y una interfaz web.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;NEOWS&lt;/h2&gt;
&lt;p&gt;Entre las APIs de la NASA, está [NeoWs]https://api.nasa.gov/neo/?api_key=DEMO_KEY). Se puede utilizar para listar NEOs y obtener sus elementos orbitales y próximas aproximaciones (valga la redundancia) a la Tierra, dado un SPK-ID (número que el &lt;a href="https://www.jpl.nasa.gov/"&gt;JPL&lt;/a&gt; usa para identificar objetos). A pesar de su nombre, sólo funciona con NEAs (Near Earth Asteroids), y por tanto no proporciona información sobre cometas.&lt;/p&gt;
&lt;h2&gt;JPL SSD/CNEOS API SERVICE&lt;/h2&gt;
&lt;p&gt;Como dice su web, el &lt;a href="https://ssd-api.jpl.nasa.gov/"&gt;JPL SSD/CNEOS API SERVICE&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;proporciona una interfaz para datos en formato JSON relacionados con el &lt;a href="https://ssd.jpl.nasa.gov/"&gt;SSD&lt;/a&gt; y el &lt;a href="https://cneos.jpl.nasa.gov/"&gt;CNEOS&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Las APIs más relevantes son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd-api.jpl.nasa.gov/doc/cad.html"&gt;Close-Approach Data (CAD)&lt;/a&gt;: proporciona datos sobre aproximaciones a la tierra para todos los asteroides y cometas en la base de datos del JPL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://cneos.jpl.nasa.gov/nhats/"&gt;Accessible NEAs (NHATS)&lt;/a&gt;: está operado por el Near-Earth Object Human Space Flight Accessible Targets Study (&lt;a href="https://cneos.jpl.nasa.gov/nhats/intro.html"&gt;NHATS&lt;/a&gt;), y se puede utilizar para identificar NEAs que pueden ser aptos para futuras misiones tripuladas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd-api.jpl.nasa.gov/doc/scout.html"&gt;Scout&lt;/a&gt;: el sistema Scout propociona análisis de trayectorias y evaluación de riesgos en objetos descubiertos recientemente.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://cneos.jpl.nasa.gov/sentry/"&gt;Sentry&lt;/a&gt;: Sentry es un sistema de monitorización de colisiones automático, que escanea continuamente el catálogo más actual de asteroides y analiza las posibilidades de un futuro impacto.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Eligiendo las APIs&lt;/h2&gt;
&lt;p&gt;Una vez estudiadas todas las posibilidades, era momento de elegir las APIs que parecían más adecuadas para nuestro propósito.&lt;/p&gt;
&lt;p&gt;Ya que el núcleo de &lt;code&gt;poliastro&lt;/code&gt; son los objetos &lt;a href="https://poliastro.readthedocs.io/en/latest/api.html#poliastro.twobody.orbit.Orbit"&gt;Orbit&lt;/a&gt;, nuestro objetivo principal es crear automáticamente las órbitas de los NEOs, usando los datos obtenidos de APIs de internet. Para conseguir esto, se necesitan o bien los elementos orbitales o bien los vectores de posición y velocidad, así que el primer requisito que tenían que cumplir las APIs, era proporcionar alguno de estos datos.&lt;/p&gt;
&lt;p&gt;Por tanto, varias APIs podían ser descartadas por no proporcionar la información necesaria: &lt;code&gt;Accesible NEAs&lt;/code&gt;, &lt;code&gt;Scout&lt;/code&gt;, &lt;code&gt;Sentry&lt;/code&gt; y &lt;code&gt;Close-Approach Data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ya que preferíamos no tener que lidiar con intrincadas peticiones POST, otro requisito importante que las APIs tenían que cumplir era proporcionar una buena interfaz (la "I" de API significa interfaz, así que...), y, a ser posible, algo que se acercase a un &lt;a href="https://es.wikipedia.org/wiki/Transferencia_de_Estado_Representacional"&gt;Servicio REST&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JPL Small-Body Database Search Engine&lt;/code&gt; requiere peticiones POST de más de 150 líneas, así que la descartamos automáticamente.&lt;/p&gt;
&lt;p&gt;Finalmente, el tercer requisito, considerando que escribimos software en Python, era que la información fuese proporcionada &lt;code&gt;machine-readable&lt;/code&gt; (en formato fácil de leer y manipular para el ordenador), siendo JSON el formato preferido, y un código HTML mal escrito el peor formato.&lt;/p&gt;
&lt;p&gt;Tanto &lt;code&gt;JPL Small-Body Database Browser&lt;/code&gt; como &lt;code&gt;Horizons&lt;/code&gt; proporcionan la salida en HTML, el cual tiene que ser parseado, con todos los riesgos que ésto implica, por lo que fueron descartados.&lt;/p&gt;
&lt;p&gt;Para clarificar toda esta la retahíla de datos, hice una tabla:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;API&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Elementos orbitales?&lt;/th&gt;
&lt;th style="text-align: center;"&gt;REST?&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Machine-readable?&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Otras&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;JPL Small-Body Database Browser&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No se limita a NEOs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;JPL Small-Body Database Search Engine&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí (CSV)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No se limita a NEOs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Horizons&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;[ya existe una interfaz Python]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;NeoWs&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Solo para NEAs (asteroides)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Close-Approach Data (CAD)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Accessible NEAs (NHATS)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Scout&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Sentry&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Sí (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;[ya existe una interfaz Python]: https://github.com/mommermi/callhorizons&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Teniendo todos estos requisitos en mente, la mejor opción parecía ser &lt;code&gt;NeoWs&lt;/code&gt;. Aunque no proporciona información sobre NECs (cometas), éstos solo representan un 0.7% del total de los NEOs, por tanto podían ser descartados (sólo de momento :P). Otro problema relacionado con &lt;code&gt;NeoWs&lt;/code&gt; es el hecho de que sólo permite buscar por número SPK-ID (no confundir con número IAU), el cuál es desconocido para la mayoría de la gente, por tanto, antes de hacer ninguna petición a la API, se necesita encontrar el número SPK-ID.&lt;/p&gt;
&lt;p&gt;Y eso ha sido todo esta semana. La próxima, empezaremos con la programación propiamente dicha, añadiendo una función &lt;code&gt;orbit_from_spk_id&lt;/code&gt; que haga una petición a la API &lt;code&gt;NeoWs&lt;/code&gt; ¡Nos vemos!&lt;/p&gt;</content><category term="SOCIS"></category><category term="SOCIS"></category><category term="ESA"></category><category term="poliastro"></category><category term="NASA"></category><category term="APIs"></category><category term="open data"></category></entry><entry><title>Pelican, Github Pages and auto-deployment (SOCIS 2017)</title><link href="https://www.poliastro.space/blog/2017/07/15/2017-07-15-pelican-github-pages-and-auto-deployment-socis/" rel="alternate"></link><published>2017-07-15T14:00:00+02:00</published><updated>2017-07-15T14:00:00+02:00</updated><author><name>Antonio Hidalgo Galindo</name></author><id>tag:www.poliastro.space,2017-07-15:/blog/2017/07/15/2017-07-15-pelican-github-pages-and-auto-deployment-socis/</id><summary type="html">&lt;p&gt;After several weeks thinking that &lt;a href="http://sophia.estec.esa.int/socis/"&gt;SOCIS&lt;/a&gt; would not launch this year, finally the long-awaited email arrived! I am really happy for being selected by &lt;code&gt;poliastro&lt;/code&gt; and my mentor &lt;code&gt;@astrojuanlu&lt;/code&gt;, with the aim of creating an API, relying on NASA Open APIs, in order to provide small-bodies orbital data (&lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo"&gt;my proposal can be seen here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Our plan is to write a weekly blog entry, stating and documenting what have been done during that period. I think these posts will be a great way of reviewing what have been accomplished, and I also hope they will be interesting enough to anyone interested in Python, science, &lt;a href="https://en.wikipedia.org/wiki/Near-Earth_object"&gt;NEOs&lt;/a&gt;, or just reading random internet blogs.&lt;/p&gt;
&lt;p&gt;This has been the first one of eight weeks (yeah, that’s not what my proposal timeline says, but it’s all we have 😊), and, surprisingly, the first task I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After several weeks thinking that &lt;a href="http://sophia.estec.esa.int/socis/"&gt;SOCIS&lt;/a&gt; would not launch this year, finally the long-awaited email arrived! I am really happy for being selected by &lt;code&gt;poliastro&lt;/code&gt; and my mentor &lt;code&gt;@astrojuanlu&lt;/code&gt;, with the aim of creating an API, relying on NASA Open APIs, in order to provide small-bodies orbital data (&lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo"&gt;my proposal can be seen here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Our plan is to write a weekly blog entry, stating and documenting what have been done during that period. I think these posts will be a great way of reviewing what have been accomplished, and I also hope they will be interesting enough to anyone interested in Python, science, &lt;a href="https://en.wikipedia.org/wiki/Near-Earth_object"&gt;NEOs&lt;/a&gt;, or just reading random internet blogs.&lt;/p&gt;
&lt;p&gt;This has been the first one of eight weeks (yeah, that’s not what my proposal timeline says, but it’s all we have 😊), and, surprisingly, the first task I was assigned was… setting up this blog!&lt;/p&gt;
&lt;p&gt;So, without further ado, let’s start.&lt;/p&gt;
&lt;h2&gt;Pelican, Github Pages and auto-deployment&lt;/h2&gt;
&lt;p&gt;Given that &lt;code&gt;poliastro&lt;/code&gt; is a Python-based project, we decided to use &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, a static site generator which is written in Python, to create the blog. Regarding the hosting, our choice was Github Pages. My mentor had already participated in a repository with a Pelican blog, based on another &lt;a href="https://github.com/jakevdp/jakevdp.github.io-source"&gt;repository from Jake Vanderplas&lt;/a&gt;, so that was my starting point.&lt;/p&gt;
&lt;p&gt;I had to change all the pages and strings related to the previous project for &lt;code&gt;poliastro&lt;/code&gt; ones. Besides that, we wanted to automatize the deployment process to Github Pages, a little harder task, and we decided to try with Travis CI, a Continuous Integration tool, very used in Github environment.&lt;/p&gt;
&lt;p&gt;After googling a little bit, a few results appeared. Vladimir Starkov had researched in &lt;a href="https://iamstarkov.com/deploy-gh-pages-from-travis/"&gt;this article&lt;/a&gt; about basically what I was trying to accomplish. The easiest way of authenticating on Github was using a Github Token, but it had to be encrypted so no one could login in my account using it.&lt;/p&gt;
&lt;p&gt;After some further researching, I discovered that Travis encrypts variables using a RSA public key associated to every repository (you can use Travis API if you want to check it: &lt;code&gt;https://api.travis-ci.org/repos/$(owner_name)/$(repo_name)/key&lt;/code&gt;. As I have full permissions to edit &lt;code&gt;poliastro.github.io-source&lt;/code&gt; and &lt;code&gt;poliastro.github.io repos&lt;/code&gt; repos, I decided to request a Github Token, and I encrypted it with the public key associated to &lt;code&gt;poliastro.github.io-source&lt;/code&gt; repository in Travis CI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;travis&lt;span class="w"&gt; &lt;/span&gt;encrypt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;GH_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;My&lt;span class="w"&gt; &lt;/span&gt;Github&lt;span class="w"&gt; &lt;/span&gt;Token&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;/poliastro/poliastro.github.io-source
secure:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a-really-long-string”&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Adding this encrypted key to .travis.yml file, I could use GH_TOKEN variable in it, and upload it to Github without exposing my private token.&lt;/p&gt;
&lt;p&gt;The deployment was coded in a &lt;code&gt;makefile&lt;/code&gt;, using the &lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import tool&lt;/a&gt;, which creates a branch containing only documentation. This branch is later pushed to Github Pages repository, &lt;code&gt;poliastro.github.io&lt;/code&gt; in our code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;GITHUB_PAGES_REMOTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GH_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;@github.com/poliastro/poliastro.github.io.git
&lt;span class="nv"&gt;GITHUB_PAGES_BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;master

&lt;span class="err"&gt;.......&lt;/span&gt;

&lt;span class="nf"&gt;publish-to-github-force&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;ghp-import&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;publish-to-github-force from &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;GIT_COMMIT_HASH&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;blog-build&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_REMOTE&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;blog-build:&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, whenever Travis CI executes a build in &lt;a href="https://travis-ci.org/poliastro/poliastro.github.io-source"&gt;poliastro.github.io-source&lt;/a&gt;, the variable gets automatically decrypted using the repository private key (except for builds caused by a Pull Request, as stated &lt;a href="https://docs.travis-ci.com/user/encryption-keys/"&gt;here&lt;/a&gt;, fact that turned to be a big headache for us :P), and the token is used to push to &lt;code&gt;poliastro.github.io&lt;/code&gt; repo.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Travis log with decrypted GH_TOKEN" src="https://www.poliastro.space/images/travis_decryption_log.jpg" title="Travis log with decrypted GH_TOKEN"&gt;&lt;/p&gt;
&lt;p&gt;That was my work in the last week. If you would like to check the code, is available on &lt;a href="https://github.com/poliastro/poliastro.github.io-source"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next week we will probably start with Python, NASA APIs and more interesting stuff!&lt;/p&gt;</content><category term="SOCIS"></category><category term="SOCIS"></category><category term="ESA"></category><category term="poliastro"></category></entry><entry><title>Pelican, Github Pages y despliegue automático (SOCIS 2017)</title><link href="https://www.poliastro.space/2017-07-15-pelican-github-pages-and-auto-deployment-socis-es.html" rel="alternate"></link><published>2017-07-15T14:00:00+02:00</published><updated>2017-07-15T14:00:00+02:00</updated><author><name>Antonio Hidalgo Galindo</name></author><id>tag:www.poliastro.space,2017-07-15:/2017-07-15-pelican-github-pages-and-auto-deployment-socis-es.html</id><summary type="html">&lt;p&gt;Tras varias semanas creyendo que &lt;a href="http://sophia.estec.esa.int/socis/"&gt;SOCIS&lt;/a&gt; no se realizaría este año, ¡por fin me ha llegado el email!  Estoy muy contento de haber sido elegido por &lt;code&gt;poliastro&lt;/code&gt; y mi mentor &lt;code&gt;@astrojuanlu&lt;/code&gt;, con el objetivo de crear una API, basada en las APIs abiertas de la NASA, para proporcionar datos orbitales de cuerpos menores (&lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo"&gt;mi propuesta completa está aquí&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Nuestra idea es escribir una entrada semanal en este blog, documentado el trabajo realizado durante esa semana. Creo que cada post será una buena manera de revisar lo que se va consiguiendo, y además espero que resulte interesante para cualquier interesado en Python, ciencia, &lt;a href="https://es.wikipedia.org/wiki/Objeto_pr%C3%B3ximo_a_la_Tierra"&gt;NEOs&lt;/a&gt;, o simplemente en leer blogs aleatorios por internet.&lt;/p&gt;
&lt;p&gt;Esta ha sido la primera de ocho semanas (sí, sé que en mi propuesta pone otra cosa, pero es el tiempo que tenemos 😊), y, sorprendentemente, la primera tarea que …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tras varias semanas creyendo que &lt;a href="http://sophia.estec.esa.int/socis/"&gt;SOCIS&lt;/a&gt; no se realizaría este año, ¡por fin me ha llegado el email!  Estoy muy contento de haber sido elegido por &lt;code&gt;poliastro&lt;/code&gt; y mi mentor &lt;code&gt;@astrojuanlu&lt;/code&gt;, con el objetivo de crear una API, basada en las APIs abiertas de la NASA, para proporcionar datos orbitales de cuerpos menores (&lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo"&gt;mi propuesta completa está aquí&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Nuestra idea es escribir una entrada semanal en este blog, documentado el trabajo realizado durante esa semana. Creo que cada post será una buena manera de revisar lo que se va consiguiendo, y además espero que resulte interesante para cualquier interesado en Python, ciencia, &lt;a href="https://es.wikipedia.org/wiki/Objeto_pr%C3%B3ximo_a_la_Tierra"&gt;NEOs&lt;/a&gt;, o simplemente en leer blogs aleatorios por internet.&lt;/p&gt;
&lt;p&gt;Esta ha sido la primera de ocho semanas (sí, sé que en mi propuesta pone otra cosa, pero es el tiempo que tenemos 😊), y, sorprendentemente, la primera tarea que se me ha encargado ha sido... ¡montar este blog!&lt;/p&gt;
&lt;p&gt;Así qué, sin más dilación, empecemos.&lt;/p&gt;
&lt;h2&gt;Pelican, Github Pages y despliegue automático&lt;/h2&gt;
&lt;p&gt;Ya que &lt;code&gt;poliastro&lt;/code&gt; es un proyecto basado en Python, decidimos usar &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, un generador de páginas estáticas escrito en Python, para crear el blog. En cuanto al hosting, la elección fue Github Pages. Mi mentor ya había participado en un blog con Pelican, basado en &lt;a href="https://github.com/jakevdp/jakevdp.github.io-source"&gt;este repositorio de Jake Vanderplas&lt;/a&gt;, así que ese fue mi punto de partida.&lt;/p&gt;
&lt;p&gt;Tuve que cambiar todas las páginas y cadenas relacionadas con el proyecto anterior por los correspondientes de &lt;code&gt;poliastro&lt;/code&gt;.
Además de eso, también queríamos automatizar el proceso de despliegue del blog en Github Pages, una tarea algo más complicada, y decidimos usar Travis CI, una herramienta de Integración Continua muy usada en el entorno de Github.&lt;/p&gt;
&lt;p&gt;Tras unas cuantas búsquedas en Google, aparecieron varios resultados. Vladimir Starkov había investigado en &lt;a href="https://iamstarkov.com/deploy-gh-pages-from-travis/"&gt;este artículo&lt;/a&gt; sobre lo mismo que yo intentaba conseguir. La manera más fácil de autenticarnos en Github era usando un Github Token, pero tenía que estar cifrado de forma que nadie pudiese entrar en mi cuenta usándolo.&lt;/p&gt;
&lt;p&gt;Después de investigar un poco, descubrí que Travis puede encriptar variables usando una clave publica RSA asociada a cada repositorio (se puede comprobar usando la API de Travis: &lt;code&gt;https://api.travis-ci.org/repos/$(owner_name)/$(repo_name)/key&lt;/code&gt;).
Ya que tengo permisos para editar &lt;code&gt;poliastro.github.io-source&lt;/code&gt; y &lt;code&gt;poliastro.github.io repos&lt;/code&gt;, decidí usar un Github Token de mi cuenta y cifrarlo con la clave pública asociada al repositorio &lt;code&gt;poliastro.github.io-source&lt;/code&gt; en Travis CI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;travis&lt;span class="w"&gt; &lt;/span&gt;encrypt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;GH_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;Github&lt;span class="w"&gt; &lt;/span&gt;Token&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;/poliastro/poliastro.github.io-source
secure:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a-really-long-string”&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Al añadir la clave cifrada al archivo .travis.yml, ya podía usar la variable GH_TOKEN en Travis, y subir el archivo a Github sin exponer mi token.&lt;/p&gt;
&lt;p&gt;El despliegue fue escrito en un &lt;code&gt;makefile&lt;/code&gt;, usando la &lt;a href="https://github.com/davisp/ghp-import"&gt;herramienta ghp-import&lt;/a&gt;, que crea una nueva rama que contiene únicamente la documentación. Después se realiza un push desde esa rama al repositorio de Github Pages, &lt;code&gt;poliastro.github.io&lt;/code&gt; en nuestro caso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;GITHUB_PAGES_REMOTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GH_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;@github.com/poliastro/poliastro.github.io.git
&lt;span class="nv"&gt;GITHUB_PAGES_BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;master

&lt;span class="err"&gt;.......&lt;/span&gt;

&lt;span class="nf"&gt;publish-to-github-force&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;ghp-import&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;publish-to-github-force from &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;GIT_COMMIT_HASH&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;blog-build&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_REMOTE&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;blog-build:&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Por tanto, cada vez que Travis CI se ejecuta en &lt;a href="https://travis-ci.org/poliastro/poliastro.github.io-source"&gt;poliastro.github.io-source&lt;/a&gt;, la variable se descifra automáticamente usando la clave privada del repositorio (excepto cuando se ejecuta por culpa de un Pull Request, como se desprende de &lt;a href="https://docs.travis-ci.com/user/encryption-keys/"&gt;aquí&lt;/a&gt;, hecho que provocó varios quebraderos de cabeza :P), y el token se usa para desplegar el código en el repositorio &lt;code&gt;poliastro.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Travis log with decrypted GH_TOKEN" src="https://www.poliastro.space/images/travis_decryption_log.jpg" title="Travis log with decrypted GH_TOKEN"&gt;&lt;/p&gt;
&lt;p&gt;Este ha sido mi trabajo de la última semana. Si quieres ver el código completo, está disponible en &lt;a href="https://github.com/poliastro/poliastro.github.io-source"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La próxima semana empezaremos con Python, las APIs de la NASA y muchas más cosas interesantes.&lt;/p&gt;</content><category term="SOCIS"></category><category term="SOCIS"></category><category term="ESA"></category><category term="poliastro"></category></entry></feed>