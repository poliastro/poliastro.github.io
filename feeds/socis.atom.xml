<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>poliastro - SOCIS</title><link href="https://www.poliastro.space/" rel="alternate"></link><link href="https://www.poliastro.space/feeds/socis.atom.xml" rel="self"></link><id>https://www.poliastro.space/</id><updated>2017-08-17T22:00:00+02:00</updated><subtitle>poliastro website</subtitle><entry><title>FTPs, DASTCOM5 and dtypes (SOCIS 2017)</title><link href="https://www.poliastro.space/blog/2017/08/17/2017-08-17-ftps-dastcom5-and-dtypes/" rel="alternate"></link><published>2017-08-17T22:00:00+02:00</published><updated>2017-08-17T22:00:00+02:00</updated><author><name>Antonio Hidalgo Galindo</name></author><id>tag:www.poliastro.space,2017-08-17:/blog/2017/08/17/2017-08-17-ftps-dastcom5-and-dtypes/</id><summary type="html">&lt;p&gt;In the previous entry, I said that we had found a new database, and we would have to take a closer look to it.&lt;/p&gt;
&lt;p&gt;Actually, what I found was a &lt;a href="ftp://ssd.jpl.nasa.gov/pub"&gt;JPL public FTP&lt;/a&gt;, with lots of data in it (I have barely taken a glance to all the folders that contains, so have fun looking into it :P).&lt;/p&gt;
&lt;p&gt;In that FTP, inside &lt;code&gt;ssd&lt;/code&gt; folder (Solar System Dynamics, not Solid State Drive), there were several different files, some of them with .DB extension, some of them with .dat extension, and a README.&lt;/p&gt;
&lt;p&gt;The README explained some of the files (a few of them are still a mystery), and I quote what it said about a file named &lt;code&gt;dastcom5.zip&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dastcom5.zip&lt;/p&gt;
&lt;p&gt;Link to a a portable/programmable version of the JPL/Horizons 
 database of asteroids and comets ("DASTCOM5"), updated as often …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;In the previous entry, I said that we had found a new database, and we would have to take a closer look to it.&lt;/p&gt;
&lt;p&gt;Actually, what I found was a &lt;a href="ftp://ssd.jpl.nasa.gov/pub"&gt;JPL public FTP&lt;/a&gt;, with lots of data in it (I have barely taken a glance to all the folders that contains, so have fun looking into it :P).&lt;/p&gt;
&lt;p&gt;In that FTP, inside &lt;code&gt;ssd&lt;/code&gt; folder (Solar System Dynamics, not Solid State Drive), there were several different files, some of them with .DB extension, some of them with .dat extension, and a README.&lt;/p&gt;
&lt;p&gt;The README explained some of the files (a few of them are still a mystery), and I quote what it said about a file named &lt;code&gt;dastcom5.zip&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dastcom5.zip&lt;/p&gt;
&lt;p&gt;Link to a a portable/programmable version of the JPL/Horizons 
 database of asteroids and comets ("DASTCOM5"), updated as often 
 as hourly&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Interesting, isn't it?&lt;/p&gt;
&lt;p&gt;Well, after a week, I can now assure that this database has been a great discovery, so this week entry will address mainly about it.&lt;/p&gt;
&lt;h1&gt;DASTCOM5&lt;/h1&gt;
&lt;p&gt;As README says, DASTCOM5 is the name of a JPL-maintained database of asteroids and comets (I think &lt;code&gt;D&lt;/code&gt; stands for Database, &lt;code&gt;AST&lt;/code&gt; for asteroid, &lt;code&gt;COM&lt;/code&gt; for comets, and &lt;code&gt;5&lt;/code&gt; is the current version, but I'm not sure haha).
After downloading and unzipping the file that JPL provides, you can see the following folder structure:&lt;/p&gt;
&lt;p&gt;&lt;img alt="DASTCOM5 folder structure" src="https://www.poliastro.space/images/dastcom5_folder.png" title="DASTCOM5 folder structure"&gt;&lt;/p&gt;
&lt;p&gt;Fortunately, &lt;code&gt;dastcom5.zip&lt;/code&gt; provided a doc folder.&lt;/p&gt;
&lt;p&gt;Inside this folder there was a long README (more than 1200 lines) with a lot of information, which I quote below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DASTCOM5 is a direct-access binary database. It contains heliocentric 
ecliptic osculating elements for the known asteroids and comets, determined 
by a least-squares orbit solution fit to optical and 
radar astrometric measurements.&lt;/p&gt;
&lt;p&gt;[...]&lt;/p&gt;
&lt;p&gt;A total of 142 parameters per object are defined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So DASTCOM5 format was binary (more difficult than JSON), but it contained 142 parameters. Not bad! Let's continue:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The DASTCOM5 distribution .zip file archive contains the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;two binary database files (one holding asteroid data, the second holding
      comet data),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a plain-text index (linking all objects to their DASTCOM5 record, 
      permitting look-up based on name, designation, SPK ID, packed MPC 
      designation, and historical aliases), &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;documentation,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;latest database reader source code (FORTRAN). The software has been 
      tested using GFORTRAN (gfortran), Lahey (lf95), Intel (ifort), and 
      SunStudio (f95) compilers in both 32 and 64-bit builds, under RedHat 
      Linux 4/5/6.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Apparently, DASTCOM5 provided all of the necessary files for building a module &lt;code&gt;poliastro.neos.dastcom5&lt;/code&gt;. We decided to read the two binary databases with Python instead of creating a FORTRAN wrapper, which didn't sound appealing at all.&lt;/p&gt;
&lt;p&gt;Therefore, the first task was to read a comet or asteroid binary record, and the chosen tool was &lt;a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromfile.html"&gt;numpy.fromfile()&lt;/a&gt;, which, as stated on its docs, needs a known data-type. Fortunately, the extensive DASTCOM5 README had a section named &lt;code&gt;DASTCOM5 BYTE MAP&lt;/code&gt; which was really useful.&lt;/p&gt;
&lt;p&gt;&lt;img alt="DASTCOM5 byte map" src="https://www.poliastro.space/images/dastcom5_map.png" title="DASTCOM5 byte map"&gt;&lt;/p&gt;
&lt;p&gt;Knowing the number of bytes and type of each variable, the only difficulty was writing it for each of the 142 variables manually.&lt;/p&gt;
&lt;p&gt;Once that was done, we were able store the full asteroid or comet database as a numpy array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AST_DB_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AST_DTYPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or obtain a single record given a physical record number using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AST_DB_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PHYSICAL_RECORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SEEK_SET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;COM_DTYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, the problem was that DASTCOM5 physical record didn't correspond to a logical record, such as 433 for Eros, or 900001 for 1P/Halley. So, the next task consisted of reading database headers in order to get information about bias between logical and physical record. The resultant function can be found, as usual, on &lt;a href="https://github.com/poliastro/poliastro/blob/8f2f8a42f1a01610971ef1bfee874d72701bb963/src/poliastro/neos/dastcom5.py#L395"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After dealing with records, it was time to start with the lookup function. As stated above, DASTCOM5 package come with a plain text index file containing names, designations, SPK-IDs, packed MPC designations, and historical aliases.&lt;/p&gt;
&lt;p&gt;The file format was sort of CSV, but really ugly to parse, given that alternative designations, alternative SPK-IDs, etc. were all mixed without any order.&lt;/p&gt;
&lt;p&gt;&lt;img alt="DASTCOM5 index file" src="https://www.poliastro.space/images/dastcom5_index.png" title="DASTCOM5 index file"&gt;&lt;/p&gt;
&lt;p&gt;Therefore, as the file was plain text, we decided to read line by line the index, comparing with a string passed as argument. Code is on &lt;a href="https://github.com/poliastro/poliastro"&gt;Github&lt;/a&gt; and anyone is welcome to improve the lookup function as well as any other part of the code :)&lt;/p&gt;
&lt;h1&gt;Downloading DASTCOM5&lt;/h1&gt;
&lt;p&gt;DASTCOM5 isn't an online API, but an online available file, which you need to download in order to use.
Therefore, poliastro needed to provide a good way to download the database without having to stop Python console.&lt;/p&gt;
&lt;p&gt;Unlike previous entry, where we used &lt;code&gt;Request&lt;/code&gt; library in order to communicate with the internet, in this module &lt;a href="https://docs.python.org/3/library/urllib.request.html"&gt;urllib.request&lt;/a&gt; was chosen, since &lt;code&gt;urllib.request.urlretrieve()&lt;/code&gt; can be called using a function as an argument, which is called after each block read. That gave us the opportunity of showing download progress, with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_show_download_progress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transferred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalsize&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;trans_mb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transferred&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;total_mb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;totalsize&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%.2f&lt;/span&gt;&lt;span class="s1"&gt; MB / &lt;/span&gt;&lt;span class="si"&gt;%.2f&lt;/span&gt;&lt;span class="s1"&gt; MB&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trans_mb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_mb&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also, once the download function was finished, we decided to provide CLI support, adding &lt;code&gt;poliastro --download-dastcom5&lt;/code&gt; command.
So, from now, you can download DASTCOM5 database automatically to ~/.poliastro folder either from a Python interpreter or from CLI.&lt;/p&gt;
&lt;h1&gt;NeoWs and DASTCOM5&lt;/h1&gt;
&lt;p&gt;Both NeoWs and DASTCOM5 are currently part of &lt;code&gt;poliastro.neos&lt;/code&gt;, and their functionalities can somehow intersect. But they are completely different in the background, with mainly two differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DASTCOM5 database has data about every asteroid and comet in the solar system, but NeoWs is only available for NEAs (Near Earth Asteroids).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NeoWs is an online API, but DASTCOM5 has to be downloaded in order to be used (~230 MB).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, depending on your needs, you will have to decide which one fits you better, considering that both of them can create an &lt;code&gt;Orbit&lt;/code&gt; given a name, SPK-ID, etc.&lt;/p&gt;
&lt;p&gt;However, the resultant orbits using the two functions are exactly equal, as you can check in the following example using Eros:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.neos&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;neows&lt;/span&gt;
&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Earth equatorial radius&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;already&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;astropy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Constant&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jupiter equatorial radius&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;already&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;definition&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;astropy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.neos&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dastcom5&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.plotting&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrbitPlotter&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;eros_neows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orbit_from_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eros&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;eros_dastcom5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dastcom5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orbit_from_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eros&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrbitPlotter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eros_neows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Eros from NeoWs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Line2D&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1e0c0d68940&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Line2D&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1e0b9a71438&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eros_dastcom5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Eros from DASTCOM5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Line2D&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1e0c0e38780&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Line2D&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1e0c0e3a8d0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Eros orbit comparison" src="https://www.poliastro.space/images/eros_comparison.png" title="Eros orbit comparison"&gt;&lt;/p&gt;
&lt;p&gt;That was all for this week (two weeks actually, sorry for that). Now poliastro has two ways of dealing with NEOs, each one with its advantages and disadvantages, and you can try any of them.
Probably, the next week entry will be about a completely different topic, not exactly related to NEOS, but I can't disclose anything right now :P See you!&lt;/p&gt;</content><category term="SOCIS"></category><category term="SOCIS"></category><category term="poliastro"></category><category term="NASA"></category><category term="DASTCOM5"></category><category term="APIs"></category><category term="JPL"></category><category term="mocking"></category></entry><entry><title>NeoWs, SPK-ID and parsing (SOCIS 2017)</title><link href="https://www.poliastro.space/blog/2017/07/31/2017-07-31-neows-spk-id-and-parsing-socis/" rel="alternate"></link><published>2017-07-31T22:30:00+02:00</published><updated>2017-07-31T22:30:00+02:00</updated><author><name>Antonio Hidalgo Galindo</name></author><id>tag:www.poliastro.space,2017-07-31:/blog/2017/07/31/2017-07-31-neows-spk-id-and-parsing-socis/</id><summary type="html">&lt;p&gt;In the previous entry, several different APIs related to NEOs were studied, and finally &lt;a href="https://api.nasa.gov/neo/?api_key=DEMO_KEY"&gt;NeoWs&lt;/a&gt; was chosen to start working with.&lt;/p&gt;
&lt;p&gt;This week, we aimed to start with coding itself, adding an &lt;code&gt;orbit_from_spk_id&lt;/code&gt; function to newly created &lt;code&gt;poliastro.neos module&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to achieve this, the first step was researching how NeoWs API exactly works.&lt;/p&gt;
&lt;h2&gt;NeoWs operation&lt;/h2&gt;
&lt;p&gt;As stated in the prevoius article of this "series", this API provides several different functionalities, but, for the moment, we were only interested in the lookup service.&lt;/p&gt;
&lt;p&gt;It also counts with web documentation, which was a really good start point, as you can see:&lt;/p&gt;
&lt;p&gt;&lt;img alt="NeoWs Documentation" src="https://www.poliastro.space/images/neows_lookup.png" title="NeoWs Documentation"&gt;&lt;/p&gt;
&lt;p&gt;When using the lookup service (and any NASA API) you need an &lt;code&gt;API key&lt;/code&gt;, but we used &lt;code&gt;DEMO_KEY&lt;/code&gt;, which only limits your queries to 40 per hour. Having that in mind, all you need to do is a query …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the previous entry, several different APIs related to NEOs were studied, and finally &lt;a href="https://api.nasa.gov/neo/?api_key=DEMO_KEY"&gt;NeoWs&lt;/a&gt; was chosen to start working with.&lt;/p&gt;
&lt;p&gt;This week, we aimed to start with coding itself, adding an &lt;code&gt;orbit_from_spk_id&lt;/code&gt; function to newly created &lt;code&gt;poliastro.neos module&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to achieve this, the first step was researching how NeoWs API exactly works.&lt;/p&gt;
&lt;h2&gt;NeoWs operation&lt;/h2&gt;
&lt;p&gt;As stated in the prevoius article of this "series", this API provides several different functionalities, but, for the moment, we were only interested in the lookup service.&lt;/p&gt;
&lt;p&gt;It also counts with web documentation, which was a really good start point, as you can see:&lt;/p&gt;
&lt;p&gt;&lt;img alt="NeoWs Documentation" src="https://www.poliastro.space/images/neows_lookup.png" title="NeoWs Documentation"&gt;&lt;/p&gt;
&lt;p&gt;When using the lookup service (and any NASA API) you need an &lt;code&gt;API key&lt;/code&gt;, but we used &lt;code&gt;DEMO_KEY&lt;/code&gt;, which only limits your queries to 40 per hour. Having that in mind, all you need to do is a query with a body SPK-ID (we will explain this number later), and, if all goes well, the API will answer your query with a JSON response, containing the following data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Body information&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Name, ID, hazard, ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Orbital data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next close approachs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, we were mainly interested in orbital data. But, what would mean "orbital data"? A simple query using &lt;a href="https://en.wikipedia.org/wiki/433_Eros"&gt;Eros asteroid&lt;/a&gt; SPK-ID, gave us the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;tal&lt;/span&gt;&lt;span class="err"&gt;_da&lt;/span&gt;&lt;span class="kc"&gt;ta&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;611&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;_de&lt;/span&gt;&lt;span class="kc"&gt;ter&lt;/span&gt;&lt;span class="err"&gt;mi&lt;/span&gt;&lt;span class="kc"&gt;nat&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_da&lt;/span&gt;&lt;span class="kc"&gt;te&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;2017-06-06&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;_u&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;cer&lt;/span&gt;&lt;span class="kc"&gt;ta&lt;/span&gt;&lt;span class="err"&gt;i&lt;/span&gt;&lt;span class="kc"&gt;nt&lt;/span&gt;&lt;span class="err"&gt;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;mi&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;imum_orbi&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;_i&lt;/span&gt;&lt;span class="kc"&gt;nterse&lt;/span&gt;&lt;span class="err"&gt;c&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;.&lt;/span&gt;&lt;span class="mi"&gt;150505&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;jupi&lt;/span&gt;&lt;span class="kc"&gt;ter&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;issera&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;d_i&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;varia&lt;/span&gt;&lt;span class="kc"&gt;nt&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;4.583&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;epoch_oscula&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;2458000.5&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;ecce&lt;/span&gt;&lt;span class="kc"&gt;ntr&lt;/span&gt;&lt;span class="err"&gt;ici&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;.&lt;/span&gt;&lt;span class="mi"&gt;2225889698301071&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;semi_major_axis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;1.457940027185708&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;cli&lt;/span&gt;&lt;span class="kc"&gt;nat&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;10.82759100494802&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;asce&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;di&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;g_&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ode_lo&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;gi&lt;/span&gt;&lt;span class="kc"&gt;tu&lt;/span&gt;&lt;span class="err"&gt;de&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;304.3221633898424&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;orbi&lt;/span&gt;&lt;span class="kc"&gt;tal&lt;/span&gt;&lt;span class="err"&gt;_period&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;642.9954742523677&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;perihelio&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_dis&lt;/span&gt;&lt;span class="kc"&gt;tan&lt;/span&gt;&lt;span class="err"&gt;ce&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;1.133418658460363&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;perihelio&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_argume&lt;/span&gt;&lt;span class="kc"&gt;nt&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;178.8165910886752&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;aphelio&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_dis&lt;/span&gt;&lt;span class="kc"&gt;tan&lt;/span&gt;&lt;span class="err"&gt;ce&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;1.782461395911054&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;perihelio&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;ime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;2457873.186399333365&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;mea&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_a&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;omaly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;71.28027812836476&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;mea&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;_mo&lt;/span&gt;&lt;span class="kc"&gt;t&lt;/span&gt;&lt;span class="err"&gt;io&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;.&lt;/span&gt;&lt;span class="mi"&gt;5598795239089109&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;equi&lt;/span&gt;&lt;span class="kc"&gt;n&lt;/span&gt;&lt;span class="err"&gt;ox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;J&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not bad at all!&lt;/p&gt;
&lt;p&gt;If you are familiar with astrophysics, you will probably know about classical orbital elements. If you are more a computer scientist than an astrophysicist, &lt;a href="https://en.wikipedia.org/wiki/Orbital_elements#Keplerian_elements"&gt;classical orbital elements&lt;/a&gt; are just six parameters which determine orbit and body position in that orbit at a given time.&lt;/p&gt;
&lt;p&gt;There are several ways to create an &lt;a href="https://poliastro.readthedocs.io/en/latest/api.html#module-poliastro.twobody.orbit.Orbit"&gt;Orbit&lt;/a&gt; object in poliastro, but it seemed that we had all the necessary parameters to create one with &lt;a href="https://poliastro.readthedocs.io/en/latest/api.html#module-poliastro.twobody.orbit.Orbit.from_classical"&gt;from_classical() function&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, after retrieving API information, we were ready to start coding :)&lt;/p&gt;
&lt;h2&gt;orbit_from_spk_id()&lt;/h2&gt;
&lt;p&gt;Since you can see the &lt;code&gt;neos module&lt;/code&gt; code on &lt;a href="https://github.com/poliastro/poliastro/blob/master/src/poliastro/neos.py"&gt;Github&lt;/a&gt;, I won't write much about it here.&lt;/p&gt;
&lt;p&gt;We decided to use &lt;a href="http://docs.python-requests.org/en/master/"&gt;Requests library&lt;/a&gt;, which is really easy and has its own JSON parser.&lt;/p&gt;
&lt;p&gt;The function created is really simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, a GET request is send with SPK-ID as a parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there is a 4xx or 5xx error, it raises an exception.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Else, it parses classical orbital elements, which are used then to&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create and return an Orbit object.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After that, we were able to create such a beautiful code :P :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;neos&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.bodies&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Earth&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.twobody.orbit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Orbit&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;poliastro.plotting&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrbitPlotter&lt;/span&gt;

&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OrbitPlotter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;apophis_orbit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;orbit_from_spk_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2099942&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Apophis SPK-ID&lt;/span&gt;
&lt;span class="n"&gt;earth_orbit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;Orbit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_body_ephem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Earth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;earth_orbit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Earth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apophis_orbit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Apophis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which produces:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Apophis Orbit" src="https://www.poliastro.space/images/apophis.png" title="Apophis Orbit"&gt;&lt;/p&gt;
&lt;p&gt;The function was coded and it worked, but there were still some problems.&lt;/p&gt;
&lt;p&gt;As I said in the previous entry, &lt;code&gt;NeoWs&lt;/code&gt; has pros (that's why we decided to use it), but also has some cons, and one of them is that it only allows to browse by SPK-ID number.&lt;/p&gt;
&lt;h2&gt;SPK-ID and orbit_from_name()&lt;/h2&gt;
&lt;p&gt;SPK-ID (do not confuse with IAU number) is a number that &lt;a href="https://www.jpl.nasa.gov/"&gt;JPL&lt;/a&gt; uses to catalog small-bodies in their database, so it isn't easy to find unless you search in &lt;a href="https://ssd.jpl.nasa.gov/sbdb.cgi"&gt;JPL Small-bodies Database&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Having to use internet in order to find every SPK-ID would be really boring, so the next logical step was coding a function that, given a name, searched the corresponding SPK-ID. Combining this function with the previously written, &lt;code&gt;orbit_from_name&lt;/code&gt; function would be trivial.&lt;/p&gt;
&lt;p&gt;As I said, the only way that we had to find SPK-IDs was using JPL Small-bodies Database, but it doesn't provide machine-readable data (web interface isn't really modern either, as you can see), so a HTML parser was needed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SBDB interface" src="https://www.poliastro.space/images/sbdb_interface.png" title="SBDB interface"&gt;&lt;/p&gt;
&lt;p&gt;We wrote an &lt;code&gt;name_from_spk_id()&lt;/code&gt; function that basically makes a GET request to SBDB with a string. After that, there are three options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If an object exists with that name, SPK-ID is parsed and returned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there are several objects that matches the query, an exception is raised with the list of those objects, and function return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If no objects were found, an exception is raised and function return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, code is available on &lt;a href="https://github.com/poliastro/poliastro/blob/master/src/poliastro/neos.py"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Modules with HTML parsing in them are usually ugly, and this one is no exception, but it works, so currently you can get a NEO orbit (only NEAs at the moment, but it's equally great) by name or IAU number.&lt;/p&gt;
&lt;p&gt;Next days, we will probably take a close look at some JPL offline databases we found yesterday, so we don't know if we'll continue with the same code or we'll change radically. That means that next week entry topic will be completly unknown until then ;) See you!&lt;/p&gt;</content><category term="SOCIS"></category><category term="SOCIS"></category><category term="poliastro"></category><category term="NASA"></category><category term="NeoWs"></category><category term="APIs"></category><category term="HTML"></category><category term="parsing"></category></entry><entry><title>Space APIs, JSON and REST (SOCIS 2017)</title><link href="https://www.poliastro.space/blog/2017/07/25/2017-07-25-space-apis-json-and-rest-socis/" rel="alternate"></link><published>2017-07-25T14:00:00+02:00</published><updated>2017-07-25T14:00:00+02:00</updated><author><name>Antonio Hidalgo Galindo</name></author><id>tag:www.poliastro.space,2017-07-25:/blog/2017/07/25/2017-07-25-space-apis-json-and-rest-socis/</id><summary type="html">&lt;p&gt;After setting up the blog, it was time to start with the first week of my &lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo#timeline"&gt;timeline&lt;/a&gt;. The task for this week was to research the available NASA Open APIs and other NEOs databases that could better fit for this project.&lt;/p&gt;
&lt;p&gt;I had already studied some APIs, and taked a look at their capabilities, but further research was needed. As my &lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo#proposal"&gt;proposal&lt;/a&gt; was made of 3 different pages, I analyzed each one separately.&lt;/p&gt;
&lt;h2&gt;CNEOS page&lt;/h2&gt;
&lt;p&gt;In the &lt;a href="https://cneos.jpl.nasa.gov/orbits/"&gt;CNEOS page&lt;/a&gt; there is a list of tools, but it can be shorten to four different APIs/Databases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd.jpl.nasa.gov/sbdb.cgi"&gt;JPL Small-Body Database Browser&lt;/a&gt;: allows to search any small-body (like NEOs) by entering the IAU number, name, or designation, and also supports wild-cards &lt;code&gt;*&lt;/code&gt; and/or &lt;code&gt;?&lt;/code&gt;. Available data include, quoting the page itself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;orbital elements&lt;/li&gt;
&lt;li&gt;orbit diagrams&lt;/li&gt;
&lt;li&gt;physical parameters&lt;/li&gt;
&lt;li&gt;discovery circumstances&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Newly discovered objects and their …&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;After setting up the blog, it was time to start with the first week of my &lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo#timeline"&gt;timeline&lt;/a&gt;. The task for this week was to research the available NASA Open APIs and other NEOs databases that could better fit for this project.&lt;/p&gt;
&lt;p&gt;I had already studied some APIs, and taked a look at their capabilities, but further research was needed. As my &lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo#proposal"&gt;proposal&lt;/a&gt; was made of 3 different pages, I analyzed each one separately.&lt;/p&gt;
&lt;h2&gt;CNEOS page&lt;/h2&gt;
&lt;p&gt;In the &lt;a href="https://cneos.jpl.nasa.gov/orbits/"&gt;CNEOS page&lt;/a&gt; there is a list of tools, but it can be shorten to four different APIs/Databases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd.jpl.nasa.gov/sbdb.cgi"&gt;JPL Small-Body Database Browser&lt;/a&gt;: allows to search any small-body (like NEOs) by entering the IAU number, name, or designation, and also supports wild-cards &lt;code&gt;*&lt;/code&gt; and/or &lt;code&gt;?&lt;/code&gt;. Available data include, quoting the page itself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;orbital elements&lt;/li&gt;
&lt;li&gt;orbit diagrams&lt;/li&gt;
&lt;li&gt;physical parameters&lt;/li&gt;
&lt;li&gt;discovery circumstances&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Newly discovered objects and their orbits are added on a daily basis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd.jpl.nasa.gov/sbdb_query.cgi"&gt;JPL Small-Body Database Search Engine&lt;/a&gt;: can be used to generate custom tables of orbital and/or physical parameters for all asteroids and comets or a specified sub-set. There is a huge amount of search contraints, for example:
&lt;img alt="Figure 1" src="https://www.poliastro.space/images/sbdb_constraints.jpg" title="Figure 1"&gt;
And you can also select output fields, and choose between HTML and CSV output format.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd.jpl.nasa.gov/?horizons"&gt;Horizons&lt;/a&gt;: provides access to highly accurate ephemerides for solar system objects, not only small-body. Can be accessed using telnet, email and web-interface.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;NEOWS&lt;/h2&gt;
&lt;p&gt;Among NASA OPEN APIs, it is &lt;a href="https://api.nasa.gov/neo/?api_key=DEMO_KEY"&gt;NeoWs&lt;/a&gt;. It can be used to get lists of Near Earth Objects (within a date range, for today...), and to retrieve orbital elements and close aproaches data given a SPK-ID (integer code that &lt;a href="https://www.jpl.nasa.gov/"&gt;JPL&lt;/a&gt; uses to identify objects). Despite his name, only works with NEAs (Near Earth Asteroids), and therefore there is no information about comets.&lt;/p&gt;
&lt;h2&gt;JPL SSD/CNEOS API SERVICE&lt;/h2&gt;
&lt;p&gt;As stated on his web, &lt;a href="https://ssd-api.jpl.nasa.gov/"&gt;JPL SSD/CNEOS API SERVICE&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;provides an interface to machine-readable data (JSON-format) related to SSD and CNEOS.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The more relevant tools are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd-api.jpl.nasa.gov/doc/cad.html"&gt;Close-Approach Data (CAD)&lt;/a&gt;: provides access to current close-approach data for all asteroids and comets in JPL Small-Body DataBase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://cneos.jpl.nasa.gov/nhats/"&gt;Accessible NEAs (NHATS)&lt;/a&gt;: is provided by Near-Earth Object Human Space Flight Accessible Targets Study (&lt;a href="https://cneos.jpl.nasa.gov/nhats/intro.html"&gt;NHATS&lt;/a&gt;), and can be used to identify those NEAs that may be well-suited to future human space flight round trip rendezvous missions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ssd-api.jpl.nasa.gov/doc/scout.html"&gt;Scout&lt;/a&gt;: Scout system provides trajectory analysis and hazard assessment for recently detected objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://cneos.jpl.nasa.gov/sentry/"&gt;Sentry&lt;/a&gt;: Sentry is a highly automated collision monitoring system that continually scans the most current asteroid catalog for possibilities of future impact.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Choosing the APIs&lt;/h2&gt;
&lt;p&gt;Once all the possibilities were studied, it was time to choose the APIs that seem more suitable for our purpose.&lt;/p&gt;
&lt;p&gt;Given that &lt;code&gt;poliastro&lt;/code&gt; core are &lt;a href="https://poliastro.readthedocs.io/en/latest/api.html#poliastro.twobody.orbit.Orbit"&gt;Orbit&lt;/a&gt; objects, our main goal is to automatically create a NEO orbit, based on data from internet APIs. In order to achieve this, orbital elements or position and velocity vectors are needed, so this was the first requeriment that APIs had to comply with.&lt;/p&gt;
&lt;p&gt;Therefore several APIs could be discarded because they do not provide needed data: &lt;code&gt;Accesible NEAs&lt;/code&gt;, &lt;code&gt;Scout&lt;/code&gt;, &lt;code&gt;Sentry&lt;/code&gt; and &lt;code&gt;Close-Approach Data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since we would rather not have to deal with intricate POST requests, another important requeriment for APIs was to provide a good interface (the "I" in API stands for interface, so...), and with luck something close to &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;RESTFul webservices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JPL Small-Body Database Search Engine&lt;/code&gt; requires POST requests that are more than 150 lines long, so we automatically discarded it.&lt;/p&gt;
&lt;p&gt;Finally, the third requeriment, considering that we are writing code in Python, was machine-readable data output, with JSON being the best format and awfully written HTML being the worst.&lt;/p&gt;
&lt;p&gt;Both &lt;code&gt;JPL Small-Body Database Browser&lt;/code&gt; and &lt;code&gt;Horizons&lt;/code&gt; provide HTML output, which have to be parsed, with all the risks that imply, so they were discarded.&lt;/p&gt;
&lt;p&gt;In order to clarify all of this data sequence, I made a table:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;API&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Orbital elements?&lt;/th&gt;
&lt;th style="text-align: center;"&gt;REST-style?&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Machine-readable?&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Other&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;JPL Small-Body Database Browser&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Not limited to NEOs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;JPL Small-Body Database Search Engine&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes (CSV)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Not limited to NEOs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Horizons&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;[existent Python interface]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;NeoWs&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Only for NEAs (asteroids)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Close-Approach Data (CAD)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Accessible NEAs (NHATS)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Scout&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Sentry&lt;/td&gt;
&lt;td style="text-align: center;"&gt;No&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Yes (JSON)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;[existent Python interface]: https://github.com/mommermi/callhorizons&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;With all this requeriments in mind, the best option seemed to be &lt;code&gt;NeoWs&lt;/code&gt;. Although it doesn't provides information about NECs (comets), they are only 0.7% of NEOs total, so they could be discarded (only for the moment :P). Another issue related to &lt;code&gt;NeoWs&lt;/code&gt; is the fact that it only allows to browse by SPK-ID number (do not confuse with IAU number), which is unknown for most people, so before doing any query, SPK-ID number has to be found.&lt;/p&gt;
&lt;p&gt;And that was all for this week. Next week, we will start with coding itself, adding an &lt;code&gt;orbit_from_spk_id&lt;/code&gt; function to &lt;code&gt;poliastro&lt;/code&gt;, that queries &lt;code&gt;NeoWs&lt;/code&gt; API. See you!&lt;/p&gt;</content><category term="SOCIS"></category><category term="SOCIS"></category><category term="ESA"></category><category term="poliastro"></category><category term="NASA"></category><category term="APIs"></category><category term="open data"></category></entry><entry><title>Pelican, Github Pages and auto-deployment (SOCIS 2017)</title><link href="https://www.poliastro.space/blog/2017/07/15/2017-07-15-pelican-github-pages-and-auto-deployment-socis/" rel="alternate"></link><published>2017-07-15T14:00:00+02:00</published><updated>2017-07-15T14:00:00+02:00</updated><author><name>Antonio Hidalgo Galindo</name></author><id>tag:www.poliastro.space,2017-07-15:/blog/2017/07/15/2017-07-15-pelican-github-pages-and-auto-deployment-socis/</id><summary type="html">&lt;p&gt;After several weeks thinking that &lt;a href="http://sophia.estec.esa.int/socis/"&gt;SOCIS&lt;/a&gt; would not launch this year, finally the long-awaited email arrived! I am really happy for being selected by &lt;code&gt;poliastro&lt;/code&gt; and my mentor &lt;code&gt;@astrojuanlu&lt;/code&gt;, with the aim of creating an API, relying on NASA Open APIs, in order to provide small-bodies orbital data (&lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo"&gt;my proposal can be seen here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Our plan is to write a weekly blog entry, stating and documenting what have been done during that period. I think these posts will be a great way of reviewing what have been accomplished, and I also hope they will be interesting enough to anyone interested in Python, science, &lt;a href="https://en.wikipedia.org/wiki/Near-Earth_object"&gt;NEOs&lt;/a&gt;, or just reading random internet blogs.&lt;/p&gt;
&lt;p&gt;This has been the first one of eight weeks (yeah, that’s not what my proposal timeline says, but it’s all we have 😊), and, surprisingly, the first task I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After several weeks thinking that &lt;a href="http://sophia.estec.esa.int/socis/"&gt;SOCIS&lt;/a&gt; would not launch this year, finally the long-awaited email arrived! I am really happy for being selected by &lt;code&gt;poliastro&lt;/code&gt; and my mentor &lt;code&gt;@astrojuanlu&lt;/code&gt;, with the aim of creating an API, relying on NASA Open APIs, in order to provide small-bodies orbital data (&lt;a href="https://github.com/poliastro/poliastro/wiki/SOCIS-2017-Antonio-Hidalgo"&gt;my proposal can be seen here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Our plan is to write a weekly blog entry, stating and documenting what have been done during that period. I think these posts will be a great way of reviewing what have been accomplished, and I also hope they will be interesting enough to anyone interested in Python, science, &lt;a href="https://en.wikipedia.org/wiki/Near-Earth_object"&gt;NEOs&lt;/a&gt;, or just reading random internet blogs.&lt;/p&gt;
&lt;p&gt;This has been the first one of eight weeks (yeah, that’s not what my proposal timeline says, but it’s all we have 😊), and, surprisingly, the first task I was assigned was… setting up this blog!&lt;/p&gt;
&lt;p&gt;So, without further ado, let’s start.&lt;/p&gt;
&lt;h2&gt;Pelican, Github Pages and auto-deployment&lt;/h2&gt;
&lt;p&gt;Given that &lt;code&gt;poliastro&lt;/code&gt; is a Python-based project, we decided to use &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, a static site generator which is written in Python, to create the blog. Regarding the hosting, our choice was Github Pages. My mentor had already participated in a repository with a Pelican blog, based on another &lt;a href="https://github.com/jakevdp/jakevdp.github.io-source"&gt;repository from Jake Vanderplas&lt;/a&gt;, so that was my starting point.&lt;/p&gt;
&lt;p&gt;I had to change all the pages and strings related to the previous project for &lt;code&gt;poliastro&lt;/code&gt; ones. Besides that, we wanted to automatize the deployment process to Github Pages, a little harder task, and we decided to try with Travis CI, a Continuous Integration tool, very used in Github environment.&lt;/p&gt;
&lt;p&gt;After googling a little bit, a few results appeared. Vladimir Starkov had researched in &lt;a href="https://iamstarkov.com/deploy-gh-pages-from-travis/"&gt;this article&lt;/a&gt; about basically what I was trying to accomplish. The easiest way of authenticating on Github was using a Github Token, but it had to be encrypted so no one could login in my account using it.&lt;/p&gt;
&lt;p&gt;After some further researching, I discovered that Travis encrypts variables using a RSA public key associated to every repository (you can use Travis API if you want to check it: &lt;code&gt;https://api.travis-ci.org/repos/$(owner_name)/$(repo_name)/key&lt;/code&gt;. As I have full permissions to edit &lt;code&gt;poliastro.github.io-source&lt;/code&gt; and &lt;code&gt;poliastro.github.io repos&lt;/code&gt; repos, I decided to request a Github Token, and I encrypted it with the public key associated to &lt;code&gt;poliastro.github.io-source&lt;/code&gt; repository in Travis CI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;travis&lt;span class="w"&gt; &lt;/span&gt;encrypt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;GH_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;My&lt;span class="w"&gt; &lt;/span&gt;Github&lt;span class="w"&gt; &lt;/span&gt;Token&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;/poliastro/poliastro.github.io-source
secure:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a-really-long-string”&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Adding this encrypted key to .travis.yml file, I could use GH_TOKEN variable in it, and upload it to Github without exposing my private token.&lt;/p&gt;
&lt;p&gt;The deployment was coded in a &lt;code&gt;makefile&lt;/code&gt;, using the &lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import tool&lt;/a&gt;, which creates a branch containing only documentation. This branch is later pushed to Github Pages repository, &lt;code&gt;poliastro.github.io&lt;/code&gt; in our code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;GITHUB_PAGES_REMOTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GH_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;@github.com/poliastro/poliastro.github.io.git
&lt;span class="nv"&gt;GITHUB_PAGES_BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;master

&lt;span class="err"&gt;.......&lt;/span&gt;

&lt;span class="nf"&gt;publish-to-github-force&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;ghp-import&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;publish-to-github-force from &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;GIT_COMMIT_HASH&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;blog-build&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_REMOTE&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;blog-build:&lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, whenever Travis CI executes a build in &lt;a href="https://travis-ci.org/poliastro/poliastro.github.io-source"&gt;poliastro.github.io-source&lt;/a&gt;, the variable gets automatically decrypted using the repository private key (except for builds caused by a Pull Request, as stated &lt;a href="https://docs.travis-ci.com/user/encryption-keys/"&gt;here&lt;/a&gt;, fact that turned to be a big headache for us :P), and the token is used to push to &lt;code&gt;poliastro.github.io&lt;/code&gt; repo.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Travis log with decrypted GH_TOKEN" src="https://www.poliastro.space/images/travis_decryption_log.jpg" title="Travis log with decrypted GH_TOKEN"&gt;&lt;/p&gt;
&lt;p&gt;That was my work in the last week. If you would like to check the code, is available on &lt;a href="https://github.com/poliastro/poliastro.github.io-source"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next week we will probably start with Python, NASA APIs and more interesting stuff!&lt;/p&gt;</content><category term="SOCIS"></category><category term="SOCIS"></category><category term="ESA"></category><category term="poliastro"></category></entry></feed>